# Copyright 2023 - TODAY, Akretion - Raphael Valyi <raphael.valyi@akretion.com>
# License AGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/sped-extractor and xsdata-odoo
# flake8: noqa: B950

import textwrap

from erpbrasil.base import misc

from odoo import api, fields, models

from odoo.addons.l10n_br_sped_base.models.sped_mixin import LAYOUT_VERSIONS


class Registro0000(models.Model):
    "Abertura do Arquivo Digital e Identificação da Pessoa Jurídica"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.0000"
    _inherit = ["l10n_br_sped.ecf.9.0000"]
    _odoo_model = "res.company"

    IND_SIT_INI_PER = fields.Selection(
        default="0",
        selection=[
            ("0", "0 - Normal"),
            ("1", "1 - Abertura"),
            ("2", "2 - Cisão/Fusão"),
            ("3", "3 - Obrigatoriedade no curso do ano"),
        ],
        string="Indicador de situação do inicio do período",
    )

    @api.model
    def _odoo_domain(self, parent_record, declaration, index=0):
        return [("id", "=", declaration.company_id.id)]

    @api.model
    def _map_from_odoo(self, record, parent_record, declaration):
        return {
            "NOME_ESC": 0,  # Texto fixo contendo a identificação do tipo de Sped...
            "COD_VER": LAYOUT_VERSIONS["ecf"],
            "CNPJ": misc.punctuation_rm(record.cnpj_cpf),
            "NOME": record.legal_name,
            # "IND_SIT_INI_PER": (will use the declaration field directly),
            "SIT_ESPECIAL": 0,  # Indicador de Situação Especial e Outros Eventos...
            "PAT_REMAN_CIS": 0,  # Patrimônio Remanescente em Caso de Cisão (%). ...
            "DT_SIT_ESP": 0,  # Data da Situação Especial ou Evento: Informar a d...
            # "DT_INI": (will use declaration field directly),
            # "DT_FIN": (will use declaration field directly),
            "RETIFICADORA": 0,  # A pessoa jurídica deve assinalar este campo no ...
            "NUM_REC": 0,  # Número do Recibo da ECF Anterior (hashcode): Este ca...
            "TIP_ECF": 0,  # Indicador do Tipo da ECF: 0 – ECF de empresa não par...
            "COD_SCP": 0,  # CNPJ da SCP (Art. 4º, XVII, da Instrução Normativa R...
        }


class Registro0010(models.Model):
    "Parâmetros de Tributação"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.0010"
    _inherit = "l10n_br_sped.ecf.9.0010"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "HASH_ECF_ANTERIOR": 0,  # Hashcode da ECF do período imediatamente a...
    #         "OPT_REFIS": 0,  # Indicador de Optante pelo Refis: S - Sim N – Não A...
    #         "FORMA_TRIB": 0,  # Forma de Tributação: 1 – Lucro Real. 2 – Lucro Re...
    #         "FORMA_APUR": 0,  # Indicador do Período de Apuração do IRPJ e da CSL...
    #         "COD_QUALIF_PJ": 0,  # Qualificação da Pessoa Jurídica: 01 – PJ em Ge...
    #         "FORMA_TRIB_PER": 0,  # Forma de Tributação no Período: Forma de trib...
    #         "MES_BAL_RED": 0,  # Forma de Apuração da Estimativa Mensal: Indicaçã...
    #         "TIP_ESC_PRE": 0,  # A Escrituração: C – Obrigada a entregar a ECD ou...
    #         "TIP_ENT": 0,  # C C C C C Tipo de Pessoa Jurídica Imune ou Isenta: 0...
    #         "FORMA_APUR_I": 0,  # Apuração do IRPJ para Imunes ou Isentas: Existê...
    #         "APUR_CSLL": 0,  # Apuração da CSLL para Imunes ou Isentas: A – Anual...
    #         "IND_REC_RECEITA": 0,  # Critério de reconhecimento de receitas para ...
    #     }


class Registro0020(models.Model):
    "Parâmetros Complementares"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.0020"
    _inherit = "l10n_br_sped.ecf.9.0020"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "IND_ALIQ_CSLL": 0,  # PJ Sujeita à Alíquota da CSLL de 9% ou 15% ou ...
    #         "IND_QTE_SCP": 0,  # Quantidade total de SCP do Sócio Ostensivo de SC...
    #         "IND_ADM_FUN_CLU": 0,  # Administradora de Fundos e Clubes de Investi...
    #         "IND_PART_CONS": 0,  # Participações em Consórcios de Empresas: S – S...
    #         "IND_OP_EXT": 0,  # Operações com o Exterior: S – Sim N – Não A pesso...
    #         "IND_OP_VINC": 0,  # Operações com Pessoa Vinculada/Interposta Pessoa...
    #         "IND_PJ_ENQUAD": 0,  # PJ Enquadrada nos artigos 48 ou 49 da Instruçã...
    #         "IND_PART_EXT": 0,  # Participações no Exterior: A pessoa jurídica de...
    #         "IND_ATIV_RURAL": 0,  # Atividade Rural: A pessoa jurídica deve assin...
    #         "IND_LUC_EXP": 0,  # Existência de Lucro da Exploração: S – Sim N – N...
    #         "IND_RED_ISEN": 0,  # Isenção e Redução do Imposto para Lucro Presumi...
    #         "IND_FIN": 0,  # Indicativo da Existência de FINOR/FINAM: S – Sim N –...
    #         "IND_PART_COLIG": 0,  # Participação Avaliada pelo Método de Equivalê...
    #         "IND_REC_EXT": 0,  # Recebimentos do Exterior ou de Não Residentes: S...
    #         "IND_ATIV_EXT": 0,  # Ativos no Exterior: S – Sim N – Não Preenchida ...
    #         "IND_PGTO_EXT": 0,  # Pagamentos ao Exterior ou a Não Residentes: S –...
    #         "IND_E_COM_TI": 0,  # Comércio Eletrônico e Tecnologia da Informação:...
    #         "IND_ROY_REC": 0,  # Royalties Recebidos do Brasil e do Exterior: S –...
    #         "IND_ROY_PAG": 0,  # Royalties Pagos a Beneficiários do Brasil e do E...
    #         "IND_REND_SERV": 0,  # Rendimentos Relativos a Serviços, Juros e Divi...
    #         "IND_PGTO_REM": 0,  # Pagamentos ou Remessas a Título de Serviços, Ju...
    #         "IND_INOV_TEC": 0,  # Inovação Tecnológica e Desenvolvimento Tecnológ...
    #         "IND_CAP_INF": 0,  # Capacitação de Informática e Inclusão Digital: S...
    #         "IND_PJ_HAB": 0,  # PJ Habilitada no Repes, Recap, Padis, PATVD, Reid...
    #         "IND_POLO_AM": 0,  # Pólo Industrial de Manaus e Amazônia Ocidental: ...
    #         "IND_ZON_EXP": 0,  # Zonas de Processamento de Exportação: S – Sim N ...
    #         "IND_AREA_COM": 0,  # Áreas de Livre Comércio: S – Sim N – Não A pess...
    #         "IND_PAIS_A_PAIS": 0,  # Enditdade Integrante de Grupo Multinacional:...
    #         "IND_DEREX": 0,  # Declaração sobre utilização dos recursos em moeda ...
    #     }


class Registro0021(models.Model):
    "Parâmetros de Identificação dos Tipos de Programa"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.0021"
    _inherit = "l10n_br_sped.ecf.9.0021"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "IND_REPES": 0,  # Regime Especial de Tributação para a Plataforma de...
    #         "IND_RECAP": 0,  # Regime Especial de Aquisição de Bens de Capital pa...
    #         "IND_PADIS": 0,  # Programa de Apoio ao Desenvolvimento Tecnológico d...
    #         "IND_PATVD": 0,  # Programa de Apoio ao Desenvolvimento Tecnológico d...
    #         "IND_REIDI": 0,  # Regime Especial de Incentivos para o Desenvolvimen...
    #         "IND_REPENEC": 0,  # Regime Especial de Incentivos para o Desenvolvim...
    #         "IND_REICOMP": 0,  # Regime Especial de Incentivo a Computadores para...
    #         "IND_RETAERO": 0,  # Regime Especial para a Indústria Aeronáutica Bra...
    #         "IND_RECINE": 0,  # Regime Especial de Tributação para Desenvolviment...
    #         "IND_RESIDUOS_SOLIDOS": 0,  # Estabelecimentos industriais façam jus ...
    #         "IND_RECOPA": 0,  # Regime Especial de Tributação para construção, am...
    #         "IND_COPA_DO_MUNDO": 0,  # Habilitada para fins de fruição dos benefí...
    #         "IND_RETID": 0,  # Regime Especial Tributário para a Indústria de Def...
    #         "IND_REPNBL_REDES": 0,  # Regime Especial de Tributação do Programa N...
    #         "IND_REIF": 0,  # Regime Especial de Incentivo ao Desenvolvimento da ...
    #         "IND_OLIMPIADAS": 0,  # Habilitada para fins de fruição dos benefício...
    #     }


class Registro0030(models.Model):
    "Dados Cadastrais"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.0030"
    _inherit = "l10n_br_sped.ecf.9.0030"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_NAT": 0,  # Código da natureza jurídica, conforme tabela do Sped...
    #         "CNAE_FISCAL": 0,  # Código da atividade econômica (CNAE-Fiscal), con...
    #         "ENDERECO": 0,  # Endereço da pessoa jurídica.
    #         "NUM": 0,  # Número
    #         "COMPL": 0,  # Complemento
    #         "BAIRRO": 0,  # Bairro/Distrito
    #         "UF": 0,  # UF, conforme do tabela do Sped (Disponibilizada no progra...
    #         "COD_MUN": 0,  # Código do Município, conforme tabela do Sped (Dispon...
    #         "CEP": 0,  # Código de Endereçamento Postal (CEP)
    #         "NUM_TEL": 0,  # DDD + Número do Telefone
    #         "EMAIL": 0,  # Correio eletrônico
    #     }


class Registro0035(models.Model):
    "Identificação das SCP"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.0035"
    _inherit = "l10n_br_sped.ecf.9.0035"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_SCP": 0,  # CNPJ da SCP (Art. 4º, XVII, da Instrução Normativa R...
    #         "NOME_SCP": 0,  # Descrição da SCP
    #     }


class Registro0930(models.Model):
    "Identificação dos Signatários da ECF"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.0930"
    _inherit = "l10n_br_sped.ecf.9.0930"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "IDENT_NOM": 0,  # Nome do Signatário
    #         "IDENT_CPF_CNPJ": 0,  # CPF/CNPJ: O tamanho do campo deve ser exatame...
    #         "IDENT_QUALIF": 0,  # Código de qualificação do assinante, conforme t...
    #         "IND_CRC": 0,  # Número de inscrição do contabilista no Conselho Regi...
    #         "EMAIL": 0,  # E-mail do signatário
    #         "FONE": 0,  # DDD e telefone do signatário
    #     }


class RegistroE010(models.Model):
    "Saldos Finais Recuperados da ECF Anterior"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.e010"
    _inherit = "l10n_br_sped.ecf.9.e010"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_NAT": 0,  # Natureza da Conta.
    #         "COD_CTA_REF": 0,  # Código da Conta Referencial (Analíticas e Sintét...
    #         "DESC_CTA_REF": 0,  # Descrição da Conta Referencial.
    #         "VAL_CTA_REF": 0,  # Valor Total da Conta Referencial.
    #         "IND_VAL_CTA_REF": 0,  # Indicador do Valor Total da Conta Referencia...
    #     }


class RegistroE015(models.Model):
    "Contas Contábeis Mapeadas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.e015"
    _inherit = "l10n_br_sped.ecf.9.e015"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_CTA": 0,  # Código da Conta Contábil Analítica (K155).
    #         "COD_CCUS": 0,  # Código do Centro de Custos.
    #         "DESC_CTA": 0,  # Descrição da Conta.
    #         "VAL_CTA": 0,  # Saldo Final da Conta: Saldo final da conta do regist...
    #         "IND_VAL_CTA": 0,  # Indicador do Saldo Final da Conta: C – Credor D ...
    #     }


class RegistroE020(models.Model):
    "Saldos Finais das Contas da Parte B do e-Lalur da ECF Imediatamente Anterior"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.e020"
    _inherit = "l10n_br_sped.ecf.9.e020"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_CTA_B": 0,  # Código da Conta da Parte B: Código unívoco atribuí...
    #         "DESC_CTA_LAL": 0,  # Descrição da Conta.
    #         "DT_AP_LAL": 0,  # Data de Criação: Data final do período de apuração...
    #         "DT_LIM_LAL": 0,  # Data Limite para a Exclusão, Adição ou Compensaçã...
    #         "TRIBUTO": 0,  # Indicador de Tributo da Adição/Exclusão: I – Imposto...
    #         "VL_SALDO_FIN": 0,  # Saldo Final do Período Anterior.
    #         "IND_VL_SALDO_FIN": 0,  # Indicador de Saldo Final do Período Anterio...
    #         "COD_PB_RFB": 0,  # Código da tabela padrão da Parte B.
    #     }


class RegistroE030(models.Model):
    "Identificação do Período"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.e030"
    _inherit = "l10n_br_sped.ecf.9.e030"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "DT_INI": 0,  # Data do Início do Período
    #         "DT_FIN": 0,  # Data do Fim do período
    #         "PER_APUR": 0,  # I R S Período de Apuração [para 0010.FORMA_APUR = “...
    #     }


class RegistroE155(models.Model):
    "Detalhes dos Saldos Contábeis Calculados com Base nas ECD"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.e155"
    _inherit = "l10n_br_sped.ecf.9.e155"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_CTA": 0,  # Código da Conta Analítica.
    #         "COD_CCUS": 0,  # Código do Centro de Custos.
    #         "VL_SLD_INI": 0,  # Valor do Saldo Inicial do Período.
    #         "IND_VL_SLD_INI": 0,  # Indicador da Situação do Saldo Inicial: D – D...
    #         "VL_DEB": 0,  # Valor Total dos Débitos no Período.
    #         "VL_CRED": 0,  # Valor Total dos Créditos no Período.
    #         "VL_SLD_FIN": 0,  # Valor do Saldo Final do Período.
    #         "IND_VL_SLD_FIN": 0,  # Indicador da Situação do Saldo Final: D – Dev...
    #     }


class RegistroE355(models.Model):
    "Detalhes dos Saldos das Contas de Resultado Antes do Encerramento"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.e355"
    _inherit = "l10n_br_sped.ecf.9.e355"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_CTA": 0,  # Código da Conta Analítica de Resultado.
    #         "COD_CCUS": 0,  # Código do Centro de Custos.
    #         "VL_SLD_FIN": 0,  # Valor do Saldo Final Antes do Lançamento de Encer...
    #         "IND_VL_SLD_FIN": 0,  # Indicador da Situação do Saldo Final: D – Dev...
    #     }


class RegistroJ050(models.Model):
    "Plano de Contas do Contribuinte"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.j050"
    _inherit = "l10n_br_sped.ecf.9.j050"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "DT_ALT": 0,  # Data de Atualização (inclusão/ alteração).
    #         "COD_NAT": 0,  # Código da Natureza da Conta Analítica ou Sintética: ...
    #         "IND_CTA": 0,  # Indicador do Tipo de Conta: S - Sintética (grupo de ...
    #         "NIVEL": 0,  # Nível da Conta Analítica/Sintética: Número crescente a...
    #         "COD_CTA": 0,  # Código da Conta Analítica/Sintética.
    #         "COD_CTA_SUP": 0,  # Código da Conta Sintética de Nível Imediatamente...
    #         "CTA": 0,  # Nome da Conta Analítica.
    #     }


class RegistroJ051(models.Model):
    "Plano de Contas Referencial"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.j051"
    _inherit = "l10n_br_sped.ecf.9.j051"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_CCUS": 0,  # Código do Centro de Custos.
    #         "COD_CTA_REF": 0,  # Código da Conta no Plano de Contas Referencial D...
    #     }


class RegistroJ053(models.Model):
    "Subcontas Correlatas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.j053"
    _inherit = "l10n_br_sped.ecf.9.j053"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_IDT": 0,  # Código de Identificação do Grupo Formado por Conta-S...
    #         "COD_CNT_CORR": 0,  # Código da Subconta Correlata. (Deve estar no pl...
    #         "NAT_SUB_CNT": 0,  # Natureza da Subconta Correlata. (Conforme tabela...
    #     }


class RegistroJ100(models.Model):
    "Centro de Custos"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.j100"
    _inherit = "l10n_br_sped.ecf.9.j100"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "DT_ALT": 0,  # Data da Inclusão/Alteração.
    #         "COD_CCUS": 0,  # Código do Centro de Custos.
    #         "CCUS": 0,  # Nome do Centro de Custos.
    #     }


class RegistroK030(models.Model):
    "Identificação dos Períodos e Formas de Apuração do IRPJ e da CSLL no Ano-Calendário"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.k030"
    _inherit = "l10n_br_sped.ecf.9.k030"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "DT_INI": 0,  # Data do Início do Período
    #         "DT_FIN": 0,  # Data do Fim do período
    #         "PER_APUR": 0,  # I P Período de Apuração [para 0010.FORMA_APUR = “A”...
    #     }


class RegistroK155(models.Model):
    "Detalhes dos Saldos Contábeis"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.k155"
    _inherit = "l10n_br_sped.ecf.9.k155"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_CTA": 0,  # Código da Conta Analítica Patrimonial.
    #         "COD_CCUS": 0,  # Código do Centro de Custos.
    #         "VL_SLD_INI": 0,  # Valor do Saldo Inicial do Período.
    #         "IND_VL_SLD_INI": 0,  # Indicador da Situação do Saldo Inicial: D – D...
    #         "VL_DEB": 0,  # Valor Total dos Débitos no Período.
    #         "VL_CRED": 0,  # Valor Total dos Créditos no Período.
    #         "VL_SLD_FIN": 0,  # Valor do Saldo Final do Período.
    #         "IND_VL_SLD_FIN": 0,  # Indicador da Situação do Saldo Final: D – Dev...
    #     }


class RegistroK156(models.Model):
    "Mapeamento Referencial do Saldo"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.k156"
    _inherit = "l10n_br_sped.ecf.9.k156"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_CTA_REF": 0,  # Código da Conta no Plano de Contas Referencial, ...
    #         "VL_SLD_INI": 0,  # Valor do Saldo Inicial do Período.
    #         "IND_VL_SLD_INI": 0,  # Indicador da Situação do Saldo Inicial: D – D...
    #         "VL_DEB": 0,  # Valor Total dos Débitos no Período.
    #         "VL_CRED": 0,  # Valor Total dos Créditos no Período.
    #         "VL_SLD_FIN": 0,  # Valor do Saldo Final do Período.
    #         "IND_VL_SLD_FIN": 0,  # Indicador da Situação do Saldo Final: D – Dev...
    #     }


class RegistroK355(models.Model):
    "Saldos Finais das Contas Contábeis de Resultado Antes do Encerramento"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.k355"
    _inherit = "l10n_br_sped.ecf.9.k355"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_CTA": 0,  # Código da Conta Analítica de Resultado.
    #         "COD_CCUS": 0,  # Código do Centro de Custos.
    #         "VL_SLD_FIN": 0,  # Valor do Saldo Final Antes do Lançamento de Encer...
    #         "IND_VL_SLD_FIN": 0,  # Indicador da Situação do Saldo Final: D – Dev...
    #     }


class RegistroK356(models.Model):
    "Mapeamento Referencial dos Saldos Finais das Contas de Resultado Antes do Encerramento"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.k356"
    _inherit = "l10n_br_sped.ecf.9.k356"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_CTA_REF": 0,  # Código da Conta no Plano de Contas Referencial, ...
    #         "VL_SLD_FIN": 0,  # Valor do Saldo Final Antes do Lançamento de Encer...
    #         "IND_VL_SLD_FIN": 0,  # Indicador da Situação do Saldo Final: D – Dev...
    #     }


class RegistroK915(models.Model):
    "Justificativa para Divergência nas Contas Patrimoniais"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.k915"
    _inherit = "l10n_br_sped.ecf.9.k915"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "PER_APUR": 0,  # Período de Apuração [para 0010.FORMA_APUR = “A” ou ...
    #         "COD_CTA": 0,  # Código da conta contábil.
    #         "COD_CCUS": 0,  # Código do centro de custos.
    #         "ID_REGRA": 0,  # Identificação da regra que foi descumprida. O siste...
    #         "VL_SLD_INI_ESP": 0,  # Valor do saldo inicial recuperado da ECD para...
    #         "IND_VL_SLD_INI_ESP": 0,  # Indicador de situação do saldo inicial es...
    #         "VL_DEB_ESP": 0,  # Valor total de débitos recuperado da ECD para o p...
    #         "VL_CRED_ESP": 0,  # Valor total de créditos recuperado da ECD para o...
    #         "VL_SLD_FIN_ESP": 0,  # Valor do saldo final recuperado da ECD para o...
    #         "IND_VL_SLD_FIN_ESP": 0,  # Indicador de situação do saldo final espe...
    #         "SLD_INI_PRE": 0,  # Saldo inicial preenchido no registro K155.
    #         "IND_SLD_INI_PRE": 0,  # Indicador de situação do saldo inicial preen...
    #         "VL_DEB_PRE": 0,  # Valor total dos débitos preenchido no registro K1...
    #         "VL_CRED_PRE": 0,  # Valor total dos créditos preenchido no registro ...
    #         "SLD_FIN_PRE": 0,  # Saldo final preenchido no registro K155.
    #         "IND_SLD_FIN_PRE": 0,  # Indicador de situação do saldo final preench...
    #         "JUSTIFICATIVA": 0,  # Justificativa da divergência entre o(s) valor(...
    #     }


class RegistroK935(models.Model):
    "Justificativa para Divergência nas Contas de Resultado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.k935"
    _inherit = "l10n_br_sped.ecf.9.k935"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "PER_APUR": 0,  # Período de Apuração [para 0010.FORMA_APUR = “A” ou ...
    #         "COD_CTA": 0,  # Código da conta contábil.
    #         "COD_CCUS": 0,  # Código do centro de custos.
    #         "ID_REGRA": 0,  # R Identificação da regra que foi descumprida. O sis...
    #         "VL_SLD_FIN_ESP": 0,  # Valor do saldo final recuperado da ECD para o...
    #         "IND_VL_SLD_FIN_ESP": 0,  # Indicador de situação do saldo final espe...
    #         "SLD_FIN_PRE": 0,  # Saldo final preenchido no registro K355.
    #         "IND_SLD_FIN_PRE": 0,  # Indicador de situação do saldo final preench...
    #         "JUSTIFICATIVA": 0,  # Justificativa da divergência entre o(s) valor(...
    #     }


class RegistroL030(models.Model):
    "Identificação dos Períodos e Formas de Apuração do IRPJ e da CSLL no Ano-Calendário"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.l030"
    _inherit = "l10n_br_sped.ecf.9.l030"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "DT_INI": 0,  # Data do Início do Período
    #         "DT_FIN": 0,  # Data do Fim do período
    #         "PER_APUR": 0,  # Período de apuração [para 0010.FORMA_APUR = “A”]: A...
    #     }


class RegistroL100(models.Model):
    "Balanço Patrimonial"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.l100"
    _inherit = "l10n_br_sped.ecf.9.l100"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código da Conta Referencial (Analíticas e Sintéticas)...
    #         "DESCRICAO": 0,  # Descrição da Conta Referencial.
    #         "TIPO": 0,  # Indicador do Tipo de Conta: S – Sintética A – Analítica
    #         "NIVEL": 0,  # Nível da Conta.
    #         "COD_NAT": 0,  # Natureza da Conta, conforme tabela do Sped (Disponib...
    #         "COD_CTA_SUP": 0,  # Código da Conta Sintética de Nível Imediatamente...
    #         "VAL_CTA_REF_INI": 0,  # Saldo Inicial da Conta Referencial.
    #         "IND_VAL_CTA_REF_INI": 0,  # Indicador da Situação do Saldo Inicial: ...
    #         "VAL_CTA_REF_DEB": 0,  # Valor Total dos Débitos: Somatório dos valor...
    #         "VAL_CTA_REF_CRED": 0,  # Valor Total dos Créditos: Somatório dos val...
    #         "VAL_CTA_REF_FIN": 0,  # Saldo Final da Conta Referencial
    #         "IND_VAL_CTA_REF_FIN": 0,  # Indicador da Situação do Saldo Final: D ...
    #     }


class RegistroL200(models.Model):
    "Método de Avaliação do Estoque Final"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.l200"
    _inherit = "l10n_br_sped.ecf.9.l200"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "IND_AVAL_ESTOQ": 0,  # Método de Avaliação do Estoque Final: 1 – Cus...
    #     }


class RegistroL210(models.Model):
    "Informativo da Composição de Custos"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.l210"
    _inherit = "l10n_br_sped.ecf.9.l210"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código da Conta de Custos (Analítica), conforme tabel...
    #         "DESCRICAO": 0,  # Descrição da Conta de Custos.
    #         "VALOR": 0,  # Saldo Final da Conta de Custos Antes do Encerramento.
    #     }


class RegistroL300(models.Model):
    "Demonstração do Resultado Líquido no Período Fiscal"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.l300"
    _inherit = "l10n_br_sped.ecf.9.l300"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código da Conta Referencial (Analíticas e Sintéticas)...
    #         "DESCRICAO": 0,  # Descrição da Conta Referencial.
    #         "TIPO": 0,  # Indicador do Tipo de Conta: S – Sintética A – Analítica
    #         "NIVEL": 0,  # Nível da Conta.
    #         "COD_NAT": 0,  # Natureza da Conta: 04 – Contas de Resultado
    #         "COD_CTA_SUP": 0,  # Código da Conta Sintética de Nível Imediatamente...
    #         "VALOR": 0,  # Saldo Final da Conta Referencial.
    #         "IND_VALOR": 0,  # Indicador do Sinal do Saldo Final: C – Credor D – ...
    #     }


class RegistroM010(models.Model):
    "Identificação da Conta na Parte B e-Lalur e do e-Lacs"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.m010"
    _inherit = "l10n_br_sped.ecf.9.m010"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_CTA_B": 0,  # Código Unívoco Atribuído pela Pessoa Jurídica à Co...
    #         "DESC_CTA_LAL": 0,  # Descrição da Conta.
    #         "DT_AP_LAL": 0,  # Data Final: Data final do período de apuração em q...
    #         "COD_PB_RFB": 0,  # O Código da tabela padrão da Parte B. Vide planil...
    #         "DT_LIM_LAL": 0,  # Data Limite: Data limite para a exclusão, adição ...
    #         "COD_TRIBUTO": 0,  # Indicador do Tributo da Adição/Exclusão: I – Imp...
    #         "VL_SALDO_INI": 0,  # Saldo Inicial: Saldo no período inicial desta e...
    #         "IND_VL_SALDO_INI": 0,  # Indicador do Saldo Inicial: D – Para prejuí...
    #         "CNPJ_SIT_ESP": 0,  # E CNPJ da outra pessoa jurídica relacionada com...
    #     }


class RegistroM030(models.Model):
    "Identificação do Período e Forma de Apuração do IRPJ e da CSLL das Empresas Tributadas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.m030"
    _inherit = "l10n_br_sped.ecf.9.m030"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "DT_INI": 0,  # Data do Início do Período
    #         "DT_FIN": 0,  # Data do Fim do período
    #         "PER_APUR": 0,  # I S Período de apuração [para 0010.FORMA_APUR = “A”...
    #     }


class RegistroM300(models.Model):
    "Demonstração do Lucro Real"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.m300"
    _inherit = "l10n_br_sped.ecf.9.m300"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código do Lançamento no e-Lalur, conforme tabela dinâ...
    #         "DESCRICAO": 0,  # Descrição do Tipo de Lançamento no e-Lalur, confor...
    #         "TIPO_LANCAMENTO": 0,  # O Indicador do Tipo de Lançamento: A- Adição...
    #         "IND_RELACAO": 0,  # Indicador de Relacionamento do Lançamento da Par...
    #         "VALOR": 0,  # Valor do Lançamento no e-Lalur
    #         "HIST_LAN_LAL": 0,  # Histórico do Lançamento no e-Lalur
    #     }


class RegistroM305(models.Model):
    "Contas da Parte B Relacionadas ao Lançamento da Parte A do e-Lalur"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.m305"
    _inherit = "l10n_br_sped.ecf.9.m305"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_CTA_B": 0,  # Código da Conta na Parte B: Código unívoco atribuí...
    #         "VL_CTA": 0,  # O Valor Total dos Lançamentos: Valor total dos lançam...
    #         "IND_VL_CTA": 0,  # Indicador do Valor Total dos Lançamentos: D – Par...
    #     }


class RegistroM310(models.Model):
    "Contas Contábeis Relacionadas ao Lançamento da Parte A do e-Lalur"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.m310"
    _inherit = "l10n_br_sped.ecf.9.m310"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_CTA": 0,  # Código da Conta Contábil (Plano de Contas da Pessoa ...
    #         "COD_CCUS": 0,  # Código do Centro de Custos (deve existir no J100).
    #         "VL_CTA": 0,  # Valor da Conta Utilizado no Lançamento da Parte A.
    #         "IND_VL_CTA": 0,  # Indicador do Valor do Lançamento: D – Devedor. C ...
    #     }


class RegistroM312(models.Model):
    "Números dos Lançamentos Relacionados à Conta Contábil"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.m312"
    _inherit = "l10n_br_sped.ecf.9.m312"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "NUM_LCTO": 0,  # Número do Lançamento Descrito na ECD (Escrituração ...
    #     }


class RegistroM315(models.Model):
    "Identificação de Processos Judiciais e Administrativos Referentes ao Lançamento"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.m315"
    _inherit = "l10n_br_sped.ecf.9.m315"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "IND_PROC": 0,  # Tipo do Processo: 1 - Judicial 2 – Administrativo
    #         "NUM_PROC": 0,  # Número do Processo.
    #     }


class RegistroM350(models.Model):
    "Demonstração da Base de Cálculo da CSLL"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.m350"
    _inherit = "l10n_br_sped.ecf.9.m350"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código do Lançamento no e-Lalur, conforme tabela dinâ...
    #         "DESCRICAO": 0,  # Descrição do Tipo de Lançamento no e-Lalur, confor...
    #         "TIPO_LANCAMENTO": 0,  # O Indicador do Tipo de Lançamento: A- Adição...
    #         "IND_RELACAO": 0,  # Indicador de Relacionamento do Lançamento da Par...
    #         "VALOR": 0,  # Valor do Lançamento no e-Lalur
    #         "HIST_LAN_LAL": 0,  # Histórico do Lançamento no e-Lalur
    #     }


class RegistroM355(models.Model):
    "Contas da Parte B Relacionadas ao Lançamento da Parte A do e-Lacs"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.m355"
    _inherit = "l10n_br_sped.ecf.9.m355"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_CTA_B": 0,  # Código da Conta na Parte B: Código unívoco atribuí...
    #         "VL_CTA": 0,  # O Valor Total dos Lançamentos: Valor total dos lançam...
    #         "IND_VL_CTA": 0,  # Indicador do Valor Total dos Lançamentos: D – Par...
    #     }


class RegistroM360(models.Model):
    "Contas Contábeis Relacionadas ao Lançamento da Parte A do e-Lacs"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.m360"
    _inherit = "l10n_br_sped.ecf.9.m360"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_CTA": 0,  # Código da Conta Contábil (Plano de Contas da Pessoa ...
    #         "COD_CCUS": 0,  # Código do Centro de Custos (deve existir no J100).
    #         "VL_CTA": 0,  # Valor da Conta Utilizado no Lançamento da Parte A.
    #         "IND_VL_CTA": 0,  # Indicador do Valor do Lançamento: D – Devedor. C ...
    #     }


class RegistroM362(models.Model):
    "Números dos Lançamentos Relacionados à Conta Contábil"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.m362"
    _inherit = "l10n_br_sped.ecf.9.m362"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "NUM_LCTO": 0,  # Número do Lançamento Descrito na ECD (Escrituração ...
    #     }


class RegistroM365(models.Model):
    "Identificação de Processos Judiciais e Administrativos Referentes ao Lançamento"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.m365"
    _inherit = "l10n_br_sped.ecf.9.m365"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "IND_PROC": 0,  # Tipo do Processo: 1 - Judicial 2 – Administrativo
    #         "NUM_PROC": 0,  # Número do Processo.
    #     }


class RegistroM410(models.Model):
    "Lançamentos na Conta da Parte B do e-Lalur e do e- Lacs Sem Reflexo na Parte A"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.m410"
    _inherit = "l10n_br_sped.ecf.9.m410"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_CTA_B": 0,  # Código da Conta do Lançamento (conta da Parte B)
    #         "COD_TRIBUTO": 0,  # Código do Tributo: I – Imposto de Renda C – Cont...
    #         "VAL_LAN_LALB_PB": 0,  # Valor do Lançamento.
    #         "IND_VAL_LAN_LALB_PB": 0,  # Indicador do Lançamento: CR – Crédito DB...
    #         "COD_CTA_B_CTP": 0,  # Código Unívoco da Contrapartida (conta da Part...
    #         "HIST_LAN_LALB": 0,  # Histórico do Lançamento.
    #         "IND_LAN_ANT": 0,  # Lançamento para Realização de Valores Cuja Tribu...
    #     }


class RegistroM415(models.Model):
    "Identificação de Processos Judiciais e Administrativos Referentes ao Lançamento"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.m415"
    _inherit = "l10n_br_sped.ecf.9.m415"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "IND_PROC": 0,  # Tipo do Processo: 1 - Judicial 2 – Administrativo
    #         "NUM_PROC": 0,  # Número do Processo.
    #     }


class RegistroM500(models.Model):
    "Controle de Saldos das Contas da Parte B do e-Lalur e do e-Lacs"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.m500"
    _inherit = "l10n_br_sped.ecf.9.m500"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_CTA_B": 0,  # Código Unívoco Atribuído Pelo Contribuinte à Conta...
    #         "COD_TRIBUTO": 0,  # Código do Tributo: I – Imposto de Renda C – Cont...
    #         "SD_INI_LAL": 0,  # Saldo Inicial da Conta no Período de Apuração.
    #         "IND_SD_INI_LAL": 0,  # Indicador de Saldo Inicial: D – Para prejuízo...
    #         "VL_LCTO_PARTE_A": 0,  # Somatório dos Lançamentos da Parte B com Ref...
    #         "IND_VL_LCTO_PARTE_A": 0,  # Indicador do Somatório dos Lançamentos d...
    #         "VL_LCTO_PARTEB": 0,  # Somatório dos Lançamentos da Parte B Sem Refl...
    #         "IND_VL_LCTO_PARTEB": 0,  # Indicador Somatório dos Lançamentos da Pa...
    #         "SD_FIM_LAL": 0,  # Saldo Final da Conta no Período de Apuração.
    #         "IND_SD_FIM_LAL": 0,  # Indicador de Saldo Final: D – Para prejuízos ...
    #     }


class RegistroM510(models.Model):
    "Controle de Saldos das Contas Padrão da Parte B do e- Lalur e do e-Lacs"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.m510"
    _inherit = "l10n_br_sped.ecf.9.m510"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_PB_RFB": 0,  # Código da Conta Padrão da Parte B (deve existir n...
    #         "DESCRICAO_PB_RFB": 0,  # Descrição da Conta Padrão da Parte B
    #         "COD_TRIBUTO": 0,  # Código do Tributo: I – Imposto de Renda C – Cont...
    #         "SD_INI_LAL": 0,  # Saldo Inicial da Conta no Período de Apuração.
    #         "IND_SD_INI_LAL": 0,  # Indicador de Saldo Inicial: D – Para prejuízo...
    #         "VL_LCTO_PARTE_A": 0,  # Somatório dos Lançamentos da Parte B com Ref...
    #         "IND_VL_LCTO_PARTE_A": 0,  # Indicador do Somatório dos Lançamentos d...
    #         "VL_LCTO_PARTEB": 0,  # Somatório dos Lançamentos da Parte B Sem Refl...
    #         "IND_VL_LCTO_PARTEB": 0,  # Indicador Somatório dos Lançamentos da Pa...
    #         "SD_FIM_LAL": 0,  # Saldo Final da Conta no Período de Apuração.
    #         "IND_SD_FIM_LAL": 0,  # Indicador de Saldo Final: D – Para prejuízos ...
    #     }


class RegistroN030(models.Model):
    "Identificação do Período e Forma de Apuração do IRPJ e da CSLL das Empresas Tributadas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.n030"
    _inherit = "l10n_br_sped.ecf.9.n030"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "DT_INI": 0,  # Data do Início do Período
    #         "DT_FIN": 0,  # Data do Fim do período
    #         "PER_APUR": 0,  # I S Período de apuração [para 0010.FORMA_APUR = “A”...
    #     }


class RegistroN500(models.Model):
    "Base de Cálculo do IRPJ Sobre o Lucro Real Após as Compensações de Prejuízos"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.n500"
    _inherit = "l10n_br_sped.ecf.9.n500"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroN600(models.Model):
    "Demonstração do Lucro da Exploração"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.n600"
    _inherit = "l10n_br_sped.ecf.9.n600"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroN610(models.Model):
    "Cálculo da Isenção e Redução do Imposto sobre Lucro Real"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.n610"
    _inherit = "l10n_br_sped.ecf.9.n610"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroN615(models.Model):
    "Informações da Base de Cálculo de Incentivos Fiscais"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.n615"
    _inherit = "l10n_br_sped.ecf.9.n615"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "BASE_CALC": 0,  # B Base de Cálculo: Base de cálculo dos incentivos ...
    #         "PER_INCEN_FINOR": 0,  # Percentual do Incentivo FINOR (até 6%).
    #         "VL_LIQ_INCEN_FINOR": 0,  # Valor Líquido do Incentivo FINOR.
    #         "PER_INCEN_FINAM": 0,  # Percentual do Incentivo FINAM (até 6%).
    #         "VL_LIQ_INCEN_FINAM": 0,  # Valor Líquido do Incentivo FINAM.
    #         "VL_TOTAL": 0,  # Total dos Incentivos.
    #     }


class RegistroN620(models.Model):
    "Apuração do IRPJ Mensal por Estimativa"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.n620"
    _inherit = "l10n_br_sped.ecf.9.n620"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroN630(models.Model):
    "Apuração do IRPJ Com Base no Lucro Real"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.n630"
    _inherit = "l10n_br_sped.ecf.9.n630"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroN650(models.Model):
    "Base de Cálculo da CSLL Após Compensações das Bases de Cálculo Negativa"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.n650"
    _inherit = "l10n_br_sped.ecf.9.n650"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroN660(models.Model):
    "Apuração da CSLL Mensal por Estimativa"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.n660"
    _inherit = "l10n_br_sped.ecf.9.n660"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroN670(models.Model):
    "Apuração da CSLL Com Base no Lucro Real"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.n670"
    _inherit = "l10n_br_sped.ecf.9.n670"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroP030(models.Model):
    "Identificação dos Períodos e Forma de Apuração do IRPJ e da CSLL das Empresas Tributadas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.p030"
    _inherit = "l10n_br_sped.ecf.9.p030"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "DT_INI": 0,  # Data do Início do Período
    #         "DT_FIN": 0,  # Data do Fim do período
    #         "PER_APUR": 0,  # A00 – Anual (para registrar o Balanço Patrimonial a...
    #     }


class RegistroP100(models.Model):
    "Balanço Patrimonial"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.p100"
    _inherit = "l10n_br_sped.ecf.9.p100"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código da Conta Referencial (Analíticas e Sintéticas)...
    #         "DESCRICAO": 0,  # Descrição da Conta Referencial.
    #         "TIPO": 0,  # Indicador do Tipo de Conta: S – Sintética A – Analítica
    #         "NIVEL": 0,  # Nível da Conta.
    #         "COD_NAT": 0,  # Natureza da Conta, conforme tabela do Sped (Disponib...
    #         "COD_CTA_SUP": 0,  # Código da Conta Sintética de Nível Imediatamente...
    #         "VAL_CTA_REF_INI": 0,  # Saldo Inicial da Conta Referencial.
    #         "IND_VAL_CTA_REF_INI": 0,  # Indicador da Situação do Saldo Inicial: ...
    #         "VAL_CTA_REF_DEB": 0,  # Valor Total dos Débitos: Somatório dos valor...
    #         "VAL_CTA_REF_CRED": 0,  # Valor Total dos Créditos: Somatório dos val...
    #         "VAL_CTA_REF_FIN": 0,  # Saldo Final da Conta Referencial
    #         "IND_VAL_CTA_REF_FIN": 0,  # Indicador da Situação do Saldo Final: D ...
    #     }


class RegistroP130(models.Model):
    "Demonstração das Receitas Incentivadas do Lucro Presumido"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.p130"
    _inherit = "l10n_br_sped.ecf.9.p130"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroP150(models.Model):
    "Demonstração do Resultado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.p150"
    _inherit = "l10n_br_sped.ecf.9.p150"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código da Conta Referencial (Analíticas e Sintéticas)...
    #         "DESCRICAO": 0,  # Descrição da Conta Referencial.
    #         "TIPO": 0,  # Indicador do Tipo de Conta: S – Sintética A – Analítica
    #         "NIVEL": 0,  # Nível da Conta.
    #         "COD_NAT": 0,  # Natureza da Conta: 04 – Contas de Resultado
    #         "COD_CTA_SUP": 0,  # Código da Conta Sintética de Nível Imediatamente...
    #         "VALOR": 0,  # Saldo Final da Conta Referencial.
    #         "IND_VALOR": 0,  # Indicador do Sinal do Saldo Final: C – Credor D – ...
    #     }


class RegistroP200(models.Model):
    "Apuração da Base de Cálculo do Lucro Presumido"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.p200"
    _inherit = "l10n_br_sped.ecf.9.p200"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroP230(models.Model):
    "Cálculo da Isenção e Redução do Lucro Presumido"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.p230"
    _inherit = "l10n_br_sped.ecf.9.p230"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroP300(models.Model):
    "Cálculo do IRPJ com Base no Lucro Presumido"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.p300"
    _inherit = "l10n_br_sped.ecf.9.p300"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroP400(models.Model):
    "Apuração da Base de Cálculo da CSLL com Base no Lucro Presumido"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.p400"
    _inherit = "l10n_br_sped.ecf.9.p400"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroP500(models.Model):
    "Cálculo da CSLL com Base no Lucro Líquido"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.p500"
    _inherit = "l10n_br_sped.ecf.9.p500"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroQ100(models.Model):
    "Demonstrativo do Livro Caixa"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.q100"
    _inherit = "l10n_br_sped.ecf.9.q100"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "DATA": 0,  # Data da entrada ou da saída dos recursos.
    #         "NUM_DOC": 0,  # Número do documento.
    #         "HIST": 0,  # Histórico
    #         "VL_ENTRADA": 0,  # Valor de entrada dos recursos.
    #         "VL_SAIDA": 0,  # Valor de saída dos recursos.
    #         "SLD_FIN": 0,  # Saldo Final.
    #     }


class RegistroT030(models.Model):
    "Identificação dos Períodos e Forma de Apuração do IRPJ e CSLL das Empresas Tributadas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.t030"
    _inherit = "l10n_br_sped.ecf.9.t030"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "DT_INI": 0,  # Data do Início do Período
    #         "DT_FIN": 0,  # Data do Fim do período
    #         "PER_APUR": 0,  # S T01 – 1º Trimestre T02 – 2º Trimestre T03 – 3º Tr...
    #     }


class RegistroT120(models.Model):
    "Apuração da Base de Cálculo do IRPJ com Base no Lucro Arbitrado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.t120"
    _inherit = "l10n_br_sped.ecf.9.t120"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroT150(models.Model):
    "Cálculo do Imposto de Renda com Base no Lucro Arbitrado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.t150"
    _inherit = "l10n_br_sped.ecf.9.t150"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroT170(models.Model):
    "Apuração da Base de Cálculo da CSLL com Base no Lucro Arbitrado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.t170"
    _inherit = "l10n_br_sped.ecf.9.t170"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroT181(models.Model):
    "Cálculo da CSLL com Base no Lucro Arbitrado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.t181"
    _inherit = "l10n_br_sped.ecf.9.t181"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroU030(models.Model):
    "Identificação dos Períodos e Formas de Apuração do IPRJ e da CSLL das Empresas Imunes e Isentas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.u030"
    _inherit = "l10n_br_sped.ecf.9.u030"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "DT_INI": 0,  # Data do Início do Período
    #         "DT_FIN": 0,  # Data do Fim do período
    #         "PER_APUR": 0,  # Período de apuração (para 0010.APUR_CSLL = “A”): A0...
    #     }


class RegistroU100(models.Model):
    "Balanço Patrimonial"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.u100"
    _inherit = "l10n_br_sped.ecf.9.u100"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código da Conta Referencial (Analíticas e Sintéticas)...
    #         "DESCRICAO": 0,  # Descrição da Conta Referencial.
    #         "TIPO": 0,  # Indicador do Tipo de Conta: S – Sintética A – Analítica
    #         "NIVEL": 0,  # Nível da Conta.
    #         "COD_NAT": 0,  # Natureza da Conta, conforme tabela do Sped (Disponib...
    #         "COD_CTA_SUP": 0,  # Código da Conta Sintética de Nível Imediatamente...
    #         "VAL_CTA_REF_INI": 0,  # Saldo Inicial da Conta Referencial.
    #         "IND_VAL_CTA_REF_INI": 0,  # Indicador da Situação do Saldo Inicial: ...
    #         "VAL_CTA_REF_DEB": 0,  # Valor Total dos Débitos: Somatório dos valor...
    #         "VAL_CTA_REF_CRED": 0,  # Valor Total dos Créditos: Somatório dos val...
    #         "VAL_CTA_REF_FIN": 0,  # Saldo Final da Conta Referencial
    #         "IND_VAL_CTA_REF_FIN": 0,  # Indicador da Situação do Saldo Final: D ...
    #     }


class RegistroU150(models.Model):
    "Demonstração do Resultado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.u150"
    _inherit = "l10n_br_sped.ecf.9.u150"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código da Conta Referencial (Analíticas e Sintéticas)...
    #         "DESCRICAO": 0,  # Descrição da Conta Referencial.
    #         "TIPO": 0,  # Indicador do Tipo de Conta: S – Sintética A – Analítica
    #         "NIVEL": 0,  # Nível da Conta.
    #         "COD_NAT": 0,  # Natureza da Conta: 04 – Contas de Resultado
    #         "COD_CTA_SUP": 0,  # Código da Conta Sintética de Nível Imediatamente...
    #         "VALOR": 0,  # Saldo Final da Conta Referencial.
    #         "IND_VALOR": 0,  # Indicador do Sinal do Saldo Final: C – Credor D – ...
    #     }


class RegistroU180(models.Model):
    "Cálculo do IRPJ das Empresas Imunes ou Isentas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.u180"
    _inherit = "l10n_br_sped.ecf.9.u180"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroU182(models.Model):
    "Cálculo da CSLL das Empresas Imunes ou Isentas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.u182"
    _inherit = "l10n_br_sped.ecf.9.u182"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroV010(models.Model):
    "DEREX – Instituição"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.v010"
    _inherit = "l10n_br_sped.ecf.9.v010"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "NOME_INSTITUICAO": 0,  # Nome da Instituição
    #         "PAIS": 0,  # Código do País da Instituição
    #         "TIP_MOEDA": 0,  # Deve ser selecionada a moeda utilizada na Declaraç...
    #     }


class RegistroV020(models.Model):
    "DEREX"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.v020"
    _inherit = "l10n_br_sped.ecf.9.v020"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "NOME": 0,  # Nome do responsável
    #         "ENDERECO": 0,  # Endereço do responsável
    #         "TIPO_DO_C": 0,  # Tipo de documento do responsável
    #         "NI": 0,  # Número do documento do responsável
    #         "IDENT_CONTA": 0,  # Identificação das contas
    #     }


class RegistroV030(models.Model):
    "DEREX - Período – Mês"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.v030"
    _inherit = "l10n_br_sped.ecf.9.v030"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "MES": 0,  # Mês
    #     }


class RegistroV100(models.Model):
    "Demonstrativo dos recursos em moeda estrangeira decorrentes do recebimento de exportações"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.v100"
    _inherit = "l10n_br_sped.ecf.9.v100"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Identificação da linha, conforme tabela publicada pel...
    #         "DESCRICAO": 0,  # Descrição da linha, conforme tabela publicada pela...
    #         "VALOR": 0,  # Valor da Linha
    #     }


class RegistroW100(models.Model):
    "Informações Sobre o Grupo Multinacional e a Entidade Declarante"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.w100"
    _inherit = "l10n_br_sped.ecf.9.w100"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "NOME_MULTINACIONAL": 0,  # Nome do Grupo Multinacional: Deve ser ide...
    #         "IND_CONTROLADORA": 0,  # A Identifica se a Entidade é a Controladora...
    #         "NOME_CONTROLADORA": 0,  # Nome da Controladora Final. Observação: Ca...
    #         "JURISDICAO_CONTROLADORA": 0,  # Jurisdição de Residência para fins T...
    #         "TIN_CONTROLADORA": 0,  # Tax Identification Number (TIN): Número de ...
    #         "IND_ENTREGA": 0,  # E Identifica a Entidade Responsável pela Entrega...
    #         "IND_MODALIDADE": 0,  # S S S S Identifica a Modalidade de entrega da...
    #         "NOME_SUBSTITUTA": 0,  # Nome da Entidade Substituta/Entidade Local: ...
    #         "JURISDICAO_SUBSTITUTA": 0,  # Jurisdição de Residência para fins Tri...
    #         "TIN_SUBSTITUTA": 0,  # Tax Identification Number (TIN): Número de id...
    #         "DT_INI": 0,  # Data de Início do Período Societário. Observação: A D...
    #         "DT_FIN": 0,  # i Data Final do Período Societário. Observações: i) O...
    #         "TIP_MOEDA": 0,  # O Moeda: a entidade deve indicar qual a moeda util...
    #         "IND_IDIOMA": 0,  # Idioma Utilizado nas Informações Adicionais da De...
    #     }


class RegistroW200(models.Model):
    "Declaração País a País"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.w200"
    _inherit = "l10n_br_sped.ecf.9.w200"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "JURISDICAO": 0,  # Jurisdição de Residência para fins Tributários, c...
    #         "VL_REC_NAO_REL_EST": 0,  # Receitas Provenientes de Partes Não Relac...
    #         "VL_REC_NAO_REL": 0,  # Receitas Provenientes de Partes Não Relaciona...
    #         "VL_REC_REL_EST": 0,  # Receitas Provenientes de Partes Relacionadas ...
    #         "VL_REC_REL": 0,  # Receitas Provenientes de Partes Relacionadas: O c...
    #         "VL_REC_TOTAL_EST": 0,  # Receita Total em Moeda Estrangeira (identif...
    #         "VL_REC_TOTAL": 0,  # Receita Total: Soma das receitas provenientes d...
    #         "VL_LUC_PREJ_ANTES_IR_EST": 0,  # Lucro ou Prejuízo Antes do IR em Mo...
    #         "VL_LUC_PREJ_ANTES_IR": 0,  # Lucro ou Prejuízo Antes do IR: Deve ser...
    #         "VL_IR_PAGO_EST": 0,  # Imposto de Renda Pago, em moeda estrangeira (...
    #         "VL_IR_PAGO": 0,  # Imposto de Renda Pago: deve ser informado o monta...
    #         "VL_IR_DEVIDO_EST": 0,  # Imposto de Renda Devido, em moeda estrangei...
    #         "VL_IR_DEVIDO": 0,  # Imposto de Renda Devido: Deve ser informada a s...
    #         "VL_CAP_SOC_EST": 0,  # Capital Social em Moeda Estrangeira (identifi...
    #         "VL_CAP_SOC": 0,  # Capital Social: A entidade declarante deve report...
    #         "VL_LUC_ACUM_EST": 0,  # Lucros Acumulados em Moeda Estrangeira (iden...
    #         "VL_LUC_ACUM": 0,  # Lucros Acumulados: A entidade declarante deve re...
    #         "VL_ATIV_TANG_EST": 0,  # Ativos Tangíveis (exceto caixa e equivalent...
    #         "VL_ATIV_TANG": 0,  # Ativos Tangíveis (exceto caixa e equivalentes d...
    #         "NUM_EMP": 0,  # Número de Empregados: Deve ser informado o número to...
    #     }


class RegistroW250(models.Model):
    "Declaração País a País"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.w250"
    _inherit = "l10n_br_sped.ecf.9.w250"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "JUR_DIFERENTE": 0,  # Jurisdição Tributária de Organização ou Incorp...
    #         "NOME": 0,  # Nome/Razão Social da Entidade Integrante: Nome legal co...
    #         "TIN": 0,  # Tax Identification Number (TIN): Número de identificação...
    #         "JURISDICAO_TIN": 0,  # Jurisdição de Emissão do TIN, conforme tabela...
    #         "NI": 0,  # Número de Identificação (NI): O campo deve ser preenchido...
    #         "JURISDICAO_NI": 0,  # Jurisdição de Emissão do NI, conforme tabela d...
    #         "TIPO_NI": 0,  # Tipo do NI: Deve ser descrito, em texto livre, o tip...
    #         "TIP_END": 0,  # O Tipo do Endereço: A entidade declarante deve indic...
    #         "ENDERECO": 0,  # Deve ser fornecido, em texto livre, o endereço comp...
    #         "NUM_TEL": 0,  # Número de telefone completo da entidade integrante r...
    #         "EMAIL": 0,  # Endereço de e-mail para contato com a entidade integra...
    #         "ATIV_1": 0,  # Pesquisa e Desenvolvimento: S - Sim N - Não
    #         "ATIV_2": 0,  # Gestão de Propriedade Intelectual: S - Sim N - Não
    #         "ATIV_3": 0,  # Compras: S - Sim N - Não
    #         "ATIV_4": 0,  # Manufatura ou Produção: S - Sim N - Não
    #         "ATIV_5": 0,  # Vendas, Marketing ou Distribuição: S - Sim N - Não
    #         "ATIV_6": 0,  # Serviços Administrativos, de Gestão ou de Suporte: S ...
    #         "ATIV_7": 0,  # Prestação de Serviços a Partes Não Relacionadas: S - ...
    #         "ATIV_8": 0,  # Departamento Financeiro do Grupo: S - Sim N - Não
    #         "ATIV_9": 0,  # Serviços Financeiros Regulamentados: S - Sim N - Não
    #         "ATIV_10": 0,  # Seguro: S - Sim N - Não
    #         "ATIV_11": 0,  # Gestão de Ações e Outros Instrumentos de Capital: S ...
    #         "ATIV_12": 0,  # Inativa: S - Sim N - Não
    #         "ATIV_13": 0,  # Outros: S - Sim N - Não
    #         "DESC_OUTROS": 0,  # C Descrição da Atividade Econômica Desempenhada,...
    #         "OBSERVACAO": 0,  # C Outras Informações: Campo de utilização opciona...
    #     }


class RegistroW300(models.Model):
    "Observações Adicionais"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.w300"
    _inherit = "l10n_br_sped.ecf.9.w300"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "JURISDICAO": 0,  # Indicação da jurisdição tributária a que se refer...
    #         "IND_REC_NAO_REL": 0,  # O campo "Receitas Provenientes de Partes Não...
    #         "IND_REC_REL": 0,  # O campo "Receitas Provenientes de Partes Relacio...
    #         "IND_REC_TOTAL": 0,  # O campo "Receita Total" (W200.VL_REC_TOTAL) é ...
    #         "IND_LUC_PREJ_ANTES_IR": 0,  # O campo "Lucro ou Prejuízo antes do IR...
    #         "IND_IR_PAGO": 0,  # O campo "Imposto de Renda Pago" (W200.VL_IR_PAGO...
    #         "IND_IR_DEVIDO": 0,  # O campo "Imposto de Renda Devido" (W200.VL_IR_...
    #         "IND_CAP_SOC": 0,  # O campo "Capital Social" (W200.VL_CAP_SOC) é tra...
    #         "IND_LUC_ACUM": 0,  # O campo "Lucros Acumulados" (W200.VL_LUC_ACUM) ...
    #         "IND_ATIV_TANG": 0,  # O campo "Ativos Tangíveis" (W200.VL_ATIV_TANG)...
    #         "IND_NUM_EMP": 0,  # O campo "Número de Empregados" (W200.NUM_EMP) é ...
    #         "OBSERVACAO": 0,  # Observações.
    #         "FIM_OBSERVACAO": 0,  # Indicador de fim das observações. Texto fixo ...
    #     }


class RegistroX280(models.Model):
    "Atividades Incentivadas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x280"
    _inherit = "l10n_br_sped.ecf.9.x280"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "IND_ATIV": 0,  # Benefício fiscal: 00 – Não preenchido 01 – Isenção ...
    #         "IND_CONCEDENTE": 0,  # A Orgão Concessor da Isenção/Redução: M: Suda...
    #         "IND_PROJ": 0,  # Projeto: 00 – Não preenchido 01 – Novo Empreendimen...
    #         "ATO_CONC": 0,  # Ato Concessório - Natureza e Número: Informar neste...
    #         "VIG_INI": 0,  # Prazo de Vigência – Início Informar a data de início...
    #         "VIG_FIM": 0,  # Prazo de Vigência – Fim Informar a data de encerrame...
    #         "CNPJ_INCENTIVO": 0,  # CNPJ do Estabelecimento com Isenção/Redução/R...
    #         "NCM_INCENTIVO": 0,  # Código NCN do Produto Sujeito à Isenção/Reduçã...
    #         "REC_LIQ_INCENTIVO": 0,  # Valor da Receita Líquida Relativa à Isençã...
    #         "VL_INCENTIVO": 0,  # Valor da Isenção/Redução/Redução por Reinvestim...
    #     }


class RegistroX291(models.Model):
    "Operações com o Exterior"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x291"
    _inherit = "l10n_br_sped.ecf.9.x291"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroX292(models.Model):
    "Operações com o Exterior"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x292"
    _inherit = "l10n_br_sped.ecf.9.x292"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroX300(models.Model):
    "Operações com o Exterior"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x300"
    _inherit = "l10n_br_sped.ecf.9.x300"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "NUM_ORDEM": 0,  # Número de Ordem das Operações
    #         "TIP_EXP": 0,  # Tipo das Exportações: 01 - Bens 02 - Serviços 03 - D...
    #         "DESC_EXP": 0,  # Descrição das Exportações: Agrupar os bens, serviço...
    #         "TOT_OPER": 0,  # Total das Operações: EXPORTAÇÕES – Bens, Serviços o...
    #         "COD_NCM": 0,  # Código NCM constante do respectivo registro de expor...
    #         "QTDE": 0,  # Quantidade: Informar neste campo a quantidade total dos...
    #         "UNI_MED": 0,  # Unidade de Medida: Obrigatório somente quando TIP_EX...
    #         "IND_OPER": 0,  # Indicador de Operação Sujeita a Arbitramento S - Si...
    #         "TIP_MET": 0,  # A pessoa jurídica deve assinalar o método utilizado ...
    #         "OPER_PAR": 0,  # Operações Parâmetro: Informar que tipo de operações...
    #         "DESC_BENS_PAR": 0,  # Descrição dos bens, serviços ou direitos idênt...
    #         "ID_PARTE_PAR": 0,  # Identificação das partes envolvidas nas operaçõ...
    #         "TIP_PAR": 0,  # Tipo dos Itens para o Cálculo do Preço Parâmetro: In...
    #         "DAT_UTIL": 0,  # T A Data Utilizada no Cálculo do Preço Parâmetro: D...
    #         "CRIT_PAR": 0,  # Critérios para Determinação do Preço Parâmetro: Des...
    #         "DAT_TRANS": 0,  # Data da Transação: Informar a data em que o preço ...
    #         "DAT_EMB": 0,  # Data do Embarque: Informar a data do embarque da com...
    #         "ID_FONT_COT": 0,  # 1 Fonte da Cotação: Identificação da fonte da co...
    #         "AJ_PAR": 0,  # Ajustes ao Preço Parâmetro: Informar se foram realiza...
    #         "VL_PAR": 0,  # Preço Parâmetro: A pessoa jurídica deve informar nest...
    #         "VL_PRAT": 0,  # Preço Praticado: A pessoa jurídica deve informar nes...
    #         "QTDE_AJ": 0,  # O Quantidade Ajustada no Período de Apuração: Inform...
    #         "VL_AJ": 0,  # E E O E Valor do Ajuste a Ser Adicionado: Valor do aju...
    #         "VALOR_COT": 0,  # V alor da Cotação: Valor médio diário da cotação d...
    #         "NUM_DEC_EXP": 0,  # Número da Declaração Única de Exportação (DUE).
    #         "DAT_ENT_PREV": 0,  # Data da Entrega Prevista.
    #         "VL_JUR": 0,  # Juros: Informar em reais o valor total dos juros aufe...
    #         "VL_JUR_MIN": 0,  # Taxa de Juros Mínima: Informar neste campo a meno...
    #         "VL_JUR_MAX": 0,  # Taxa de Juros Máxima: Informar neste campo a maio...
    #         "COD_CNC": 0,  # Código CNC, conforme tabela do Sped (Disponibilizada...
    #         "TIP_MOEDA": 0,  # Moeda , conforme tabela do Sped (Disponibilizada n...
    #     }


class RegistroX305(models.Model):
    "Tipos de Ajustes do Preço Parâmetro da Exportação"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x305"
    _inherit = "l10n_br_sped.ecf.9.x305"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "TIP_AJUST": 0,  # Tipo de ajustes do preço parâmetro que foram reali...
    #         "DESC_OUT_AJ": 0,  # Descrição de Outros Ajustes (X305.TIP_AJUST = “9...
    #         "VALOR": 0,  # Valor do Ajuste em Reais.
    #         "FONT_AJU": 0,  # Descrever a fonte que serviu para embasar o ajuste ...
    #     }


class RegistroX310(models.Model):
    "Operações com o Exterior"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x310"
    _inherit = "l10n_br_sped.ecf.9.x310"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "NOME": 0,  # Nome: Nome ou razão social da pessoa física ou jurídica...
    #         "PAIS": 0,  # País: País onde a pessoa física ou jurídica contratante...
    #         "VL_OPER": 0,  # Valor da Operação: Valores das transações que compõe...
    #         "COND_PES": 0,  # Condição da Pessoa Envolvida na Operação: 01 - Cons...
    #     }


class RegistroX320(models.Model):
    "Operações com o Exterior"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x320"
    _inherit = "l10n_br_sped.ecf.9.x320"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "NUM_ORD": 0,  # Número de Ordem: Número de ordem para identificar a ...
    #         "TIP_IMP": 0,  # Tipo das Importações: 01- Bens 02- Serviços 03- Dire...
    #         "DESC_IMP": 0,  # Descrição: Agrupar os bens, serviços ou direitos de...
    #         "TOT_OPER": 0,  # A I O Total da Operação: IMPORTAÇÕES – Bens, Serviç...
    #         "COD_NCM": 0,  # Código NCM: Informar o código NCM constante do respe...
    #         "QTDE": 0,  # Quantidade: Informar neste campo a quantidade total dos...
    #         "UNI_MED": 0,  # O Unidade de Medida: brigatório somente quando TIP_I...
    #         "TIP_MET": 0,  # A Método: PIC00 – Preços Independentes Comparados PR...
    #         "COD_INV": 0,  # Código de Inventário do Insumo ou Produto Importado:...
    #         "UTIL_INS_PROD": 0,  # Utilização do Insumo ou Produto Importado: Des...
    #         "OPER_PAR": 0,  # Operações para a Apuração do Preço Parâmetro: Infor...
    #         "DESC_PAR": 0,  # Itens Selecionados para a Apuração do Preço Parâmet...
    #         "ID_PARTE_PAR": 0,  # Identificação das Partes Envolvidas: Identifica...
    #         "TIP_PAR": 0,  # Tipo dos Itens para o Cálculo do Preço Parâmetro: In...
    #         "DAT_UTIL": 0,  # T C A Data Utilizada no Cálculo do Preço Parâmetro:...
    #         "CRIT_PAR": 0,  # Critérios para Determinação do Preço Parâmetro: Des...
    #         "DAT_TRANS": 0,  # Data da Transação: Informar a data em que o preço ...
    #         "DAT_DUIMP": 0,  # Data do registro da Declaração Única de Importação...
    #         "ID_FONT_COT": 0,  # 1 Fonte da Cotação: Descrição da fonte utilizada...
    #         "AJ_PAR": 0,  # S Ajustes do Preço Parâmetro: Ajustes do preço parâme...
    #         "VL_PAR": 0,  # Preço Parâmetro: A pessoa jurídica deve informar nest...
    #         "VL_PRAT": 0,  # Preço Praticado: A pessoa jurídica deve informar nes...
    #         "QTDE_AJ": 0,  # Quantidade Ajustada no Período de Apuração: Informar...
    #         "VL_AJ": 0,  # Valor do Ajuste a Ser Adicionado: Valor do ajuste, det...
    #         "VALOR_COT": 0,  # Valor da Cotação: Valor médio diário da cotação do...
    #         "NUM_DEC_IMP": 0,  # Número da Declaração Única de Importação (DUIMP)...
    #         "DAT_ENT_PREV": 0,  # Data de Entrega Prevista.
    #         "VL_JUR": 0,  # Juros: Informar em reais o valor total dos juros pago...
    #         "VL_JUR_MIN": 0,  # Taxa de Juros Mínima: Informar neste campo a meno...
    #         "VL_JUR_MAX": 0,  # Taxa de Juros Máxima: Informar neste campo a maio...
    #         "COD_CNC": 0,  # C Código CNC, conforme tabela do Sped (Disponibiliza...
    #         "TIP_MOEDA": 0,  # Moeda: a pessoa jurídica deve selecionar, dentre a...
    #     }


class RegistroX325(models.Model):
    "Tipos de Ajustes do Preço Parâmetro da Importação"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x325"
    _inherit = "l10n_br_sped.ecf.9.x325"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "TIP_AJUST": 0,  # Tipo de ajustes do preço parâmetro que foram reali...
    #         "DESC_OUT_AJ": 0,  # Descrição de Outros Ajustes (X325.TIP_AJUST = “9...
    #         "VALOR": 0,  # Valor do Ajuste em Reais.
    #         "FONT_AJU": 0,  # Descrever a fonte que serviu para embasar o ajuste ...
    #     }


class RegistroX330(models.Model):
    "Operações com o Exterior"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x330"
    _inherit = "l10n_br_sped.ecf.9.x330"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "NOME": 0,  # Nome: Nome ou razão social da pessoa física ou jurídica...
    #         "PAIS": 0,  # País: País onde a pessoa física ou jurídica contratante...
    #         "VL_OPER": 0,  # Valor da Operação: Valores das transações que compõe...
    #         "COND_PES": 0,  # Condição da Pessoa Envolvida na Operação: 01 - Cons...
    #     }


class RegistroX340(models.Model):
    "Identificação da Participação no Exterior"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x340"
    _inherit = "l10n_br_sped.ecf.9.x340"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "RAZ_SOCIAL": 0,  # Razão Social: Razão social de cada controlada, di...
    #         "NIF": 0,  # NIF: Número de identificação fiscal de cada investida (“...
    #         "IND_CONTROLE": 0,  # Indicador de Controle 1 – Controlada Direta 2 –...
    #         "PAIS": 0,  # País: País de cada controlada, direta ou indireta, equi...
    #         "IND_ISEN_PETR": 0,  # Indicador de Prospecção e Exploração de Petról...
    #         "IND_CONSOL": 0,  # Indicador de Consolidação: Informar se a investid...
    #         "MOT_NAO_CONSOL": 0,  # Motivo da Não Consolidação: 1 – Opção; 2 – Do...
    #         "CNPJ": 0,  # CNPJ da Investida no Brasil: Hipótese do art. 41, parág...
    #         "TIP_MOEDA": 0,  # Moeda do País de Domicílio.
    #     }


class RegistroX350(models.Model):
    "Participações no Exterior"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x350"
    _inherit = "l10n_br_sped.ecf.9.x350"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "REC_LIQ": 0,  # Receita Líquida: Receita líquida de todas as ativida...
    #         "CUSTOS": 0,  # Custos dos Bens e Serviços Vendidos: Total dos custos...
    #         "LUC_BRUTO": 0,  # Lucro Bruto: Deve ser igual a (X350.REC_LIQ – X350...
    #         "REC_AUFERIDAS": 0,  # Receitas Financeiras Auferidas com a Vinculada...
    #         "REC_OUTRAS_OPER": 0,  # Outras Receitas Operacionais: Valor total da...
    #         "DESP_BRASIL": 0,  # Despesas Financeiras Pagas ou Creditadas à Vincu...
    #         "DESP_OPER": 0,  # Despesa Operacionais: Valor total das despesas ope...
    #         "LUC_OPER": 0,  # Lucro Operacional: Deve ser igual a (X350.LUC_BRUTO...
    #         "REC_PARTIC": 0,  # Receitas de Participação em Controladas, Coligada...
    #         "REC_OUTRAS": 0,  # Outras Receitas: Valor total das demais receitas,...
    #         "DESP_OUTRAS": 0,  # Outras Despesas: Valor total das demais despesas...
    #         "LUC_LIQ_ANT_IR": 0,  # Lucro Líquido Antes do Imposto de Renda. Deve...
    #         "LUC_ARB_ANT_IR": 0,  # Lucro Arbitrado Antes do Imposto de Renda.
    #         "IMP_DEV": 0,  # Imposto Devido: Valor do tributo incidente sobre o l...
    #         "LUC_LIQ": 0,  # Lucro líquido do Período de Apuração. Deve ser igual...
    #     }


class RegistroX351(models.Model):
    "Demonstrativo de Resultados e de Imposto a Pagar no Exterior"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x351"
    _inherit = "l10n_br_sped.ecf.9.x351"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "RES_INV_PER": 0,  # Resultado (positivo ou negativo) da Própria Inve...
    #         "RES_INV_PER_REAL": 0,  # Resultado (positivo ou negativo) da Própria...
    #         "RES_ISEN_PETR_PER": 0,  # Resultado da Investida em Operações que Go...
    #         "RES_ISEN_PETR_PER_REAL": 0,  # Resultado da Investida em Operações q...
    #         "RES_NEG_ACUM": 0,  # Resultado Negativo Acumulado de Anos Anteriores...
    #         "RES_POS_TRIB": 0,  # Resultado Positivo a Tributar: Resultado positi...
    #         "RES_POS_TRIB_REAL": 0,  # Resultado Positivo a Tributar em Reais (R$...
    #         "IMP_LUCR": 0,  # Imposto Efetivamente Pago: Imposto incidente sobre ...
    #         "IMP_LUCR_REAL": 0,  # Imposto Efetivamente Pago em Reais (R$): Impos...
    #         "IMP_PAG_REND": 0,  # Imposto Efetivamente Pago no Exterior Sobre Ren...
    #         "IMP_PAG_REND_REAL": 0,  # Imposto Efetivamente Pago no Exterior Sobr...
    #         "IMP_RET_EXT": 0,  # Imposto Retido na Fonte no Exterior: Imposto ret...
    #         "IMP_RET_EXT_REAL": 0,  # Imposto Retido na Fonte no Exterior em Reai...
    #         "IMP_RET_BR": 0,  # Imposto Retido na Fonte no Brasil: Imposto retido...
    #     }


class RegistroX352(models.Model):
    "Demonstrativo de Resultados no Exterior Auferidos por Intermédio de Coligadas em Regime de Caixa"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x352"
    _inherit = "l10n_br_sped.ecf.9.x352"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "RES_PER": 0,  # Resultado (positivo ou negativo) do Período na Moeda...
    #         "RES_PER_REAL": 0,  # Resultado (positivo ou negativo) do Período em ...
    #         "LUC_DISP": 0,  # Lucro Disponibilizado no Período na Moeda do País d...
    #         "LUC_DISP_REAL": 0,  # Lucro Disponibilizado no Período em Reais.
    #     }


class RegistroX353(models.Model):
    "Demonstrativo de Consolidação"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x353"
    _inherit = "l10n_br_sped.ecf.9.x353"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "RES_NEG_UTIL": 0,  # Resultado Negativo Utilizado na Consolidação na...
    #         "RES_NEG_UTIL_REAL": 0,  # Resultado Negativo Utilizado na Consolidaç...
    #         "SALDO_RES_NEG_NAO_UTIL": 0,  # Saldo do Resultado Negativo Não Utili...
    #         "SALDO_RES_NEG_NAO_UTIL_REAL": 0,  # Saldo do Resultado Negativo Não ...
    #         "RES_PROP": 0,  # Resultado (positivo ou negativo) Próprio da Control...
    #         "RES_PROP_REAL": 0,  # Resultado (positivo ou negativo) Próprio da Co...
    #     }


class RegistroX354(models.Model):
    "Demonstrativo de Prejuízos Acumulados"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x354"
    _inherit = "l10n_br_sped.ecf.9.x354"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "RES_NEG": 0,  # Resultado Negativo de Períodos Anteriores em Moeda d...
    #         "RES_NEG_REAL": 0,  # Resultado Negativo de Períodos Anteriores em em...
    #         "SALDO_RES_NEG": 0,  # Saldo do Resultado Negativo Acumulado em Moeda...
    #     }


class RegistroX355(models.Model):
    "Demonstrativo de Rendas Ativas e Passivas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x355"
    _inherit = "l10n_br_sped.ecf.9.x355"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "REND_PASS_PROP": 0,  # Renda Passiva Própria do Ano-Calendário em Mo...
    #         "REND_PASS_PROP_REAL": 0,  # Renda Passiva Própria do Ano-Calendário ...
    #         "REND_TOTAL": 0,  # Renda Total: Renda total conforme definição do in...
    #         "REND_TOTAL_REAL": 0,  # Renda Total em Reais: Renda total conforme d...
    #         "REND_ATIV_PROP": 0,  # Renda Ativa Própria em Moeda do País de Domic...
    #         "REND_ATIV_PROP_REAL": 0,  # Renda Ativa Própria em Reais (correspond...
    #         "PERCENTUAL": 0,  # Percentual: Valor do percentual obtido mediante a...
    #     }


class RegistroX356(models.Model):
    "Demonstrativo de Estrutura Societária"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x356"
    _inherit = "l10n_br_sped.ecf.9.x356"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "PERC_PART": 0,  # Percentual de Participação da Investidora Direta (...
    #         "ATIVO_TOTAL": 0,  # Ativo Total em Reais: Ativo total de cada contro...
    #         "PAT_LIQUIDO": 0,  # Patrimônio Líquido em Reais: Patrimônio líquido ...
    #     }


class RegistroX357(models.Model):
    "Investidoras Diretas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x357"
    _inherit = "l10n_br_sped.ecf.9.x357"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "PAIS": 0,  # País: País de cada investidora direta. Código do país, ...
    #         "NIF_CNPJ": 0,  # NIF: Número de identificação fiscal de cada investi...
    #         "RAZAO_SOCIAL": 0,  # Razão Social: Razão social da investidora diret...
    #         "PERCENTUAL": 0,  # Percentual: Valor do percentual de participação d...
    #     }


class RegistroX390(models.Model):
    "Origem e Aplicação de Recursos"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x390"
    _inherit = "l10n_br_sped.ecf.9.x390"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroX400(models.Model):
    "Comércio Eletrônico e Tecnologia da Informação – Informações das Vendas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x400"
    _inherit = "l10n_br_sped.ecf.9.x400"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroX410(models.Model):
    "Comércio Eletrônico – Informação de Homepage/Servidor"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x410"
    _inherit = "l10n_br_sped.ecf.9.x410"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "PAIS": 0,  # País: País em que disponibiliza homepage ou mantém serv...
    #         "IND_HOME_DISP": 0,  # Indicador de Homepage Disponível: S – Sim N – ...
    #         "IND_SERV_DISP": 0,  # Indicador de Disponibilidade de Servidor: S – ...
    #     }


class RegistroX420(models.Model):
    "Royalties Recebidos ou Pagos a Beneficiários do Brasil e do Exterior"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x420"
    _inherit = "l10n_br_sped.ecf.9.x420"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "TIP_ROY": 0,  # Indicar se são roylaties recebidos ou pagos a benfec...
    #         "PAIS": 0,  # País: País ou a dependência de país de residência ou de...
    #         "VL_EXPL_DIR_SW": 0,  # Valor da Exploração Econômica dos Direitos Pa...
    #         "VL_EXPL_DIR_AUT": 0,  # Valor da Exploração Econômica dos Direitos P...
    #         "VL_EXPL_MARCA": 0,  # Valor da Exploração Econômica dos Direitos Pat...
    #         "VL_EXPL_PAT": 0,  # Valor da Exploração Econômica dos Direitos Patri...
    #         "VL_EXPL_KNOW": 0,  # Valor da Exploração de Know-How: Valor relativo...
    #         "VL_EXPL_FRANQ": 0,  # Valor da Exploração de Franquias: Valor relati...
    #         "VL_EXPL_INT": 0,  # Valor da Exploração dos Direitos Relativos à Pro...
    #     }


class RegistroX430(models.Model):
    "Rendimentos Relativos a Serviços"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x430"
    _inherit = "l10n_br_sped.ecf.9.x430"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "PAIS": 0,  # País: País ou a dependência de país de residência ou de...
    #         "VL_SERV_ASSIST": 0,  # Valor dos Serviços de Assistência Técnica, Ci...
    #         "VL_SERV_SEM_ASSIST": 0,  # Valor dos Serviços Técnicos e de Assistên...
    #         "VL_SERV_SEM_ASSIST_EXT": 0,  # Valor dos Serviços Técnicos e de Assi...
    #         "VL_JURO": 0,  # Valor dos Juros sobre o Capital Próprio: Valor receb...
    #         "VL_DEMAIS_JUROS": 0,  # Valor dos Demais Juros: Valor recebido a tít...
    #         "VL_DIVID": 0,  # Valor dos Dividendos: Lucros ou dividendos recebido...
    #     }


class RegistroX450(models.Model):
    "Pagamentos ou Remessas Relativos a Serviços"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x450"
    _inherit = "l10n_br_sped.ecf.9.x450"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "PAIS": 0,  # País: País ou a dependência de país de residência ou do...
    #         "VL_SERV_ASSIST": 0,  # Valor dos Serviços de Assistência Técnica, Ci...
    #         "VL_SERV_SEM_ASSIST": 0,  # Valor dos Serviços Técnicos e de Assistên...
    #         "VL_SERV_SEM_ASSIST_EXT": 0,  # Valor dos Serviços Técnicos e de Assi...
    #         "VL_JURO_PF": 0,  # Valor dos Juros sobre o Capital Próprio Pagos a P...
    #         "VL_JURO_PJ": 0,  # Valor dos Juros sobre o Capital Próprio Pagos a P...
    #         "VL_DEMAIS_JUROS": 0,  # Valor dos Demais Juros: Valor pago ou remeti...
    #         "VL_DIVID_PF": 0,  # Dividendos Pagos a Pessoa Física: Valor dos lucr...
    #         "VL_DIVID_PJ": 0,  # Dividendos Pagos a Pessoa Jurídica: Valor dos lu...
    #     }


class RegistroX460(models.Model):
    "Inovação Tecnológica e Desenvolvimento Tecnológico"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x460"
    _inherit = "l10n_br_sped.ecf.9.x460"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroX470(models.Model):
    "Capacitação de Informática e Inclusão Digital"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x470"
    _inherit = "l10n_br_sped.ecf.9.x470"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroX480(models.Model):
    "Repes, Recap, Padis, PATVD, Reidi"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x480"
    _inherit = "l10n_br_sped.ecf.9.x480"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroX490(models.Model):
    "Polo Industrial de Manaus e Amazônia Ocidental"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x490"
    _inherit = "l10n_br_sped.ecf.9.x490"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroX500(models.Model):
    "Zonas de Processamento de Exportação"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x500"
    _inherit = "l10n_br_sped.ecf.9.x500"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroX510(models.Model):
    "Áreas de Livre Comércio (ALC)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.x510"
    _inherit = "l10n_br_sped.ecf.9.x510"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroY520(models.Model):
    "Pagamentos/Recebimentos do Exterior ou de Não Residentes"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.y520"
    _inherit = "l10n_br_sped.ecf.9.y520"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "TIP_EXT": 0,  # Tipo: R - Rendimentos Recebidos P – Pagamentos
    #         "PAIS": 0,  # País: País em que está situada a pessoa física ou juríd...
    #         "FORMA": 0,  # Forma de Recebimento/Pagamento: “1” – Operação de Câmb...
    #         "NAT_OPER": 0,  # Natureza da Operação: Código da natureza-fato espec...
    #         "VL_PERIODO": 0,  # Valor: Total dos valores recebidos ou pagos, prov...
    #     }


class RegistroY570(models.Model):
    "Demonstrativo do Imposto de Renda e CSLL Retidos na Fonte"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.y570"
    _inherit = "l10n_br_sped.ecf.9.y570"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CNPJ_FON": 0,  # CNPJ: CNPJ da fonte pagadora
    #         "NOM_EMP": 0,  # Nome Empresarial: Nome da pessoa jurídica responsáve...
    #         "IND_ORG_PUB": 0,  # Indicador de Órgão Público: S - Sim N – Não Sele...
    #         "COD_REC": 0,  # Código de Receita Utilizado Para Recolhimento na Fon...
    #         "VL_REND": 0,  # Rendimento Bruto: Valor bruto do rendimento que orig...
    #         "IR_RET": 0,  # IR Retido na Fonte: Valor de todo o imposto de renda ...
    #         "CSLL_RET": 0,  # CSLL Retida na Fonte: Valor de toda a contribuição ...
    #     }


class RegistroY590(models.Model):
    "Ativos no Exterior"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.y590"
    _inherit = "l10n_br_sped.ecf.9.y590"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "TIP_ATIVO": 0,  # Tipo do Ativo que Possui no Exterior, conforme tab...
    #         "PAIS": 0,  # Código do País: País onde se localiza o ativo no exteri...
    #         "DISCRIMINACAO": 0,  # Discriminação: Detalhar, neste campo, as infor...
    #         "VL_ANT": 0,  # Valor Anterior: Informar o valor contábil do ativo no...
    #         "VL_ATUAL": 0,  # Valor Atual: Valor contábil do ativo no final do pe...
    #     }


class RegistroY600(models.Model):
    "Identificação e Remuneração de Sócios"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.y600"
    _inherit = "l10n_br_sped.ecf.9.y600"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "DT_ALT_SOC": 0,  # Data da Alteração no Quadro Societário. Pode ser ...
    #         "DT_FIM_SOC": 0,  # Data da Saída do Quadro Societário. Deve ser pree...
    #         "PAIS": 0,  # País de Residência ou Domicílio da Pessoa Física ou Jur...
    #         "IND_QUALIF": 0,  # Indicador de Qualificação do Sócio, Titular, Diri...
    #         "CPF_CNPJ": 0,  # CPF ou CNPJ do Sócio, Titular, Dirigente ou Conselh...
    #         "NOM_EMP": 0,  # Nome/Nome empresarial do Sócio, Titular, Dirigente o...
    #         "QUALIF": 0,  # S S S O Qualificação do Sócio, Titular, Dirigente ou ...
    #         "PERC_CAP_TOT": 0,  # Percentual Relativo à Participação da Pessoa Fí...
    #         "PERC_CAP_VOT": 0,  # Percentual Relativo à Participação da Pessoa Fí...
    #         "CPF_REP_LEG": 0,  # CPF do Representante Legal: No caso de residente...
    #         "QUALIF_REP_LEG": 0,  # Qualificação do Representante Legal: Obrigató...
    #         "VL_REM_TRAB": 0,  # Remuneração do Trabalho: Valor, antes da dedução...
    #         "VL_LUC_DIV": 0,  # Lucros/Dividendos: Valor dos lucros e dividendos ...
    #         "VL_JUR_CAP": 0,  # Juros Sobre o Capital Próprio: Valor dos juros pa...
    #         "VL_DEM_REND": 0,  # Demais Rendimentos: Valor, antes da dedução do i...
    #         "VL_IR_RET": 0,  # IR Retido na Fonte: Valor do imposto de renda reti...
    #     }


class RegistroY612(models.Model):
    "Identificação e Rendimentos de Dirigentes e Conselheiros"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.y612"
    _inherit = "l10n_br_sped.ecf.9.y612"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CPF": 0,  # CPF: CPF do dirigente ou conselheiro beneficiário dos re...
    #         "NOME": 0,  # Nome: Nome do dirigente ou conselheiro beneficiário dos...
    #         "QUALIF": 0,  # Qualificação: Qualificação do dirigente ou conselheir...
    #         "VL_REM_TRAB": 0,  # Rendimentos do Trabalho: Valor dos rendimentos p...
    #         "VL_DEM_REND": 0,  # Demais Rendimentos: Valor de outros rendimentos ...
    #         "VL_IR_RET": 0,  # IR Retido na Fonte: Valor do imposto de renda reti...
    #     }


class RegistroY620(models.Model):
    "Participações Avaliadas pelo Método de Equivalência Patrimonial"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.y620"
    _inherit = "l10n_br_sped.ecf.9.y620"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "DT_EVENTO": 0,  # Data do Evento: Data do evento societário que deu ...
    #         "IND_RELAC": 0,  # Indicador do Tipo de Relacionamento: 1 - Controle ...
    #         "PAIS": 0,  # País: País onde a coligada ou controlada está domicilia...
    #         "CNPJ": 0,  # CNPJ: CNPJ da coligada ou controlada. Obrigatório se PA...
    #         "NOM_EMP": 0,  # Nome Empresarial: Nome empresarial da coligada ou co...
    #         "VALOR_REAIS": 0,  # Valor Total da Participação em Reais (Cotação da...
    #         "VALOR_ESTR": 0,  # Valor Total da Participação em Moeda Original do ...
    #         "PERC_CAP_TOT": 0,  # Percentual de Participação no Capital Total da ...
    #         "PERC_CAP_VOT": 0,  # Percentual de Participação no Capital Votante d...
    #         "RES_EQ_PAT": 0,  # Resultado de Equivalência Patrimonial
    #         "DATA_AQUIS": 0,  # Data da Primeira Aquisição da Participação Societ...
    #         "IND_PROC_CART": 0,  # Sumário em Cartório: Informar se houve sumário...
    #         "NUM_PROC_CART": 0,  # Número do Registro no Cartório: Informar o núm...
    #         "NOME_CART": 0,  # Nome do Cartório: Informar o nome e endereço do ca...
    #         "IND_PROC_RFB": 0,  # Laudo Protocolado na RFB: Informar se houve Lau...
    #         "NUM_PROC_RFB": 0,  # Número do Processo: Informar o número do proces...
    #     }


class RegistroY630(models.Model):
    "Fundos/Clubes de Investimento"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.y630"
    _inherit = "l10n_br_sped.ecf.9.y630"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CNPJ": 0,  # CNPJ: As administradoras de Fundos ou Clubes de Investi...
    #         "QTE_QUOT": 0,  # Quantidade de Quotistas no Final do Período: Quanti...
    #         "QTE_QUOTA": 0,  # Quantidade de Quotas no Final do Período: Quantida...
    #         "PATR_FIN_PER": 0,  # Patrimônio no Final do Período: Patrimônio do f...
    #         "DAT_ABERT": 0,  # Data de Abertura: Indicar a data de abertura do fu...
    #         "DAT_ENCER": 0,  # Data de Encerramento: Indicar a data de encerramen...
    #     }


class RegistroY640(models.Model):
    "Participações em Consórcios de Empresas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.y640"
    _inherit = "l10n_br_sped.ecf.9.y640"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CNPJ": 0,  # CNPJ: CNPJ do consórcio no qual a pessoa jurídica parti...
    #         "COND_DECL": 0,  # Condição do Declarante no Consórcio: 1 – Líder 2 –...
    #         "VL_CONS": 0,  # Receita do Consórcio: O líder indicará, neste campo,...
    #         "CNPJ_LID": 0,  # CNPJ da Empresa Líder do Consórcio.
    #         "VL_DECL": 0,  # Receita do Declarante no Consórcio: Receita auferida...
    #     }


class RegistroY650(models.Model):
    "Participantes do Consórcio"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.y650"
    _inherit = "l10n_br_sped.ecf.9.y650"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CNPJ": 0,  # CNPJ da Empresa Participante do Consórcio.
    #         "VL_PART": 0,  # Receita do Participante do Consórcio.
    #     }


class RegistroY660(models.Model):
    "Dados de Sucessoras"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.y660"
    _inherit = "l10n_br_sped.ecf.9.y660"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CNPJ": 0,  # CNPJ da Pessoa Jurídica Resultante do Evento.
    #         "NOM_EMP": 0,  # Nome Empresarial da Pessoa Jurídica Resultante do Ev...
    #         "PERC_PAT_LIQ": 0,  # Percentual do Patrimônio Líquido Destinado: Per...
    #     }


class RegistroY672(models.Model):
    "Outras Informações"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.y672"
    _inherit = "l10n_br_sped.ecf.9.y672"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "VL_CAPITAL_ANT": 0,  # Capital Registrado do Ano Anterior: Valor do ...
    #         "VL_CAPITAL": 0,  # Capital Registrado: Valor do capital registrado, ...
    #         "VL_ESTOQUE_ANT": 0,  # Estoques do Ano Anterior: Valor dos estoques ...
    #         "VL_ESTOQUES": 0,  # Estoques: Valor dos estoques no fim do “Ano da E...
    #         "VL_CAIXA_ANT": 0,  # Saldo de Caixa e Bancos do Ano Anterior: Valor ...
    #         "VL_CAIXA": 0,  # Saldo de Caixa e Bancos: Valor resultante da soma d...
    #         "VL_APLIC_FIN_ANT": 0,  # Saldo de Aplicações Financeiras do Ano Ante...
    #         "VL_APLIC_FIN": 0,  # Saldo de Aplicações Financeiras: Saldo das apli...
    #         "VL_CTA_REC_ANT": 0,  # Contas a Receber do Ano Anterior: Saldo das c...
    #         "VL_CTA_REC": 0,  # Contas a Receber: Saldo das contas a receber no f...
    #         "VL_CTA_PAG_ANT": 0,  # Contas a Pagar do Ano Anterior: Saldo das con...
    #         "VL_CTA_PAG": 0,  # Contas a Pagar: Saldo das contas a pagar no fim d...
    #         "VL_COMPRA_MERC": 0,  # Compras de Mercadorias no Ano-Calendário: Val...
    #         "VL_COMPRA_ATIVO": 0,  # Compras de Elementos do Ativo no Ano-Calendá...
    #         "VL_RECEITAS": 0,  # Receitas e Rendimentos Não Tributáveis ou Tribut...
    #         "TOT_ATIVO": 0,  # Total do Ativo: Valor total do Ativo no fim do “An...
    #         "IND_AVAL_ESTOQ": 0,  # Método de Avaliação de Estoques: 1 – Custo Mé...
    #     }


class RegistroY680(models.Model):
    "Mês das Informações de Optantes pelo Refis"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.y680"
    _inherit = "l10n_br_sped.ecf.9.y680"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "MES": 0,  # Mês: 01 – Janeiro 02 – Fevereiro 03 – Março 04 – Abril 0...
    #     }


class RegistroY681(models.Model):
    "Informações de Optantes pelo Refis"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.y681"
    _inherit = "l10n_br_sped.ecf.9.y681"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "CODIGO": 0,  # Código, conforme tabela dinâmica do Sped (Disponibili...
    #         "DESCRICAO": 0,  # Descrição, conforme tabela dinâmica do Sped (Dispo...
    #         "VALOR": 0,  # Valor
    #     }


class RegistroY682(models.Model):
    "Informações de Optantes pelo Refis"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.y682"
    _inherit = "l10n_br_sped.ecf.9.y682"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "MES": 0,  # Mês: 01 – Janeiro 02 – Fevereiro 03 – Março 04 – Abril 0...
    #         "ACRES_PATR": 0,  # Acréscimo Patrimonial no Mês.
    #     }


class RegistroY720(models.Model):
    "Informações de Períodos Anteriores"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.y720"
    _inherit = "l10n_br_sped.ecf.9.y720"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "LUC_LIQ": 0,  # O Lucro líquido antes da incidência do imposto sobre...
    #         "DT_LUC_LIQ": 0,  # Data do final do período de apuração do lucro líq...
    #         "REC_BRUT_ANT": 0,  # Receita bruta do período anterior.
    #         "INTIMACAO": 0,  # Houve termo de intimação pela RFB para a entrega d...
    #         "INT_ATRASO": 0,  # A transmissão desta ECF está dentro do prazo prev...
    #     }


class RegistroY800(models.Model):
    "Outras Informações"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecf.y800"
    _inherit = "l10n_br_sped.ecf.9.y800"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "TIPO_DOC": 0,  # Tipo do Documento: 001 - Memória de Cálculo - Incop...
    #         "DESCRICAO": 0,  # Descrição do Conteúdo do Documento.
    #         "HASH": 0,  # Hash do arquivo incluído na escrituração. Este campo nã...
    #         "ARQ_RTF": 0,  # Sequência de Bytes: Sequência de bytes que represent...
    #         "IND_FIM_RTF": 0,  # Indicador de Fim do Arquivo RTF. Texto fixo cont...
    #     }
