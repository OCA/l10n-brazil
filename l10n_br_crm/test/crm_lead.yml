-
  Create a Lead for a Company
-
  !record {model: crm.lead, id: crm_lead_company}:
    name: Test Company Lead
    legal_name: Teste Empresa
    cnpj: 56.647.352/0001-98
    stage_id: crm.stage_lead1
    partner_name: Test Partner
    inscr_est: 079.798.013.363
    inscr_mun: 99999999
-
  I mark the lead as lost
-
  !python {model: crm.lead, id: crm_lead_company}:
    self.action_set_lost()
-
  In order to test the conversion of a lead into a opportunity,
-
  I set lead to open stage.
-
   !python {model: crm.lead, id: crm_lead_company}:
     self.write({'stage_id':self.env.ref('crm.stage_lead1').id, 'active':True})
-
  I check if the lead stage is "Open".
-
  !assert {model: crm.lead, id: crm_lead_company, string: Lead stage is Open}:
     - stage_id.sequence == 1
-
  I convert lead into opportunity for existing customer.
-
  !python {model: crm.lead, id: crm_lead_company}:
    self.convert_opportunity(self.env.ref('base.res_partner_2').id)
-
  I check details of converted opportunity.
-
  !python {model: crm.lead, id: crm_lead_company}:
    assert self.type == 'opportunity', 'Lead is not converted to opportunity!'
    assert self.partner_id.id == self.env.ref('base.res_partner_2').id, 'Partner mismatch!'
    assert self.stage_id.id == self.env.ref('crm.stage_lead1').id, 'Stage of opportunity is incorrect!'
-
  I create a Partner and check the if the fields were filled
-
  !python {model: crm.lead, id: crm_lead_company}:
    partner_id = self._create_lead_partner()
    obj_partner = self.env['res.partner'].browse(partner_id)
    assert obj_partner.name, 'The field Name not was filled.'
    assert obj_partner.legal_name, 'The field Razão Social not was filled.'
    assert obj_partner.cnpj_cpf, 'The field CNPJ not was filled.'
    assert obj_partner.inscr_est, 'The field Inscrição Estadual not was filled'
    assert obj_partner.inscr_mun, 'The field Inscrição Municipal not was filled'
-
  I mark the lead as won
-
  !python {model: crm.lead, id: crm_lead_company}:
    self.action_set_won()
-
  Create a Lead for a Person/Contact
-
  !record {model: crm.lead, id: crm_lead_contact}:
    name: Test Contact
    cpf: 70531160505
    rg: 99.888.777-1
    stage_id: crm.stage_lead1
    contact_name: Test Contact
-
  I mark the lead as lost
-
  !python {model: crm.lead, id: crm_lead_contact}:
    self.action_set_lost()
-
  In order to test the conversion of a lead into a opportunity,
-
  I set lead to open stage.
-
   !python {model: crm.lead, id: crm_lead_contact}:
     self.write({'stage_id':self.env.ref('crm.stage_lead1').id, 'active':True})
-
  I check if the lead stage is "Open".
-
  !assert {model: crm.lead, id: crm_lead_contact, string: Lead stage is Open}:
     - stage_id.sequence == 1
-
  I convert lead into opportunity for exiting customer.
-
  !python {model: crm.lead, id: crm_lead_contact}:
    self.convert_opportunity(self.env.ref('base.res_partner_2').id)
-
  I check details of converted opportunity.
-
  !python {model: crm.lead, id: crm_lead_contact}:
    assert self.type == 'opportunity', 'Lead is not converted to opportunity!'
    assert self.partner_id.id == self.env.ref('base.res_partner_2').id, 'Partner mismatch!'
    assert self.stage_id.id == self.env.ref('crm.stage_lead1').id, 'Stage of opportunity is incorrect!'
-
  I create a Contact and check the if the fields were filled
-
  !python {model: crm.lead, id: crm_lead_contact}:
    partner_id = self._create_lead_partner()
    obj_partner = self.env['res.partner'].browse(partner_id)
    assert obj_partner.name, 'The field Name not was filled.'
    assert obj_partner.cnpj_cpf, 'The field CNPJ not was filled.'
    assert obj_partner.inscr_est, 'The field RG not was filled'
-
  I mark the lead as won
-
  !python {model: crm.lead, id: crm_lead_contact}:
    self.action_set_won()
-
  Create a Lead for a Company to test IE Validation
-
  !record {model: crm.lead, id: crm_lead_company_1}:
    name: Test Company Lead IE
    legal_name: Teste Empresa 1
    cnpj: 57.240.310/0001-09
    stage_id: crm.stage_lead1
    partner_name: Test Partner 1
    inscr_est: 041.092.540.590
    inscr_mun: 99999999
    country_id: base.br
    state_id: base.state_br_sp
-
  I create a Partner and check if the fields were filled
-
  !python {model: crm.lead, id: crm_lead_company_1}:
    partner_id = self._create_lead_partner()
    obj_partner = self.env['res.partner'].browse(partner_id)
    assert obj_partner.name, 'The creation of the partner have problems.'
    assert obj_partner.legal_name, 'The field Razão Social not was filled.'
    assert obj_partner.cnpj_cpf, 'The field CNPJ not was filled.'
    assert obj_partner.inscr_est, 'The field Inscrição Estadual not was filled'
    assert obj_partner.inscr_mun, 'The field Inscrição Municipal not was filled'
    assert obj_partner.country_id, 'The field Country not was filled'
    assert obj_partner.state_id, 'The field State not was filled'
