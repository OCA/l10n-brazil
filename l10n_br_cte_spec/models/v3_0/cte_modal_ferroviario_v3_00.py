# Copyright 2022 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models

from .tipos_geral_cte_v3_00 import TUF

__NAMESPACE__ = "http://www.portalfiscal.inf.br/cte"

"Tipo de Tráfego"
FERROV_TPTRAF = [
    ("0", "Próprio"),
    ("1", "Mútuo"),
    ("2", "Rodoferroviário"),
    ("3", "Rodoviário."),
]

"Ferrovia Emitente do CTe"
TRAFMUT_FERREMI = [
    ("1", "Ferrovia de origem"),
    ("2", "Ferrovia de destino"),
]

"Responsável pelo Faturamento"
TRAFMUT_RESPFAT = [
    ("1", "Ferrovia de origem"),
    ("2", "Ferrovia de destino"),
]


class TenderFer(models.AbstractModel):
    "Tipo Dados do Endereço"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "cte.30.tenderfer"
    _inherit = "spec.mixin.cte"
    _binding_type = "TenderFer"

    cte30_xLgr = fields.Char(string="Logradouro", xsd_required=True)

    cte30_nro = fields.Char(string="Número")

    cte30_xCpl = fields.Char(string="Complemento")

    cte30_xBairro = fields.Char(string="Bairro")

    cte30_cMun = fields.Char(
        string="Código do município",
        xsd_required=True,
        xsd_type="TCodMunIBGE",
        help=(
            "Código do município\nUtilizar a tabela do "
            "IBGE\n\t\t\t\t\tInformar 9999999 para operações com o exterior."
        ),
    )

    cte30_xMun = fields.Char(
        string="Nome do município",
        xsd_required=True,
        help=("Nome do município\nInformar EXTERIOR para operações com o " "exterior."),
    )

    cte30_CEP = fields.Char(string="CEP", xsd_required=True)

    cte30_UF = fields.Selection(
        TUF,
        string="Sigla da UF",
        xsd_required=True,
        xsd_type="TUf",
        help="Sigla da UF\nInformar EX para operações com o exterior.",
    )


class Ferrov(models.AbstractModel):
    "Informações do modal Ferroviário"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "cte.30.ferrov"
    _inherit = "spec.mixin.cte"
    _binding_type = "Ferrov"

    cte30_tpTraf = fields.Selection(
        FERROV_TPTRAF,
        string="Tipo de Tráfego",
        xsd_required=True,
        help=(
            "Tipo de Tráfego\nPreencher com:\n\t\t\t\t\t\t0-"
            "Próprio;\n\t\t\t\t\t\t1-Mútuo;\n\t\t\t\t\t\t2-"
            "Rodoferroviário;\n\t\t\t\t\t\t3-Rodoviário."
        ),
    )

    cte30_trafMut = fields.Many2one(
        comodel_name="cte.30.trafmut",
        string="Detalhamento de informações",
        help="Detalhamento de informações para o tráfego mútuo",
    )

    cte30_fluxo = fields.Char(
        string="Fluxo Ferroviário",
        xsd_required=True,
        help=(
            "Fluxo Ferroviário\nTrata-se de um número identificador do "
            "contrato firmado com o cliente"
        ),
    )


class TrafMut(models.AbstractModel):
    "Detalhamento de informações para o tráfego mútuo"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "cte.30.trafmut"
    _inherit = "spec.mixin.cte"
    _binding_type = "Ferrov.TrafMut"

    cte30_respFat = fields.Selection(
        TRAFMUT_RESPFAT,
        string="Responsável pelo Faturamento",
        xsd_required=True,
        help=(
            "Responsável pelo Faturamento\nPreencher com: "
            "\n\t\t\t\t\t\t\t\t\t1-Ferrovia de origem; "
            "\n\t\t\t\t\t\t\t\t\t2-Ferrovia de destino"
        ),
    )

    cte30_ferrEmi = fields.Selection(
        TRAFMUT_FERREMI,
        string="Ferrovia Emitente do CTe",
        xsd_required=True,
        help=(
            "Ferrovia Emitente do CTe\nPreencher com: "
            "\n\t\t\t\t\t\t\t\t\t1-Ferrovia de origem; "
            "\n\t\t\t\t\t\t\t\t\t2-Ferrovia de destino"
        ),
    )

    cte30_vFrete = fields.Monetary(
        string="Valor do Frete do Tráfego Mútuo",
        xsd_required=True,
        xsd_type="TDec_1302",
        currency_field="brl_currency_id",
    )

    cte30_chCTeFerroOrigem = fields.Char(
        string="Chave de acesso do CT-e emitido",
        xsd_type="TChNFe",
        help="Chave de acesso do CT-e emitido pelo ferrovia de origem",
    )

    cte30_ferroEnv = fields.One2many(
        "cte.30.ferroenv",
        "cte30_ferroEnv_trafMut_id",
        string="Informações das Ferrovias Envolvidas",
    )


class FerroEnv(models.AbstractModel):
    "Informações das Ferrovias Envolvidas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "cte.30.ferroenv"
    _inherit = "spec.mixin.cte"
    _binding_type = "Ferrov.TrafMut.FerroEnv"

    cte30_ferroEnv_trafMut_id = fields.Many2one(
        comodel_name="cte.30.trafmut", xsd_implicit=True, ondelete="cascade"
    )
    cte30_CNPJ = fields.Char(
        string="Número do CNPJ",
        xsd_required=True,
        xsd_type="TCnpj",
        help=(
            "Número do CNPJ\nInformar o CNPJ da Ferrovia Envolvida. Caso a "
            "Ferrovia envolvida não seja inscrita no CNPJ o campo deverá "
            "preenchido com zeros.\nInformar os zeros não significativos."
        ),
    )

    cte30_cInt = fields.Char(
        string="Código interno da Ferrovia envolvida",
        help="Código interno da Ferrovia envolvida\nUso da transportadora",
    )

    cte30_IE = fields.Char(string="Inscrição Estadual", xsd_type="TIe")

    cte30_xNome = fields.Char(string="Razão Social ou Nome", xsd_required=True)

    cte30_enderFerro = fields.Many2one(
        comodel_name="cte.30.tenderfer",
        string="Dados do endereço da ferrovia envolvida",
        xsd_required=True,
        xsd_type="TEnderFer",
    )
