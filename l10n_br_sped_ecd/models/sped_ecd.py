# Copyright 2023 - TODAY, Akretion - Raphael Valyi <raphael.valyi@akretion.com>
# License AGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/sped-extractor and xsdata-odoo
# flake8: noqa: B950

import textwrap

from erpbrasil.base import misc
from lxml.builder import E

from odoo import api, fields, models

from odoo.addons.l10n_br_sped_base.models.sped_mixin import (
    EDITABLE_ON_DRAFT,
    LAYOUT_VERSIONS,
)


class Registro0000(models.Model):
    "ABERTURA DO ARQUIVO DIGITAL E IDENTIFICAÇÃO DO EMPRESÁRIO OU DA SOCIEDADE EMPRESÁRIA"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.0000"
    _inherit = ["l10n_br_sped.ecd.9.0000"]
    _odoo_model = "res.company"

    IND_SIT_ESP = fields.Selection(
        selection=[
            ("0", "0 - Abertura"),
            ("1", "1 - Cisão"),
            ("2", "2 - Fusão"),
            ("3", "3 - Incorporação"),
            ("4", "4 - Extinção"),
            ("5", "5 - Transformação"),
            ("6", "6 - Transferência de Sede"),
        ],
        string="Indicador de situação especial",
    )

    IND_SIT_INI_PER = fields.Selection(
        default="0",
        selection=[
            ("0", "0 - Normal"),
            ("1", "1 - Abertura"),
            ("2", "2 - Cisão/Fusão"),
            ("3", "3 - Obrigatoriedade no curso do ano"),
        ],
        string="Indicador de situação do inicio do período",
    )

    IND_FIN_ESC = fields.Selection(
        default="0",
        selection=[
            ("0", "0 - Original"),
            ("1", "1 - Substituta da escrituração com NIRE"),
            ("2", "2 - Substituta da escrituração sem NIRE"),
            ("3", "3 - Substituta da escrituração com troca de NIRE"),
        ],
        string="Indicador de finalidade da escrituração",
    )

    # not a register 0000 field, but used for i010 register
    ind_esc = fields.Selection(
        selection=[
            ("G", "G - Diário completo"),
            ("R", "R - Escrituração Resumida"),
            ("A", "A - Auxiliar"),
            ("B", "B - Diários e Balanços"),
            ("Z", "Z - Razão Auxiliar"),
        ],
        default="G",
        string="Forma de escritura contábil",
    )

    @api.model
    def _append_top_view_elements(self, group, inline=False):
        super()._append_top_view_elements(group)
        group.append(E.field(name="ind_esc", required="1", attrs=EDITABLE_ON_DRAFT))

    @api.model
    def _odoo_domain(self, parent_record, declaration):
        return [("id", "=", declaration.company_id.id)]

    @api.model
    def _map_from_odoo(self, record, parent_record, declaration, index=0):
        return {
            "LECD": "LECD",
            # "DT_INI": (will use the declaration field directly),
            # "DT_FIN": (will use the declaration field directly),
            "NOME": record.legal_name,
            "CNPJ": misc.punctuation_rm(record.cnpj_cpf),
            "UF": record.state_id.code,
            "IE": misc.punctuation_rm(record.inscr_est),
            "COD_MUN": record.city_id.ibge_code,
            "IM": misc.punctuation_rm(record.inscr_mun or ""),
            # "IND_SIT_ESP": (will use the declaration field directly),
            # "IND_SIT_INI_PER": (will use the declaration field directly),
            "IND_NIRE": 0,  # TODO
            # "IND_FIN_ESC"
            "COD_HASH_SUB": 0,  # TODO
            "IND_GRANDE_PORTE": 0,  # TODO
            "TIP_ECD": 0,  # TODO
            "COD_SCP": 0,  # TODO
            "IDENT_MF": 0,  # TODO
            "IND_ESC_CONS": 0,  # TODO
            "IND_CENTRALIZADA": 0,  # TODO
            "IND_MUDANC_PC": 0,  # TODO
            "COD_PLAN_REF": 0,  # TODO
        }


class Registro0007(models.Model):
    "OUTRAS INSCRIÇÕES CADASTRAIS DA PESSOA JURÍDICA"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.0007"
    _inherit = "l10n_br_sped.ecd.9.0007"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_ENT_REF": 0,  # Código da instituição responsável pela administr...
    #         "COD_INSCR": 0,  # Código cadastral da pessoa jurídica na instituição...
    #     }


class Registro0020(models.Model):
    "ESCRITURAÇÃO CONTÁBIL DESCENTRALIZADA"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.0020"
    _inherit = "l10n_br_sped.ecd.9.0020"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "IND_DEC": 0,  # Indicador de descentralização: 0 – Escrituração da m...
    #         "CNPJ": 0,  # Número de inscrição da pessoa jurídica no CNPJ da matri...
    #         "UF": 0,  # Sigla da unidade da federação da matriz ou da filial.
    #         "IE": 0,  # Inscrição estadual da matriz ou da filial.
    #         "COD_MUN": 0,  # Código do município do domicílio da matriz ou da fil...
    #         "IM": 0,  # Número de Inscrição Municipal da matriz ou da filial.
    #         "NIRE": 0,  # Número de Identificação do Registro de Empresas da matr...
    #     }


class Registro0035(models.Model):
    "IDENTIFICAÇÃO DAS SCP"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.0035"
    _inherit = "l10n_br_sped.ecd.9.0035"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_SCP": 0,  # CNPJ da SCP (Art. 4º, XVII, da Instrução Normativa R...
    #         "NOME_SCP": 0,  # Nome da SCP
    #     }


class Registro0150(models.Model):
    "TABELA DE CADASTRO DO PARTICIPANTE"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.0150"
    _inherit = "l10n_br_sped.ecd.9.0150"

    @api.model
    def _odoo_query(self, parent_record, declaration):
        return """
                   select distinct
                        mv.partner_id
                    from
                        account_move as mv
                    where
                        partner_id is not NULL
                        and mv.state = 'posted'
                        and mv.date > %s
                        and mv.date < %s
                        and mv.company_id = %s
        """, (
            declaration.DT_INI,
            declaration.DT_FIN,
            declaration.company_id.id,
        )

    @api.model
    def _map_from_odoo(self, record, parent_record, declaration, index=0):
        record = self.env["res.partner"].browse(record["partner_id"])
        return {
            "res_model": "res.partner",
            "res_id": record.id,
            "COD_PART": record.id,
            "NOME": record.name,  # Nome pessoal ou empresarial do participante.
            "COD_PAIS": record.country_id.ibge_code or "BR",
            "CNPJ": record.is_company and misc.punctuation_rm(record.cnpj_cpf) or "",
            "CPF": not record.is_company and misc.punctuation_rm(record.cnpj_cpf) or "",
            "NIT": 0,  # Número de Identificação do Trabalhador, Pis, Pasep, SUS.
            "UF": record.state_id.code,
            "IE": misc.punctuation_rm(record.inscr_est),
            "IE_ST": 0,  # Inscrição Estadual do participante na unidade da feder...
            "COD_MUN": misc.punctuation_rm(record.city_id.ibge_code),
            "IM": misc.punctuation_rm(record.inscr_mun or ""),
            "SUFRAMA": record.suframa or "",  # Inscrição da entidade na SUFRAMA
        }


class Registro0180(models.Model):
    "IDENTIFICAÇÃO DO RELACIONAMENTO COM O PARTICIPANTE"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.0180"
    _inherit = "l10n_br_sped.ecd.9.0180"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_REL": 0,  # Código do relacionamento conforme tabela publicada p...
    #         "DT_INI_REL": 0,  # Data do início do relacionamento.
    #         "DT_FIN_REL": 0,  # Data do término do relacionamento.
    #     }


class RegistroI010(models.Model):
    "IDENTIFICAÇÃO DA ESCRITURAÇÃO CONTÁBIL"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.i010"
    _inherit = "l10n_br_sped.ecd.9.i010"

    IND_ESC = fields.Selection(related="declaration_id.ind_esc", readonly=False)

    @api.model
    def _map_from_odoo(self, record, parent_record, declaration, index=0):
        return {
            "COD_VER_LC": LAYOUT_VERSIONS["ecd"],
        }


class RegistroI012(models.Model):
    "LIVROS AUXILIARES AO DIÁRIO"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.i012"
    _inherit = "l10n_br_sped.ecd.9.i012"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "NUM_ORD": 0,  # Número de ordem do instrumento associado.
    #         "NAT_LIVR": 0,  # Natureza do livro associado; finalidade a que se de...
    #         "TIPO": 0,  # Tipo de escrituração do livro associado: 0 – digital (i...
    #         "COD_HASH_AUX": 0,  # Código Hash do arquivo correspondente ao livro ...
    #     }


class RegistroI015(models.Model):
    "IDENTIFICAÇÃO DAS CONTAS DA ESCRITURAÇÃO RESUMIDA A QUE SE REFERE A ESCRITURAÇÃO AUXILIAR"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.i015"
    _inherit = "l10n_br_sped.ecd.9.i015"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_CTA_RES": 0,  # Código da(s) conta(s) analítica(s) do Livro Diár...
    #     }


class RegistroI020(models.Model):
    "CAMPOS ADICIONAIS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.i020"
    _inherit = "l10n_br_sped.ecd.9.i020"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "REG_COD": 0,  # Código do registro que recepciona o campo adicional.
    #         "NUM_AD": 0,  # Número sequencial do campo adicional.
    #         "CAMPO": 0,  # Nome do campo adicional.
    #         "DESCRICAO": 0,  # Descrição do campo adicional.
    #         "TIPO": 0,  # C Indicação do tipo de dado (N: numérico; C: caractere)...
    #         "IND_DC_INI_MF": 0,  # Indicador da situação do saldo inicial em moed...
    #     }


class RegistroI030(models.Model):
    "TERMO DE ABERTURA"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.i030"
    _inherit = "l10n_br_sped.ecd.9.i030"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "DNRC_ABERT": 0,  # Texto fixo contendo “TERMO DE ABERTURA”.
    #         "NUM_ORD": 0,  # Número de ordem do instrumento de escrituração.
    #         "NAT_LIVR": 0,  # Natureza do livro; finalidade a que se destina o in...
    #         "QTD_LIN": 0,  # Quantidade total de linhas do arquivo digital.
    #         "NOME": 0,  # Nome empresarial.
    #         "NIRE": 0,  # Número de Identificação do Registro de Empresas da Junt...
    #         "CNPJ": 0,  # Número de inscrição no CNPJ.
    #         "DT_ARQ": 0,  # Data do arquivamento dos atos constitutivos.
    #         "DT_ARQ_CONV": 0,  # Data de arquivamento do ato de conversão de soci...
    #         "DESC_MUN": 0,  # Município.
    #         "DT_EX_SOCIAL": 0,  # Data de encerramento do exercício social.
    #     }


class RegistroI050(models.Model):
    "PLANO DE CONTAS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.i050"
    _inherit = "l10n_br_sped.ecd.9.i050"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "DT_ALT": 0,  # Data da inclusão/alteração.
    #         "COD_NAT": 0,  # Código da natureza da conta/grupo de contas, conform...
    #         "IND_CTA": 0,  # Indicador do tipo de conta: S - Sintética (grupo de ...
    #         "NIVEL": 0,  # Nível da conta analítica/grupo de contas.
    #         "COD_CTA": 0,  # Código da conta analítica/grupo de contas.
    #         "COD_CTA_SUP": 0,  # Código da conta sintética /grupo de contas de ní...
    #         "CTA": 0,  # Nome da conta analítica/grupo de contas.
    #     }


class RegistroI051(models.Model):
    "PLANO DE CONTAS REFERENCIAL"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.i051"
    _inherit = "l10n_br_sped.ecd.9.i051"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_CCUS": 0,  # Código do centro de custo.
    #         "COD_CTA_REF": 0,  # Código da conta de acordo com o plano de contas ...
    #     }


class RegistroI052(models.Model):
    "INDICAÇÃO DOS CÓDIGOS DE AGLUTINAÇÃO"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.i052"
    _inherit = "l10n_br_sped.ecd.9.i052"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_CCUS": 0,  # Código do centro de custo.
    #         "COD_AGL": 0,  # Código de aglutinação utilizado nas demonstrações co...
    #     }


class RegistroI053(models.Model):
    "SUBCONTAS CORRELATAS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.i053"
    _inherit = "l10n_br_sped.ecd.9.i053"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_IDT": 0,  # Código de identificação do grupo de conta- subconta(...
    #         "COD_CNT_CORR": 0,  # Código da subconta correlata (deve estar no pla...
    #         "NAT_SUB_CNT": 0,  # Natureza da subconta correlata (conforme tabela ...
    #     }


class RegistroI075(models.Model):
    "TABELA DE HISTÓRICO PADRONIZADO"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.i075"
    _inherit = "l10n_br_sped.ecd.9.i075"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_HIST": 0,  # Código do histórico padronizado.
    #         "DESCR_HIST": 0,  # Descrição do histórico padronizado.
    #     }


class RegistroI100(models.Model):
    "CENTRO DE CUSTOS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.i100"
    _inherit = "l10n_br_sped.ecd.9.i100"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "DT_ALT": 0,  # Data da inclusão/alteração.
    #         "COD_CCUS": 0,  # Código do centro de custos.
    #         "CCUS": 0,  # Nome do centro de custos.
    #     }


class RegistroI150(models.Model):
    "SALDOS PERIÓDICOS – IDENTIFICAÇÃO DO PERÍODO"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.i150"
    _inherit = "l10n_br_sped.ecd.9.i150"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "DT_INI": 0,  # Data de início do período.
    #         "DT_FIN": 0,  # Data de fim do período.
    #     }


class RegistroI155(models.Model):
    "DETALHES DOS SALDOS PERIÓDICOS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.i155"
    _inherit = "l10n_br_sped.ecd.9.i155"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_CTA": 0,  # Código da conta analítica.
    #         "COD_CCUS": 0,  # Código do centro de custos.
    #         "VL_SLD_INI": 0,  # Valor do saldo inicial do período.
    #         "IND_DC_INI": 0,  # Indicador da situação do saldo inicial: D - Deved...
    #         "VL_DEB": 0,  # Valor total dos débitos do período.
    #         "VL_CRED": 0,  # Valor total dos créditos do período.
    #         "VL_SLD_FIN": 0,  # Valor do saldo final do período.
    #         "IND_DC_FIN": 0,  # Indicador da situação do saldo final: D - Devedor...
    #         "VL_SLD_INI_MF": 0,  # Valor do saldo inicial do período em moeda fun...
    #         "IND_DC_INI_MF": 0,  # Indicador da situação do saldo inicial em moed...
    #         "VL_DEB_MF": 0,  # Valor total dos débitos do período em moeda funcio...
    #         "VL_CRED_MF": 0,  # Valor total dos créditos do período em moeda func...
    #         "VL_SLD_FIN_MF": 0,  # Valor do saldo final do período em moeda funci...
    #         "IND_DC_FIN_MF": 0,  # Indicador da situação do saldo final em moeda ...
    #     }


class RegistroI157(models.Model):
    "TRANSFERÊNCIA DE SALDOS DO PLANO DE CONTAS ANTERIOR"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.i157"
    _inherit = "l10n_br_sped.ecd.9.i157"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_CTA": 0,  # Código da conta analítica do plano de contas anterio...
    #         "COD_CCUS": 0,  # Código do centro de custos do plano de contas anter...
    #         "VL_SLD_INI": 0,  # Valor do saldo inicial do período.
    #         "IND_DC_INI": 0,  # Indicador da situação do saldo inicial: D - Deved...
    #         "VL_SLD_INI_MF": 0,  # Valor do saldo inicial do período em moeda fun...
    #         "IND_DC_INI_MF": 0,  # Indicador da situação do saldo inicial em moed...
    #     }


class RegistroI200(models.Model):
    "LANÇAMENTO CONTÁBIL"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.i200"
    _inherit = "l10n_br_sped.ecd.9.i200"
    _odoo_model = "account.move"

    @api.model
    def _odoo_domain(self, parent_record, declaration):
        return (
            []
        )  # ("company_id", "=", declaration.company_id.id), ("state", "=", "open")]

    @api.model
    def _map_from_odoo(self, record, parent_record, declaration, index=0):
        return {
            "NUM_LCTO": record.name,  # Número ou Código de identificação único do lançamen...
            "DT_LCTO": record.create_date,  # Data do lançamento.
            "VL_LCTO": record.amount_total,  # Valor do lançamento.
            "IND_LCTO": "N",
            "DT_LCTO_EXT": record.date,  # O Data de ocorrência dos fatos objeto do lançame...
            "VL_LCTO_MF": record.amount_total,  # Valor do lançamento em moeda funcional, convertid...
        }


class RegistroI250(models.Model):
    "PARTIDAS DO LANÇAMENTO CONTÁBIL"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.i250"
    _inherit = "l10n_br_sped.ecd.9.i250"
    _odoo_model = "account.move.line"

    @api.model
    def _odoo_domain(self, parent_record, declaration):
        return [
            ("company_id", "=", declaration.company_id.id),
            ("parent_state", "=", "posted"),
            ("move_id", "=", parent_record.id),
            ("display_type", "=", False),
            # ("date", ">", date_start),
            # ("date", "<", date_end),
        ]

    @api.model
    def _map_from_odoo(self, record, parent_record, declaration, index=0):
        return {
            "COD_CTA": record.account_id.code,  # Código da conta analítica debitada/creditada.
            # "COD_CCUS": 0,  # Código do centro de custos.
            "VL_DC": record.amount_currency,  # Valor da partida.
            "IND_DC": record.debit > 0
            and "D"
            or "C",  # Indicador da natureza da partida: D - Débito; C - Cré...
            # "NUM_ARQ": 0,  # Número, Código ou caminho de localização dos documen...
            # "COD_HIST_PAD": 0,  # Código do histórico padronizado, conforme tabel...
            # "HIST": 0,  # O Histórico completo da partida ou histórico complement...
            "COD_PART": record.partner_id.id,  # ?,  # Código de identificação do participante na partida ...
            "VL_DC_MF": record.amount_currency,  # Valor da partida em moeda funcional, convertido par...
            # "IND_DC_MF": 0,  # Indicador da natureza da partida em moeda funciona...
        }


class RegistroI300(models.Model):
    "BALANCETES DIÁRIOS – IDENTIFICAÇÃO DA DATA"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.i300"
    _inherit = "l10n_br_sped.ecd.9.i300"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "DT_BCTE": 0,  # Data do balancete.
    #     }


class RegistroI310(models.Model):
    "DETALHES DO BALANCETE DIÁRIO"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.i310"
    _inherit = "l10n_br_sped.ecd.9.i310"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_CTA": 0,  # Código da conta analítica debitada/creditada.
    #         "COD_CCUS": 0,  # Código do centro de custos.
    #         "VAL_DEBD": 0,  # Total dos débitos do dia.
    #         "VAL_CREDD": 0,  # Total dos créditos do dia.
    #         "VAL_DEB_MF": 0,  # Total dos débitos do dia em moeda funcional, conv...
    #         "VAL_CRED_MF": 0,  # Total dos créditos do dia em moeda funcional, co...
    #     }


class RegistroI350(models.Model):
    "SALDOS DAS CONTAS DE RESULTADO ANTES DO ENCERRAMENTO – IDENTIFICAÇÃO DA DATA"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.i350"
    _inherit = "l10n_br_sped.ecd.9.i350"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "DT_RES": 0,  # Data da apuração do resultado.
    #     }


class RegistroI355(models.Model):
    "DOS SALDOS DAS CONTAS DE RESULTADO ANTES DO DETALHES ENCERRAMENTO"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.i355"
    _inherit = "l10n_br_sped.ecd.9.i355"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_CTA": 0,  # Código da conta analítica de resultado.
    #         "COD_CCUS": 0,  # Código do centro de custos.
    #         "VL_CTA": 0,  # Valor do saldo final antes do lançamento de encerrame...
    #         "IND_DC": 0,  # Indicador da situação do saldo final: D - Devedor; C ...
    #         "VL_CTA_MF": 0,  # Valor do saldo final antes do lançamento de encerr...
    #         "IND_DC_MF": 0,  # Indicador da situação do saldo final em moeda func...
    #     }


class RegistroI500(models.Model):
    "PARÂMETROS DE IMPRESSÃO/VISUALIZAÇÃO DO LIVRO RAZÃO AUXILIAR COM LEIAUTE PARAMETRIZÁVEL"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.i500"
    _inherit = "l10n_br_sped.ecd.9.i500"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "TAM_FONTE": 0,  # Tamanho da fonte.
    #     }


class RegistroI510(models.Model):
    "DEFINIÇÃO DOS CAMPOS DO LIVRO RAZÃO AUXILIAR COM LEIAUTE PARAMETRIZÁVEL"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.i510"
    _inherit = "l10n_br_sped.ecd.9.i510"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "NM_CAMPO": 0,  # Nome do campo, sem espaços em branco ou caractere e...
    #         "DESC_CAMPO": 0,  # Descrição do campo (utilizada na visualização do ...
    #         "TIPO_CAMPO": 0,  # Tipo do campo: “N” – Numérico; “C” – Caractere.
    #         "TAM_CAMPO": 0,  # Tamanho do campo.
    #         "DEC_CAMPO": 0,  # Quantidade de casas decimais para campos tipo “N”.
    #         "COL_CAMPO": 0,  # Largura da coluna no relatório (em quantidade de c...
    #     }


class RegistroI550(models.Model):
    "DETALHES DO LIVRO RAZÃO AUXILIAR COM LEIAUTE PARAMETRIZÁVEL"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.i550"
    _inherit = "l10n_br_sped.ecd.9.i550"

    RZ_CONT = fields.Char()  # according to pdf specification

    @api.model
    def _read_register_line(self, line, version):
        vals = {"RZ_CONT": "|".join(line.split("|")[2:][:-1])}
        return vals

    def _generate_register_text(self, sped, version, line_count, count_by_register):
        code = self._name[-4:].upper()
        if len(self):
            count_by_register[code] += len(self)
        for rec in self:
            sped.write("\n|%s|" % (code,))
            sped.write(rec.RZ_CONT)
            sped.write("|")
            line_count[0] += 1
            rec.reg_I555_ids._generate_register_text(
                sped, version, line_count, count_by_register
            )
        return sped


class RegistroI555(models.Model):
    "TOTAIS NO LIVRO RAZÃO AUXILIAR COM LEIAUTE PARAMETRIZÁVEL"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.i555"
    _inherit = "l10n_br_sped.ecd.9.i555"

    RZ_CONT_TOT = fields.Char()  # according to pdf specification

    @api.model
    def _read_register_line(self, line, version):
        vals = {"RZ_CONT_TOT": "|".join(line.split("|")[2:][:-1])}
        return vals

    def _generate_register_text(self, sped, version, line_count, count_by_register):
        code = self._name[-4:].upper()
        if len(self):
            count_by_register[code] += len(self)
        for rec in self:
            sped.write("\n|%s|" % (code,))
            sped.write(rec.RZ_CONT_TOT or "")
            sped.write("|")
            line_count[0] += 1


class RegistroJ005(models.Model):
    "DEMONSTRAÇÕES CONTÁBEIS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.j005"
    _inherit = "l10n_br_sped.ecd.9.j005"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "DT_INI": 0,  # O Data inicial das demonstrações contábeis. bservação...
    #         "DT_FIN": 0,  # Data final das demonstrações contábeis.
    #         "ID_DEM": 0,  # Identificação das demonstrações: 1 – demonstrações co...
    #         "CAB_DEM": 0,  # Cabeçalho das demonstrações.
    #     }


class RegistroJ100(models.Model):
    "BALANÇO PATRIMONIAL"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.j100"
    _inherit = "l10n_br_sped.ecd.9.j100"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_AGL": 0,  # O Código de aglutinação atribuído pela pessoa jurídi...
    #         "IND_COD_AGL": 0,  # Indicador do tipo de código de aglutinação das l...
    #         "NIVEL_AGL": 0,  # Nível do Código de aglutinação (mesmo conceito do ...
    #         "COD_AGL_SUP": 0,  # Código de aglutinação sintético/grupo de código ...
    #         "IND_GRP_BAL": 0,  # Indicador de grupo do balanço: A – Ativo; P – Pa...
    #         "DESCR_COD_AGL": 0,  # Descrição do Código de aglutinação.
    #         "VL_CTA_INI": 0,  # Valor inicial do código de aglutinação no Balanço...
    #         "IND_DC_CTA_INI": 0,  # Indicador da situação do saldo inicial inform...
    #         "VL_CTA_FIN": 0,  # Valor final do código de aglutinação no Balanço P...
    #         "IND_DC_CTA_FIN": 0,  # Indicador da situação do saldo final informad...
    #         "NOTA_EXP_REF": 0,  # Referência a numeração das notas explicativas r...
    #     }


class RegistroJ150(models.Model):
    "DEMONSTRAÇÃO DO RESULTADO DO EXERCÍCIO"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.j150"
    _inherit = "l10n_br_sped.ecd.9.j150"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "NU_ORDEM": 0,  # O Número de ordem da linha na visualização da demon...
    #         "COD_AGL": 0,  # O Código de aglutinação das linhas, atribuído pela p...
    #         "IND_COD_AGL": 0,  # Indicador do tipo de código de aglutinação das l...
    #         "NIVEL_AGL": 0,  # Nível do Código de aglutinação (mesmo conceito do ...
    #         "COD_AGL_SUP": 0,  # Código de aglutinação sintético/grupo de código ...
    #         "DESCR_COD_AGL": 0,  # Descrição do Código de aglutinação.
    #         "VL_CTA_INI_": 0,  # Valor do saldo final da linha no período imediat...
    #         "IND_DC_CTA_INI": 0,  # Indicador da situação do valor final da linha...
    #         "VL_CTA_FIN": 0,  # Valor final da linha antes do encerramento do exe...
    #         "IND_DC_CTA_FIN": 0,  # Indicador da situação do valor final da linha...
    #         "IND_GRP_DRE": 0,  # D R Indicador de grupo da DRE: – Linha totalizad...
    #         "NOTA_EXP_REF": 0,  # Referência a numeração das notas explicativas r...
    #     }


class RegistroJ210(models.Model):
    "DE OU DEMONSTRAÇÃO LUCROS PREJUÍZOS ACUMULADOS DO"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.j210"
    _inherit = "l10n_br_sped.ecd.9.j210"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "IND_TIP": 0,  # Indicador do tipo de demonstração: 0 – DLPA – Demons...
    #         "COD_AGL": 0,  # Código de aglutinação das contas analíticas do patri...
    #         "DESCR_COD_AGL": 0,  # Descrição do código de aglutinação
    #         "VL_CTA_INI": 0,  # Saldo inicial do código de aglutinação na demonst...
    #         "IND_DC_CTA_INI": 0,  # Indicador da situação do saldo inicial inform...
    #         "VL_CTA_FIN": 0,  # Saldo final do código de aglutinação na demonstra...
    #         "IND_DC_CTA_FIN": 0,  # Indicador da situação do saldo final informad...
    #         "NOTAS_EXP_REF": 0,  # Referência à numeração das notas explicativas ...
    #     }


class RegistroJ215(models.Model):
    "J215"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.j215"
    _inherit = "l10n_br_sped.ecd.9.j215"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_HIST_FAT": 0,  # Código do histórico do fato contábil.
    #         "DESC_FAT": 0,  # Descrição do Fato Contábil
    #         "VL_FAT_CONT": 0,  # Valor do fato contábil.
    #         "IND_DC_FAT": 0,  # Indicador de situação do saldo informado no campo...
    #     }


class RegistroJ800(models.Model):
    "OUTRAS INFORMAÇÕES"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.j800"
    _inherit = "l10n_br_sped.ecd.9.j800"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "TIPO_DOC": 0,  # Tipo de documento: 001: Demonstração do Resultado A...
    #         "DESC_RTF": 0,  # Descrição do arquivo .rtf.
    #         "HASH_RTF": 0,  # Hash do arquivo .rtf incluído. Observação: O HASH é...
    #         "ARQ_RTF": 0,  # Sequência de bytes que representem um único arquivo ...
    #         "IND_FIM_RTF": 0,  # Indicador de fim do arquivo RTF. Texto fixo cont...
    #     }


class RegistroJ801(models.Model):
    "TERMO DE VERIFICAÇÃO PARA FINS DE SUBSTITUIÇÃO DA ECD"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.j801"
    _inherit = "l10n_br_sped.ecd.9.j801"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "TIPO_DOC": 0,  # Tipo de documento: 001: Termo de Verificação para F...
    #         "DESC_RTF": 0,  # Descrição do arquivo .rtf.
    #         "COD_MOT_SUBS": 0,  # O Código do motivo da substituição: 001 – Mudan...
    #         "HASH_RTF": 0,  # Hash do arquivo .rtf incluído. Observação: O HASH é...
    #         "ARQ_RTF": 0,  # Sequência de bytes que representem um único arquivo ...
    #         "IND_FIM_RTF": 0,  # Indicador de fim do arquivo RTF. Texto fixo cont...
    #     }


class RegistroJ900(models.Model):
    "TERMO DE ENCERRAMENTO"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.j900"
    _inherit = "l10n_br_sped.ecd.9.j900"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "DNRC_ENCER": 0,  # Texto fixo contendo “TERMO DE ENCERRAMENTO”.
    #         "NUM_ORD": 0,  # Número de ordem do instrumento de escrituração.
    #         "NAT_LIVRO": 0,  # Natureza do livro; finalidade a que se destinou o ...
    #         "NOME": 0,  # Nome empresarial.
    #         "QTD_LIN": 0,  # Quantidade total de linhas do arquivo digital.
    #         "DT_INI_ESCR": 0,  # Data de início da escrituração.
    #         "DT_FIN_ESCR": 0,  # Data de término da escrituração.
    #     }


class RegistroJ930(models.Model):
    "SIGNATÁRIOS DA ESCRITURAÇÃO"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.j930"
    _inherit = "l10n_br_sped.ecd.9.j930"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "IDENT_NOM": 0,  # Nome do signatário.
    #         "IDENT_CPF_CNPJ": 0,  # CPF ou CNPJ
    #         "IDENT_QUALIF": 0,  # Qualificação do assinante, conforme tabela.
    #         "COD_ASSIN": 0,  # Código de qualificação do assinante, conforme tabe...
    #         "IND_CRC": 0,  # Número de inscrição do contabilista no Conselho Regi...
    #         "EMAIL": 0,  # Email do signatário.
    #         "FONE": 0,  # Telefone do signatário.
    #         "UF_CRC": 0,  # Indicação da unidade da federação que expediu o CRC.
    #         "NUM_SEQ_CRC": 0,  # Número da Certidão de Regularidade Profissional ...
    #         "DT_CRC": 0,  # Data de validade da Certidão de Regularidade Profissi...
    #         "IND_RESP_LEGAL": 0,  # Identificação do signatário que será validado...
    #     }


class RegistroJ932(models.Model):
    "SIGNATÁRIOS DO TERMO DE VERIFICAÇÃO PARA FINS DE SUBSTITUIÇÃO DA ECD"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.j932"
    _inherit = "l10n_br_sped.ecd.9.j932"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "IDENT_NOM_T": 0,  # Nome do signatário do termo de verificação.
    #         "IDENT_CPF_CNPJ_T": 0,  # CPF ou CNPJ do assinante do termo de verifi...
    #         "IDENT_QUALIF_T": 0,  # Qualificação do assinante do termo de verific...
    #         "COD_ASSIN_T": 0,  # Código de qualificação do assinante do termo de ...
    #         "IND_CRC_T": 0,  # Número de inscrição do contabilista no Conselho
    #         "EMAIL_T": 0,  # Email do signatário.
    #         "FONE_T": 0,  # Telefone do signatário.
    #         "UF_CRC_T": 0,  # Indicação da unidade da federação que expediu o CRC...
    #         "NUM_SEQ_CRC_T": 0,  # Número da Certidão de Regularidade Profissiona...
    #         "DT_CRC_T": 0,  # Data de validade da Certidão de Regularidade Profis...
    #     }


class RegistroJ935(models.Model):
    "IDENTIFICAÇÃO DOS AUDITORES INDEPENDENTES"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.j935"
    _inherit = "l10n_br_sped.ecd.9.j935"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "NI_CPF_CNPJ": 0,  # CPF do auditor independente/CNPJ da pessoa juríd...
    #         "NOME_AUDITOR_FIRMA": 0,  # Nome do auditor independente ou pessoa ju...
    #         "COD_CVM_AUDITOR": 0,  # Registro do auditor independente na CVM.
    #     }


class RegistroK030(models.Model):
    "PERÍODO DA ESCRITURAÇÃO CONTÁBIL CONSOLIDADA"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.k030"
    _inherit = "l10n_br_sped.ecd.9.k030"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "DT_INI": 0,  # Data inicial do período consolidado.
    #         "DT_FIN": 0,  # Data final do período consolidado.
    #     }


class RegistroK100(models.Model):
    "RELAÇÃO DAS EMPRESAS CONSOLIDADAS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.k100"
    _inherit = "l10n_br_sped.ecd.9.k100"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_PAIS": 0,  # Código do país da empresa, conforme tabela do Banco...
    #         "EMP_COD": 0,  # Código de identificação da empresa participante.
    #         "CNPJ": 0,  # CNPJ (somente os 8 primeiros dígitos).
    #         "NOME": 0,  # Nome empresarial.
    #         "PER_PART": 0,  # Percentual de participação total do conglomerado na...
    #         "EVENTO": 0,  # Evento societário ocorrido no período: S - Sim N – Nã...
    #         "PER_CONS": 0,  # Percentual de consolidação da empresa no final do p...
    #         "DATA_INI_EMP": 0,  # Data inicial do período da escrituração contábi...
    #         "DATA_FIN_EMP": 0,  # Data final do período da escrituração contábil ...
    #     }


class RegistroK110(models.Model):
    "RELAÇÃO DOS EVENTOS SOCIETÁRIOS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.k110"
    _inherit = "l10n_br_sped.ecd.9.k110"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "EVENTO": 0,  # Evento societário ocorrido no período: 1 – Aquisição ...
    #         "DT_EVENTO": 0,  # Data do evento societário.
    #     }


class RegistroK115(models.Model):
    "EMPRESAS PARTICIPANTES DO EVENTO SOCIETÁRIO"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.k115"
    _inherit = "l10n_br_sped.ecd.9.k115"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "EMP_COD_PART": 0,  # Código da empresa envolvida na operação
    #         "COND_PART": 0,  # Condição da empresa relacionada à operação: 1 – Su...
    #         "PER_EVT": 0,  # Percentual da empresa participante envolvida na oper...
    #     }


class RegistroK200(models.Model):
    "PLANO DE CONTAS CONSOLIDADO"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.k200"
    _inherit = "l10n_br_sped.ecd.9.k200"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_NAT": 0,  # Código da natureza da conta/grupo de contas, conform...
    #         "IND_CTA": 0,  # Indicador do tipo de conta: S - Sintética (grupo de ...
    #         "NIVEL": 0,  # Nível da conta
    #         "COD_CTA": 0,  # Código da conta
    #         "COD_CTA_SUP": 0,  # Código da conta superior
    #         "CTA": 0,  # Nome da conta
    #     }


class RegistroK210(models.Model):
    "MAPEAMENTO PARA O PLANO DE CONTAS DAS EMPRESAS CONSOLIDADAS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.k210"
    _inherit = "l10n_br_sped.ecd.9.k210"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_EMP": 0,  # Código de identificação da empresa participante
    #         "COD_CTA_EMP": 0,  # Código da conta da empresa participante
    #     }


class RegistroK300(models.Model):
    "SALDOS DAS CONTAS CONSOLIDADAS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.k300"
    _inherit = "l10n_br_sped.ecd.9.k300"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "COD_CTA": 0,  # Código da conta consolidada
    #         "VAL_AG": 0,  # Valor absoluto aglutinado
    #         "IND_VAL_AG": 0,  # Indicador da situação do valor aglutinado: D – De...
    #         "VAL_EL": 0,  # Valor absoluto das eliminações
    #         "IND_VAL_EL": 0,  # Indicador da situação do valor eliminado: D – Dev...
    #         "VAL_CS": 0,  # Valor absoluto consolidado: VAL_CS = VAL_AG – VAL_EL
    #         "IND_VAL_CS": 0,  # Indicador da situação do valor consolidado: D – D...
    #     }


class RegistroK310(models.Model):
    "EMPRESAS DETENTORAS DAS PARCELAS DO VALOR ELIMINADO TOTAL"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.k310"
    _inherit = "l10n_br_sped.ecd.9.k310"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "EMP_COD_PARTE": 0,  # Código da empresa detentora do valor aglutinad...
    #         "VALOR": 0,  # Parcela do valor eliminado total
    #         "IND_VALOR": 0,  # Indicador da situação do valor eliminado: D – Deve...
    #     }


class RegistroK315(models.Model):
    "EMPRESAS CONTRAPARTES DAS PARCELAS DO VALOR ELIMINADO TOTAL"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.k315"
    _inherit = "l10n_br_sped.ecd.9.k315"

    # @api.model
    # def _map_from_odoo(self, record, parent_record, declaration, index=0):
    #     return {
    #         "EMP_COD_CONTRA": 0,  # Código da empresa da contrapartida
    #         "COD_CONTRA": 0,  # Código da conta consolidada da contrapartida
    #         "VALOR": 0,  # Parcela da contrapartida do valor eliminado total
    #         "IND_VALOR": 0,  # Indicador da situação do valor eliminado: D – Deve...
    #     }
