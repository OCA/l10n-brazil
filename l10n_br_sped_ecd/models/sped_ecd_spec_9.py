# Copyright 2023 - TODAY, Akretion - Raphael Valyi <raphael.valyi@akretion.com>
# License AGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/sped-extractor and xsdata-odoo
# flake8: noqa: B950

"""
STRUCTURE SPED ECD

<BLOCO 0>

  - 0007 OUTRAS INSCRIÇÕES CADASTRAIS DA PESSOA JURÍDICA

  - 0020 ESCRITURAÇÃO CONTÁBIL DESCENTRALIZADA

  - 0035 IDENTIFICAÇÃO DAS SCP

  - 0150 TABELA DE CADASTRO DO PARTICIPANTE
    ≡ 0180 IDENTIFICAÇÃO DO RELACIONAMENTO COM O PARTICIPANTE

<BLOCO I>

  - I010 IDENTIFICAÇÃO DA ESCRITURAÇÃO CONTÁBIL
    ≡ I012 LIVROS AUXILIARES AO DIÁRIO
      ≡ I015
    ≡ I020 CAMPOS ADICIONAIS
    ≡ I030 TERMO DE ABERTURA
    ≡ I050 PLANO DE CONTAS
      ≡ I051
      ≡ I052
      ≡ I053
    ≡ I075 TABELA DE HISTÓRICO PADRONIZADO
    ≡ I100 CENTRO DE CUSTOS
    ≡ I150 SALDOS PERIÓDICOS – IDENTIFICAÇÃO DO PERÍODO
      ≡ I155
        ≡ I157
    ≡ I200 LANÇAMENTO CONTÁBIL
      ≡ I250
    ≡ I300 BALANCETES DIÁRIOS – IDENTIFICAÇÃO DA DATA
      ≡ I310
    ≡ I350 SALDOS DAS CONTAS DE RESULTADO ANTES DO ENCERRAMENTO – IDENTIFICAÇÃO DA DATA
      ≡ I355
    ≡ I500 PARÂMETROS DE IMPRESSÃO/VISUALIZAÇÃO DO LIVRO RAZÃO AUXILIAR COM LEIAUTE PARAMETRIZÁVEL
    ≡ I510 DEFINIÇÃO DOS CAMPOS DO LIVRO RAZÃO AUXILIAR COM LEIAUTE PARAMETRIZÁVEL
    ≡ I550 DETALHES DO LIVRO RAZÃO AUXILIAR COM LEIAUTE PARAMETRIZÁVEL
      ≡ I555

<BLOCO J>

  - J005 DEMONSTRAÇÕES CONTÁBEIS
    ≡ J100 BALANÇO PATRIMONIAL
    ≡ J150 DEMONSTRAÇÃO DO RESULTADO DO EXERCÍCIO
    ≡ J210 DE OU DEMONSTRAÇÃO LUCROS PREJUÍZOS ACUMULADOS DO
      ≡ J215
    ≡ J800 OUTRAS INFORMAÇÕES
    ≡ J801 TERMO DE VERIFICAÇÃO PARA FINS DE SUBSTITUIÇÃO DA ECD

  - J900 TERMO DE ENCERRAMENTO
    ≡ J930 SIGNATÁRIOS DA ESCRITURAÇÃO
    ≡ J932 SIGNATÁRIOS DO TERMO DE VERIFICAÇÃO PARA FINS DE SUBSTITUIÇÃO DA ECD
    ≡ J935 IDENTIFICAÇÃO DOS AUDITORES INDEPENDENTES

<BLOCO K>

  - K030 PERÍODO DA ESCRITURAÇÃO CONTÁBIL CONSOLIDADA
    ≡ K100 RELAÇÃO DAS EMPRESAS CONSOLIDADAS
      ≡ K110
        ≡ K115

  - K200 PLANO DE CONTAS CONSOLIDADO
    ≡ K210 MAPEAMENTO PARA O PLANO DE CONTAS DAS EMPRESAS CONSOLIDADAS
    ≡ K300 SALDOS DAS CONTAS CONSOLIDADAS
      ≡ K310
        ≡ K315

<BLOCO 9>

  - 9900 REGISTROS DO ARQUIVO
"""

import textwrap

from odoo import fields, models


class Registro0000(models.AbstractModel):
    """ABERTURA DO ARQUIVO DIGITAL E IDENTIFICAÇÃO DO EMPRESÁRIO OU DA
    SOCIEDADE EMPRESÁRIA"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.0000"
    _inherit = "l10n_br_sped.declaration"
    _sped_level = 0

    LECD = fields.Char(
        string="Texto fixo contendo “LECD”", required=True, sped_length="4"
    )

    DT_INI = fields.Date(
        string="Data inicial das informações contidas no arquivo",
        required=True,
        sped_length="8",
    )

    DT_FIN = fields.Date(
        string="Data final das informações contidas no arquivo",
        required=True,
        sped_length="8",
    )

    NOME = fields.Char(string="Nome empresarial da pessoa jurídica", required=True)

    CNPJ = fields.Char(
        string="Número de inscrição da pessoa jurídica no CNPJ",
        required=True,
        xsd_type="numeric_code",
        sped_length="14",
        help=(
            "Número de inscrição da pessoa jurídica no CNPJ. Observação: Esse "
            "CNPJ é sempre da Sócia Ostensiva, no caso do arquivo da SCP."
        ),
    )

    UF = fields.Char(
        string="Sigla da unidade da federação da pessoa jurídica",
        required=True,
        sped_length="2",
    )

    IE = fields.Char(string="Inscrição Estadual da pessoa jurídica")

    COD_MUN = fields.Char(
        string="Código do município do domicílio fiscal",
        xsd_type="numeric_code",
        sped_length="7",
        help=(
            "Código do município do domicílio fiscal da pessoa jurídica, "
            "conforme tabela do IBGE – Instituto Brasileiro de Geografia e "
            "Estatística."
        ),
    )

    IM = fields.Char(string="Inscrição Municipal da pessoa jurídica")

    IND_SIT_ESP = fields.Char(
        string="Indicador de situação especial",
        xsd_type="numeric_code",
        sped_length="1",
        help=(
            "Indicador de situação especial (conforme tabela publicada pelo " "Sped)."
        ),
    )

    IND_SIT_INI_PER = fields.Char(
        string="Indicador de situação no início do período",
        required=True,
        xsd_type="numeric_code",
        sped_length="1",
        help=(
            "Indicador de situação no início do período (conforme tabela "
            "publicada pelo Sped)."
        ),
    )

    IND_NIRE = fields.Char(
        string="Indicador de existência de NIRE",
        required=True,
        xsd_type="numeric_code",
        sped_length="1",
        help=(
            "Indicador de existência de NIRE: 0 – Empresa não possui registro "
            "na Junta Comercial (não possui NIRE) 1 – Empresa possui registro "
            "na Junta Comercial (possui NIRE)"
        ),
    )

    IND_FIN_ESC = fields.Char(
        string="Indicador de finalidade da escrituração",
        required=True,
        xsd_type="numeric_code",
        sped_length="1",
        help=(
            "Indicador de finalidade da escrituração: 0 - Original 1 – " "Substituta"
        ),
    )

    COD_HASH_SUB = fields.Char(
        string="Hash da escrituração substituída", sped_length="4"
    )

    IND_GRANDE_PORTE = fields.Char(
        string="Indicador de entidade sujeita",
        required=True,
        xsd_type="numeric_code",
        sped_length="1",
        help=(
            "Indicador de entidade sujeita a auditoria independente: 0 – "
            "Empresa não é entidade sujeita a auditoria independente. 1 – "
            "Empresa é entidade sujeita a auditoria independente – Ativo Total"
            " superior a R$ 240.000.000,00 ou Receita Bruta Anual superior "
            "R$300.000.000,00."
        ),
    )

    TIP_ECD = fields.Integer(
        string="Indicador do tipo de ECD",
        required=True,
        sped_length="1",
        help=(
            "Indicador do tipo de ECD: 0 – ECD de empresa não participante de "
            "SCP como sócio ostensivo. 1 – ECD de empresa participante de SCP "
            "como sócio ostensivo. 2 – ECD da SCP."
        ),
    )

    COD_SCP = fields.Char(
        string="CNPJ da SCP",
        xsd_type="numeric_code",
        sped_length="14",
        help=(
            "CNPJ da SCP (Art. 4º, XVII, da IN RFB nº 1.863, de 27 de dezembro"
            " de 2018). Observação: Só deve ser preenchido pela própria SCP "
            "com o CNPJ da SCP (Não é preenchido pelo sócio ostensivo)."
        ),
    )

    IDENT_MF = fields.Char(
        string="Identificação de moeda funcional",
        required=True,
        sped_length="1",
        help=(
            "Identificação de moeda funcional: Indica que a escrituração "
            "abrange valores com base na moeda funcional (art. 287 da "
            "Instrução Normativa RFB nº 1.700, de 14 de março de 2017). "
            "Observação: Deverá ser utilizado o registro I020 para informação "
            "de campos adicionais, conforme instruções do item 1.24."
        ),
    )

    IND_ESC_CONS = fields.Char(
        string="Escriturações Contábeis Consolidadas",
        required=True,
        sped_length="1",
        help=(
            "Escriturações Contábeis Consolidadas: (Deve ser preenchido pela "
            "empresa controladora obrigada a informar demonstrações contábeis "
            "consolidadas, nos termos da Lei nº 6.404/76 e/ou do "
            "Pronunciamento Técnico CPC 36 – Demonstrações Consolidadas) S – "
            "Sim N – Não"
        ),
    )

    IND_CENTRALIZADA = fields.Char(
        string="Indicador da modalidade",
        required=True,
        xsd_type="numeric_code",
        sped_length="1",
        help=(
            "Indicador da modalidade de escrituração centralizada ou "
            "descentralizada: 0 – Escrituração Centralizada 1 – Escrituração "
            "Descentralizada"
        ),
    )

    IND_MUDANC_PC = fields.Char(
        string="Indicador de mudança de plano de contas",
        required=True,
        xsd_type="numeric_code",
        sped_length="1",
        help=(
            "Indicador de mudança de plano de contas: 0 – Não houve mudança no"
            " plano de contas. 1 – Houve mudança no plano de contas."
        ),
    )

    COD_PLAN_REF = fields.Char(
        string="O Código do Plano de Contas Referencial",
        sped_length="2",
        help=(
            "O Código do Plano de Contas Referencial que será utilizado para o"
            " mapeamento de todas as contas analíticas: 1 – PJ em Geral – "
            "Lucro Real 2 – PJ em Geral – Lucro Presumido 3 – Financeiras – "
            "Lucro Real 4 – Seguradoras – Lucro Real 5 – Imunes e Isentas em "
            "Geral 6 – Imunes e Isentas – Financeiras 7 – Imunes e Isentas – "
            "Seguradoras 8 – Entidades Fechadas de Previdência Complementar 9 "
            "– Partidos Políticos 10 – Financeiras – Lucro Presumido "
            "bservação: Caso a pessoa jurídica não realize o mapeamento para "
            "os planos referenciais na ECD, este campo deve ficar em branco."
        ),
    )


class Registro0007(models.AbstractModel):
    "OUTRAS INSCRIÇÕES CADASTRAIS DA PESSOA JURÍDICA"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.0007"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 2

    COD_ENT_REF = fields.Char(
        string="Código da instituição responsável",
        required=True,
        help=(
            "Código da instituição responsável pela administração do cadastro "
            "(conforme tabela publicada pelo Sped)."
        ),
    )

    COD_INSCR = fields.Char(
        string="Código cadastral da pessoa jurídica",
        help=(
            "Código cadastral da pessoa jurídica na instituição identificada "
            "no campo 02."
        ),
    )


class Registro0020(models.AbstractModel):
    "ESCRITURAÇÃO CONTÁBIL DESCENTRALIZADA"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.0020"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 2

    IND_DEC = fields.Char(
        string="Indicador de descentralização",
        required=True,
        xsd_type="numeric_code",
        sped_length="1",
        help=(
            "Indicador de descentralização: 0 – Escrituração da matriz. 1 – "
            "Escrituração da filial."
        ),
    )

    CNPJ = fields.Char(
        string="Número de inscrição da pessoa jurídica no CNPJ",
        required=True,
        xsd_type="numeric_code",
        sped_length="14",
        help=(
            "Número de inscrição da pessoa jurídica no CNPJ da matriz ou da " "filial."
        ),
    )

    UF = fields.Char(
        string="Sigla da unidade da federação da matriz",
        required=True,
        sped_length="2",
        help="Sigla da unidade da federação da matriz ou da filial.",
    )

    IE = fields.Char(string="Inscrição estadual da matriz ou da filial")

    COD_MUN = fields.Char(
        string="Código do município do domicílio da matriz",
        xsd_type="numeric_code",
        sped_length="7",
        help="Código do município do domicílio da matriz ou da filial.",
    )

    IM = fields.Char(
        string="Número de Inscrição Municipal da matriz",
        help="Número de Inscrição Municipal da matriz ou da filial.",
    )

    NIRE = fields.Char(
        string="Número de Identificação do Registro de Empresas",
        xsd_type="numeric_code",
        sped_length="11",
        help=(
            "Número de Identificação do Registro de Empresas da matriz ou da "
            "filial na Junta Comercial."
        ),
    )


class Registro0035(models.AbstractModel):
    "IDENTIFICAÇÃO DAS SCP"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.0035"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 2

    COD_SCP = fields.Char(
        string="CNPJ da SCP",
        required=True,
        sped_length="14",
        help=(
            "CNPJ da SCP (Art. 4º, XVII, da Instrução Normativa RFB nº 1.863, "
            "de 27 de dezembro de 2018)."
        ),
    )

    NOME_SCP = fields.Char(string="Nome da SCP")


class Registro0150(models.AbstractModel):
    "TABELA DE CADASTRO DO PARTICIPANTE"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.0150"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 2

    COD_PART = fields.Char(
        string="Código de identificação do participante",
        required=True,
        help=(
            "Código de identificação do participante no arquivo criado pela "
            "própria pessoa jurídica."
        ),
    )

    NOME = fields.Char(
        string="Nome pessoal ou empresarial do participante", required=True
    )

    COD_PAIS = fields.Char(
        string="Código do país do participante",
        required=True,
        xsd_type="numeric_code",
        sped_length="5",
        help=(
            "Código do país do participante, conforme a tabela do Banco "
            "Central do Brasil."
        ),
    )

    CNPJ = fields.Char(
        string="CNPJ do participante", xsd_type="numeric_code", sped_length="14"
    )

    CPF = fields.Char(
        string="CPF do participante", xsd_type="numeric_code", sped_length="11"
    )

    NIT = fields.Char(
        string="Número de Identificação do Trabalhador",
        xsd_type="numeric_code",
        sped_length="11",
        help="Número de Identificação do Trabalhador, Pis, Pasep, SUS.",
    )

    UF = fields.Char(
        string="Sigla da unidade da federação do participante", sped_length="2"
    )

    IE = fields.Char(string="Inscrição Estadual do participante")

    IE_ST = fields.Char(
        string="Inscrição Estadual do participante na unidade",
        help=(
            "Inscrição Estadual do participante na unidade da federação do "
            "destinatário, na condição de contribuinte substituto."
        ),
    )

    COD_MUN = fields.Char(
        string="Código do município",
        xsd_type="numeric_code",
        sped_length="7",
        help="Código do município, conforme a tabela do IBGE.",
    )

    IM = fields.Char(string="Inscrição Municipal do participante")

    SUFRAMA = fields.Char(
        string="Número de inscrição do participante na Suframa", sped_length="9"
    )

    reg_0180_ids = fields.One2many(
        "l10n_br_sped.ecd.0180",
        "reg_0180_ids_Registro0150_id",
        string="0180",
        sped_card="1:N",
        sped_required=True,
        help="0180 IDENTIFICAÇÃO DO RELACIONAMENTO COM O PARTICIPANTE",
    )


class Registro0180(models.AbstractModel):
    "IDENTIFICAÇÃO DO RELACIONAMENTO COM O PARTICIPANTE"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.0180"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 3

    COD_REL = fields.Char(
        string="Código do relacionamento conforme tabela publicada",
        required=True,
        xsd_type="numeric_code",
        sped_length="2",
        help=("Código do relacionamento conforme tabela publicada pelo Sped."),
    )

    DT_INI_REL = fields.Date(
        string="Data do início do relacionamento", required=True, sped_length="8"
    )

    DT_FIN_REL = fields.Date(
        string="Data do término do relacionamento", sped_length="8"
    )

    reg_0180_ids_Registro0150_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.0150",
        string="TABELA DE CADASTRO DO PARTICIPANTE",
        required=True,
        ondelete="cascade",
    )


class RegistroI010(models.AbstractModel):
    "IDENTIFICAÇÃO DA ESCRITURAÇÃO CONTÁBIL"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.i010"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 2

    IND_ESC = fields.Char(
        string="G R A B Z Indicador da forma",
        required=True,
        sped_length="1",
        help=(
            "G R A B Z Indicador da forma de escrituração contábil: - Livro "
            "Diário (Completo sem escrituração auxiliar). - Livro Diário com "
            "Escrituração Resumida (com escrituração auxiliar). - Livro Diário"
            " Auxiliar ao Diário com Escrituração Resumida. - Livro Balancetes"
            " Diários e Balanços. – Razão Auxiliar (Livro Contábil Auxiliar "
            "conforme leiaute definido nos registros I500 a I555)."
        ),
    )

    COD_VER_LC = fields.Char(
        string="Código da Versão do Leiaute Contábil", required=True
    )

    reg_I012_ids = fields.One2many(
        "l10n_br_sped.ecd.i012",
        "reg_I012_ids_RegistroI010_id",
        string="I012 LIVROS AUXILIARES AO DIÁRIO",
        sped_card="0:N",
        sped_required=True,
    )

    reg_I020_ids = fields.One2many(
        "l10n_br_sped.ecd.i020",
        "reg_I020_ids_RegistroI010_id",
        string="I020 CAMPOS ADICIONAIS",
        sped_card="0:N",
        sped_required=True,
    )

    reg_I030_ids = fields.One2many(
        "l10n_br_sped.ecd.i030",
        "reg_I030_ids_RegistroI010_id",
        string="I030 TERMO DE ABERTURA",
        sped_card="1",
        sped_required=True,
    )

    reg_I050_ids = fields.One2many(
        "l10n_br_sped.ecd.i050",
        "reg_I050_ids_RegistroI010_id",
        string="I050 PLANO DE CONTAS",
        sped_card="1:N",
        sped_required=True,
    )

    reg_I075_ids = fields.One2many(
        "l10n_br_sped.ecd.i075",
        "reg_I075_ids_RegistroI010_id",
        string="I075 TABELA DE HISTÓRICO PADRONIZADO",
        sped_card="0:N",
        sped_required=True,
    )

    reg_I100_ids = fields.One2many(
        "l10n_br_sped.ecd.i100",
        "reg_I100_ids_RegistroI010_id",
        string="I100 CENTRO DE CUSTOS",
        sped_card="0:N",
        sped_required=True,
    )

    reg_I150_ids = fields.One2many(
        "l10n_br_sped.ecd.i150",
        "reg_I150_ids_RegistroI010_id",
        string="I150 SALDOS PERIÓDICOS – IDENTIFICAÇÃO DO PERÍODO",
        sped_card="1:12",
        sped_required=True,
    )

    reg_I200_ids = fields.One2many(
        "l10n_br_sped.ecd.i200",
        "reg_I200_ids_RegistroI010_id",
        string="I200 LANÇAMENTO CONTÁBIL",
        sped_card="1:N",
        sped_required=True,
    )

    reg_I300_ids = fields.One2many(
        "l10n_br_sped.ecd.i300",
        "reg_I300_ids_RegistroI010_id",
        string="I300 BALANCETES DIÁRIOS – IDENTIFICAÇÃO DA DATA",
        sped_card="0:N",
        sped_required=True,
    )

    reg_I350_ids = fields.One2many(
        "l10n_br_sped.ecd.i350",
        "reg_I350_ids_RegistroI010_id",
        string="I350",
        sped_card="1:12",
        sped_required=True,
        help=(
            "I350 SALDOS DAS CONTAS DE RESULTADO ANTES DO ENCERRAMENTO – "
            "IDENTIFICAÇÃO DA DATA"
        ),
    )

    reg_I500_ids = fields.One2many(
        "l10n_br_sped.ecd.i500",
        "reg_I500_ids_RegistroI010_id",
        string="I500",
        sped_card="0:N",
        sped_required=True,
        help=(
            "I500 PARÂMETROS DE IMPRESSÃO/VISUALIZAÇÃO DO LIVRO RAZÃO AUXILIAR"
            " COM LEIAUTE PARAMETRIZÁVEL"
        ),
    )

    reg_I510_ids = fields.One2many(
        "l10n_br_sped.ecd.i510",
        "reg_I510_ids_RegistroI010_id",
        string="I510",
        sped_card="0:N",
        sped_required=True,
        help=(
            "I510 DEFINIÇÃO DOS CAMPOS DO LIVRO RAZÃO AUXILIAR COM LEIAUTE "
            "PARAMETRIZÁVEL"
        ),
    )

    reg_I550_ids = fields.One2many(
        "l10n_br_sped.ecd.i550",
        "reg_I550_ids_RegistroI010_id",
        string="I550",
        sped_card="0:N",
        sped_required=True,
        help=("I550 DETALHES DO LIVRO RAZÃO AUXILIAR COM LEIAUTE PARAMETRIZÁVEL"),
    )


class RegistroI012(models.AbstractModel):
    "LIVROS AUXILIARES AO DIÁRIO"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.i012"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 3

    NUM_ORD = fields.Integer(
        string="Número de ordem do instrumento associado", required=True
    )

    NAT_LIVR = fields.Char(
        string="Natureza do livro associado; finalidade",
        required=True,
        sped_length="8",
        help=(
            "Natureza do livro associado; finalidade a que se destina o " "instrumento."
        ),
    )

    TIPO = fields.Char(
        string="Tipo de escrituração do livro associado",
        required=True,
        xsd_type="numeric_code",
        sped_length="1",
        help=(
            "Tipo de escrituração do livro associado: 0 – digital (incluído no"
            " Sped). 1 – outros."
        ),
    )

    COD_HASH_AUX = fields.Char(
        string="Código Hash do arquivo correspondente",
        sped_length="4",
        help=(
            "Código Hash do arquivo correspondente ao livro auxiliar utilizado"
            " na assinatura digital."
        ),
    )

    reg_I012_ids_RegistroI010_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.i010",
        string="IDENTIFICAÇÃO DA ESCRITURAÇÃO CONTÁBIL",
        required=True,
        ondelete="cascade",
    )

    reg_I015_ids = fields.One2many(
        "l10n_br_sped.ecd.i015",
        "reg_I015_ids_RegistroI012_id",
        string="I015",
        sped_card="1:N",
        sped_required=True,
        help=(
            "I015 IDENTIFICAÇÃO DAS CONTAS DA ESCRITURAÇÃO RESUMIDA A QUE SE "
            "REFERE A ESCRITURAÇÃO AUXILIAR"
        ),
    )


class RegistroI015(models.AbstractModel):
    """IDENTIFICAÇÃO DAS CONTAS DA ESCRITURAÇÃO RESUMIDA A QUE SE REFERE A
    ESCRITURAÇÃO AUXILIAR"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.i015"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 4

    COD_CTA_RES = fields.Char(
        string="Código da(s) conta(s) analítica(s) do Livro Diário",
        required=True,
        help=(
            "Código da(s) conta(s) analítica(s) do Livro Diário com "
            "Escrituração Resumida (R) que recebe os lançamentos globais (deve"
            " corresponder a uma conta sintética no livro auxiliar)."
        ),
    )

    reg_I015_ids_RegistroI012_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.i012",
        string="LIVROS AUXILIARES AO DIÁRIO",
        required=True,
        ondelete="cascade",
    )


class RegistroI020(models.AbstractModel):
    "CAMPOS ADICIONAIS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.i020"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 3

    REG_COD = fields.Char(
        string="Código do registro que recepciona",
        required=True,
        sped_length="4",
        help="Código do registro que recepciona o campo adicional.",
    )

    NUM_AD = fields.Integer(
        string="Número sequencial do campo adicional", required=True
    )

    CAMPO = fields.Char(string="Nome do campo adicional", required=True)

    DESCRICAO = fields.Char(string="Descrição do campo adicional")

    TIPO = fields.Char(
        string="C Indicação do tipo de dado",
        required=True,
        help=(
            "C Indicação do tipo de dado (N: numérico; C: caractere). N: "
            "numérico - campos adicionais que conterão informações de valores "
            "em espécie (moeda), com duas decimais. : caractere - campos "
            "adicionais que conterão outras informações que não sejam valores "
            "em espécie (moeda), Exemplos: Códigos, CNPJ, CPF, etc."
        ),
    )

    IND_DC_INI_MF = fields.Char(
        string="Indicador da situação do saldo inicial",
        sped_length="1",
        help=(
            "Indicador da situação do saldo inicial em moeda funcional: D - "
            "Devedor; C - Credor."
        ),
    )

    reg_I020_ids_RegistroI010_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.i010",
        string="IDENTIFICAÇÃO DA ESCRITURAÇÃO CONTÁBIL",
        required=True,
        ondelete="cascade",
    )


class RegistroI030(models.AbstractModel):
    "TERMO DE ABERTURA"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.i030"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 3

    DNRC_ABERT = fields.Char(
        string="Texto fixo contendo “TERMO DE ABERTURA”",
        required=True,
        sped_length="17",
    )

    NUM_ORD = fields.Integer(
        string="Número de ordem do instrumento de escrituração", required=True
    )

    NAT_LIVR = fields.Char(
        string="Natureza do livro; finalidade a que se destina",
        required=True,
        sped_length="8",
        help=("Natureza do livro; finalidade a que se destina o instrumento."),
    )

    QTD_LIN = fields.Integer(
        string="Quantidade total de linhas do arquivo digital", required=True
    )

    NOME = fields.Char(string="Nome empresarial", required=True)

    NIRE = fields.Char(
        string="Número de Identificação do Registro de Empresas",
        xsd_type="numeric_code",
        sped_length="11",
        help=("Número de Identificação do Registro de Empresas da Junta " "Comercial."),
    )

    CNPJ = fields.Char(
        string="Número de inscrição no CNPJ",
        required=True,
        xsd_type="numeric_code",
        sped_length="14",
    )

    DT_ARQ = fields.Date(
        string="Data do arquivamento dos atos constitutivos", sped_length="8"
    )

    DT_ARQ_CONV = fields.Date(
        string="Data de arquivamento do ato de conversão",
        sped_length="8",
        help=(
            "Data de arquivamento do ato de conversão de sociedade simples em "
            "sociedade empresária."
        ),
    )

    DESC_MUN = fields.Char(string="Município")

    DT_EX_SOCIAL = fields.Date(
        string="Data de encerramento do exercício social",
        required=True,
        sped_length="8",
    )

    reg_I030_ids_RegistroI010_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.i010",
        string="IDENTIFICAÇÃO DA ESCRITURAÇÃO CONTÁBIL",
        required=True,
        ondelete="cascade",
    )


class RegistroI050(models.AbstractModel):
    "PLANO DE CONTAS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.i050"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 3

    DT_ALT = fields.Date(
        string="Data da inclusão/alteração", required=True, sped_length="8"
    )

    COD_NAT = fields.Char(
        string="Código da natureza da conta/grupo de contas",
        required=True,
        sped_length="2",
        help=(
            "Código da natureza da conta/grupo de contas, conforme tabela "
            "publicada pelo Sped."
        ),
    )

    IND_CTA = fields.Char(
        string="Indicador do tipo de conta: S",
        required=True,
        sped_length="1",
        help=(
            "Indicador do tipo de conta: S - Sintética (grupo de contas) A - "
            "Analítica (conta)"
        ),
    )

    NIVEL = fields.Integer(
        string="Nível da conta analítica/grupo de contas", required=True
    )

    COD_CTA = fields.Char(
        string="Código da conta analítica/grupo de contas", required=True
    )

    COD_CTA_SUP = fields.Char(
        string="Código da conta sintética /grupo de contas",
        help=(
            "Código da conta sintética /grupo de contas de nível imediatamente"
            " superior."
        ),
    )

    CTA = fields.Char(string="Nome da conta analítica/grupo de contas", required=True)

    reg_I050_ids_RegistroI010_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.i010",
        string="IDENTIFICAÇÃO DA ESCRITURAÇÃO CONTÁBIL",
        required=True,
        ondelete="cascade",
    )

    reg_I051_ids = fields.One2many(
        "l10n_br_sped.ecd.i051",
        "reg_I051_ids_RegistroI050_id",
        string="I051 PLANO DE CONTAS REFERENCIAL",
        sped_card="1:N",
        sped_required=True,
    )

    reg_I052_ids = fields.One2many(
        "l10n_br_sped.ecd.i052",
        "reg_I052_ids_RegistroI050_id",
        string="I052 INDICAÇÃO DOS CÓDIGOS DE AGLUTINAÇÃO",
        sped_card="1:N",
        sped_required=True,
    )

    reg_I053_ids = fields.One2many(
        "l10n_br_sped.ecd.i053",
        "reg_I053_ids_RegistroI050_id",
        string="I053 SUBCONTAS CORRELATAS",
        sped_card="1:N",
        sped_required=True,
    )


class RegistroI051(models.AbstractModel):
    "PLANO DE CONTAS REFERENCIAL"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.i051"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 4

    COD_CCUS = fields.Char(string="Código do centro de custo")

    COD_CTA_REF = fields.Char(
        string="Código da conta de acordo com o plano",
        required=True,
        help=(
            "Código da conta de acordo com o plano de contas referencial, "
            "conforme tabela publicada pelos órgãos indicados no campo "
            "COD_PLAN_REF do registro 0000."
        ),
    )

    reg_I051_ids_RegistroI050_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.i050",
        string="PLANO DE CONTAS",
        required=True,
        ondelete="cascade",
    )


class RegistroI052(models.AbstractModel):
    "INDICAÇÃO DOS CÓDIGOS DE AGLUTINAÇÃO"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.i052"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 4

    COD_CCUS = fields.Char(string="Código do centro de custo")

    COD_AGL = fields.Char(
        string="Código de aglutinação utilizado",
        required=True,
        help=(
            "Código de aglutinação utilizado nas demonstrações contábeis do "
            "bloco J (Somente para as contas analíticas)."
        ),
    )

    reg_I052_ids_RegistroI050_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.i050",
        string="PLANO DE CONTAS",
        required=True,
        ondelete="cascade",
    )


class RegistroI053(models.AbstractModel):
    "SUBCONTAS CORRELATAS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.i053"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 4

    COD_IDT = fields.Char(
        string="Código de identificação do grupo",
        required=True,
        sped_length="6",
        help="Código de identificação do grupo de conta- subconta(s)",
    )

    COD_CNT_CORR = fields.Char(
        string="Código da subconta correlata",
        required=True,
        help=(
            "Código da subconta correlata (deve estar no plano de contas e só "
            "pode estar relacionada a um único grupo)"
        ),
    )

    NAT_SUB_CNT = fields.Char(
        string="Natureza da subconta correlata",
        required=True,
        sped_length="2",
        help=(
            "Natureza da subconta correlata (conforme tabela de natureza da "
            "subconta publicada no Sped )"
        ),
    )

    reg_I053_ids_RegistroI050_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.i050",
        string="PLANO DE CONTAS",
        required=True,
        ondelete="cascade",
    )


class RegistroI075(models.AbstractModel):
    "TABELA DE HISTÓRICO PADRONIZADO"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.i075"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 3

    COD_HIST = fields.Char(string="Código do histórico padronizado", required=True)

    DESCR_HIST = fields.Char(string="Descrição do histórico padronizado", required=True)

    reg_I075_ids_RegistroI010_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.i010",
        string="IDENTIFICAÇÃO DA ESCRITURAÇÃO CONTÁBIL",
        required=True,
        ondelete="cascade",
    )


class RegistroI100(models.AbstractModel):
    "CENTRO DE CUSTOS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.i100"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 3

    DT_ALT = fields.Date(
        string="Data da inclusão/alteração", required=True, sped_length="8"
    )

    COD_CCUS = fields.Char(string="Código do centro de custos", required=True)

    CCUS = fields.Char(string="Nome do centro de custos", required=True)

    reg_I100_ids_RegistroI010_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.i010",
        string="IDENTIFICAÇÃO DA ESCRITURAÇÃO CONTÁBIL",
        required=True,
        ondelete="cascade",
    )


class RegistroI150(models.AbstractModel):
    "SALDOS PERIÓDICOS – IDENTIFICAÇÃO DO PERÍODO"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.i150"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 3

    DT_INI = fields.Date(
        string="Data de início do período", required=True, sped_length="8"
    )

    DT_FIN = fields.Date(
        string="Data de fim do período", required=True, sped_length="8"
    )

    reg_I150_ids_RegistroI010_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.i010",
        string="IDENTIFICAÇÃO DA ESCRITURAÇÃO CONTÁBIL",
        required=True,
        ondelete="cascade",
    )

    reg_I155_ids = fields.One2many(
        "l10n_br_sped.ecd.i155",
        "reg_I155_ids_RegistroI150_id",
        string="I155 DETALHES DOS SALDOS PERIÓDICOS",
        sped_card="1:N",
        sped_required=True,
    )


class RegistroI155(models.AbstractModel):
    "DETALHES DOS SALDOS PERIÓDICOS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.i155"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 4

    COD_CTA = fields.Char(string="Código da conta analítica", required=True)

    COD_CCUS = fields.Char(string="Código do centro de custos")

    VL_SLD_INI = fields.Monetary(
        string="Valor do saldo inicial do período",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_DC_INI = fields.Char(
        string="Indicador da situação do saldo inicial",
        sped_length="1",
        help=("Indicador da situação do saldo inicial: D - Devedor; C - Credor."),
    )

    VL_DEB = fields.Monetary(
        string="Valor total dos débitos do período",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CRED = fields.Monetary(
        string="Valor total dos créditos do período",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SLD_FIN = fields.Monetary(
        string="Valor do saldo final do período",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_DC_FIN = fields.Char(
        string="Indicador da situação do saldo final",
        sped_length="1",
        help=("Indicador da situação do saldo final: D - Devedor; C - Credor."),
    )

    VL_SLD_INI_MF = fields.Monetary(
        string="Valor do saldo inicial do período (VL_SLD_INI_MF)",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do saldo inicial do período em moeda funcional, convertido "
            "para reais."
        ),
    )

    IND_DC_INI_MF = fields.Char(
        string="IND_DC_INI_MF",
        sped_length="1",
        help=(
            "Indicador da situação do saldo inicial em moeda funcional: D - "
            "Devedor; C - Credor."
        ),
    )

    VL_DEB_MF = fields.Monetary(
        string="Valor total dos débitos do período (VL_DEB_MF)",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total dos débitos do período em moeda funcional, convertido"
            " para reais."
        ),
    )

    VL_CRED_MF = fields.Monetary(
        string="Valor total dos créditos do período (VL_CRED_MF)",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total dos créditos do período em moeda funcional, "
            "convertido para reais."
        ),
    )

    VL_SLD_FIN_MF = fields.Monetary(
        string="Valor do saldo final do período em moeda funcional",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do saldo final do período em moeda funcional, convertido "
            "para reais."
        ),
    )

    IND_DC_FIN_MF = fields.Char(
        string="IND_DC_FIN_MF",
        sped_length="1",
        help=(
            "Indicador da situação do saldo final em moeda funcional: D - "
            "Devedor; C - Credor."
        ),
    )

    reg_I155_ids_RegistroI150_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.i150",
        string="SALDOS PERIÓDICOS – IDENTIFICAÇÃO DO PERÍODO",
        required=True,
        ondelete="cascade",
    )

    reg_I157_ids = fields.One2many(
        "l10n_br_sped.ecd.i157",
        "reg_I157_ids_RegistroI155_id",
        string="I157",
        sped_card="1:N",
        sped_required=True,
        help="I157 TRANSFERÊNCIA DE SALDOS DO PLANO DE CONTAS ANTERIOR",
    )


class RegistroI157(models.AbstractModel):
    "TRANSFERÊNCIA DE SALDOS DO PLANO DE CONTAS ANTERIOR"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.i157"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 5

    COD_CTA = fields.Char(
        string="Código da conta analítica do plano",
        required=True,
        help="Código da conta analítica do plano de contas anterior.",
    )

    COD_CCUS = fields.Char(
        string="Código do centro de custos do plano",
        help="Código do centro de custos do plano de contas anterior.",
    )

    VL_SLD_INI = fields.Monetary(
        string="Valor do saldo inicial do período",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_DC_INI = fields.Char(
        string="Indicador da situação do saldo inicial",
        sped_length="1",
        help=("Indicador da situação do saldo inicial: D - Devedor; C - Credor."),
    )

    VL_SLD_INI_MF = fields.Monetary(
        string="Valor do saldo inicial do período (VL_SLD_INI_MF)",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do saldo inicial do período em moeda funcional, convertido "
            "para reais."
        ),
    )

    IND_DC_INI_MF = fields.Char(
        string="IND_DC_INI_MF",
        sped_length="1",
        help=(
            "Indicador da situação do saldo inicial em moeda funcional: D - "
            "Devedor; C - Credor."
        ),
    )

    reg_I157_ids_RegistroI155_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.i155",
        string="DETALHES DOS SALDOS PERIÓDICOS",
        required=True,
        ondelete="cascade",
    )


class RegistroI200(models.AbstractModel):
    "LANÇAMENTO CONTÁBIL"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.i200"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 3

    NUM_LCTO = fields.Char(
        string="Número ou Código de identificação único",
        required=True,
        help=("Número ou Código de identificação único do lançamento contábil."),
    )

    DT_LCTO = fields.Date(string="Data do lançamento", required=True, sped_length="8")

    VL_LCTO = fields.Monetary(
        string="Valor do lançamento",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_LCTO = fields.Char(
        string="Indicador do tipo de lançamento: N",
        required=True,
        sped_length="1",
        help=(
            "Indicador do tipo de lançamento: N - Lançamento normal (todos os "
            "lançamentos, exceto os de encerramento das contas de resultado); "
            "E - Lançamento de encerramento de contas de resultado. X – "
            "Lançamento extemporâneo."
        ),
    )

    DT_LCTO_EXT = fields.Date(
        string="O Data de ocorrência dos fatos objeto",
        sped_length="8",
        help=(
            "O Data de ocorrência dos fatos objeto do lançamento extemporâneo."
            " bservação: Caso não seja possível precisar a data a que se "
            "refiram os fatos do lançamento extemporâneo, informar a data de "
            "encerramento do exercício em que ocorreram esses fatos."
        ),
    )

    VL_LCTO_MF = fields.Monetary(
        string="Valor do lançamento em moeda funcional",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor do lançamento em moeda funcional, convertido para reais."),
    )

    reg_I200_ids_RegistroI010_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.i010",
        string="IDENTIFICAÇÃO DA ESCRITURAÇÃO CONTÁBIL",
        required=True,
        ondelete="cascade",
    )

    reg_I250_ids = fields.One2many(
        "l10n_br_sped.ecd.i250",
        "reg_I250_ids_RegistroI200_id",
        string="I250 PARTIDAS DO LANÇAMENTO CONTÁBIL",
        sped_card="1:N",
        sped_required=True,
    )


class RegistroI250(models.AbstractModel):
    "PARTIDAS DO LANÇAMENTO CONTÁBIL"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.i250"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 4

    COD_CTA = fields.Char(
        string="Código da conta analítica debitada/creditada", required=True
    )

    COD_CCUS = fields.Char(string="Código do centro de custos")

    VL_DC = fields.Monetary(
        string="Valor da partida",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_DC = fields.Char(
        string="Indicador da natureza da partida: D",
        required=True,
        sped_length="1",
        help="Indicador da natureza da partida: D - Débito; C - Crédito.",
    )

    NUM_ARQ = fields.Char(
        string="Número",
        help=("Número, Código ou caminho de localização dos documentos " "arquivados."),
    )

    COD_HIST_PAD = fields.Char(
        string="Código do histórico padronizado",
        help="Código do histórico padronizado, conforme tabela I075.",
    )

    HIST = fields.Char(
        string="O Histórico completo da partida",
        sped_length="65535",
        help=(
            "O Histórico completo da partida ou histórico complementar. "
            "bservação: Caso o lançamento seja do tipo “X” – lançamento "
            "extemporâneo - em qualquer das formas de retificação, o histórico"
            " do lançamento extemporâneo deve especificar o motivo da "
            "correção, a data e o número do lançamento de origem (item 32 do "
            "ITG 2000 (R1))."
        ),
    )

    COD_PART = fields.Char(
        string="Código de identificação do participante",
        help=(
            "Código de identificação do participante na partida conforme "
            "tabela 0150 (preencher somente quando identificado o tipo de "
            "participação no registro 0180)."
        ),
    )

    VL_DC_MF = fields.Monetary(
        string="Valor da partida em moeda funcional",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor da partida em moeda funcional, convertido para reais.",
    )

    IND_DC_MF = fields.Char(
        string="Indicador da natureza da partida",
        sped_length="1",
        help=(
            "Indicador da natureza da partida em moeda funcional: D - Débito; "
            "C - Crédito."
        ),
    )

    reg_I250_ids_RegistroI200_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.i200",
        string="LANÇAMENTO CONTÁBIL",
        required=True,
        ondelete="cascade",
    )


class RegistroI300(models.AbstractModel):
    "BALANCETES DIÁRIOS – IDENTIFICAÇÃO DA DATA"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.i300"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 3

    DT_BCTE = fields.Date(string="Data do balancete", required=True, sped_length="8")

    reg_I300_ids_RegistroI010_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.i010",
        string="IDENTIFICAÇÃO DA ESCRITURAÇÃO CONTÁBIL",
        required=True,
        ondelete="cascade",
    )

    reg_I310_ids = fields.One2many(
        "l10n_br_sped.ecd.i310",
        "reg_I310_ids_RegistroI300_id",
        string="I310 DETALHES DO BALANCETE DIÁRIO",
        sped_card="1:N",
        sped_required=True,
    )


class RegistroI310(models.AbstractModel):
    "DETALHES DO BALANCETE DIÁRIO"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.i310"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 4

    COD_CTA = fields.Char(
        string="Código da conta analítica debitada/creditada", required=True
    )

    COD_CCUS = fields.Char(string="Código do centro de custos")

    VAL_DEBD = fields.Monetary(
        string="Total dos débitos do dia",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VAL_CREDD = fields.Monetary(
        string="Total dos créditos do dia",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VAL_DEB_MF = fields.Monetary(
        string="Total dos débitos do dia em moeda funcional",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Total dos débitos do dia em moeda funcional, convertido para " "reais."),
    )

    VAL_CRED_MF = fields.Monetary(
        string="Total dos créditos do dia em moeda funcional",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Total dos créditos do dia em moeda funcional, convertido para " "reais."
        ),
    )

    reg_I310_ids_RegistroI300_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.i300",
        string="BALANCETES DIÁRIOS – IDENTIFICAÇÃO DA DATA",
        required=True,
        ondelete="cascade",
    )


class RegistroI350(models.AbstractModel):
    """SALDOS DAS CONTAS DE RESULTADO ANTES DO ENCERRAMENTO – IDENTIFICAÇÃO DA
    DATA"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.i350"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 3

    DT_RES = fields.Date(
        string="Data da apuração do resultado", required=True, sped_length="8"
    )

    reg_I350_ids_RegistroI010_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.i010",
        string="IDENTIFICAÇÃO DA ESCRITURAÇÃO CONTÁBIL",
        required=True,
        ondelete="cascade",
    )

    reg_I355_ids = fields.One2many(
        "l10n_br_sped.ecd.i355",
        "reg_I355_ids_RegistroI350_id",
        string="I355",
        sped_card="1:N",
        sped_required=True,
        help=(
            "I355 DOS SALDOS DAS CONTAS DE RESULTADO ANTES DO DETALHES " "ENCERRAMENTO"
        ),
    )


class RegistroI355(models.AbstractModel):
    "DOS SALDOS DAS CONTAS DE RESULTADO ANTES DO DETALHES ENCERRAMENTO"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.i355"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 4

    COD_CTA = fields.Char(
        string="Código da conta analítica de resultado", required=True
    )

    COD_CCUS = fields.Char(string="Código do centro de custos")

    VL_CTA = fields.Monetary(
        string="Valor do saldo final antes do lançamento",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor do saldo final antes do lançamento de encerramento.",
    )

    IND_DC = fields.Char(
        string="Indicador da situação do saldo final",
        required=True,
        sped_length="1",
        help=("Indicador da situação do saldo final: D - Devedor; C - Credor."),
    )

    VL_CTA_MF = fields.Monetary(
        string="VL_CTA_MF",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do saldo final antes do lançamento de encerramento em moeda"
            " funcional, convertido para reais."
        ),
    )

    IND_DC_MF = fields.Char(
        string="Indicador da situação do saldo final (IND_DC_MF)",
        sped_length="1",
        help=(
            "Indicador da situação do saldo final em moeda funcional: D - "
            "Devedor; C - Credor."
        ),
    )

    reg_I355_ids_RegistroI350_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.i350",
        string="reg_I355_ids_RegistroI350_id",
        required=True,
        ondelete="cascade",
        help=(
            "SALDOS DAS CONTAS DE RESULTADO ANTES DO ENCERRAMENTO – "
            "IDENTIFICAÇÃO DA DATA"
        ),
    )


class RegistroI500(models.AbstractModel):
    """PARÂMETROS DE IMPRESSÃO/VISUALIZAÇÃO DO LIVRO RAZÃO AUXILIAR COM LEIAUTE
    PARAMETRIZÁVEL"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.i500"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 3

    TAM_FONTE = fields.Char(
        string="Tamanho da fonte",
        required=True,
        xsd_type="numeric_code",
        sped_length="2",
    )

    reg_I500_ids_RegistroI010_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.i010",
        string="IDENTIFICAÇÃO DA ESCRITURAÇÃO CONTÁBIL",
        required=True,
        ondelete="cascade",
    )


class RegistroI510(models.AbstractModel):
    """DEFINIÇÃO DOS CAMPOS DO LIVRO RAZÃO AUXILIAR COM LEIAUTE
    PARAMETRIZÁVEL"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.i510"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 3

    NM_CAMPO = fields.Char(
        string="Nome do campo",
        required=True,
        sped_length="16",
        help="Nome do campo, sem espaços em branco ou caractere especial.",
    )

    DESC_CAMPO = fields.Char(
        string="Descrição do campo",
        required=True,
        sped_length="5",
        help=("Descrição do campo (utilizada na visualização do Livro Auxiliar)"),
    )

    TIPO_CAMPO = fields.Char(
        string="Tipo do campo",
        required=True,
        sped_length="1",
        help="Tipo do campo: “N” – Numérico; “C” – Caractere.",
    )

    TAM_CAMPO = fields.Char(
        string="Tamanho do campo",
        required=True,
        xsd_type="numeric_code",
        sped_length="3",
    )

    DEC_CAMPO = fields.Char(
        string="Quantidade de casas decimais para campos tipo “N”",
        xsd_type="numeric_code",
        sped_length="2",
    )

    COL_CAMPO = fields.Char(
        string="Largura da coluna no relatório",
        required=True,
        xsd_type="numeric_code",
        sped_length="3",
        help=("Largura da coluna no relatório (em quantidade de caracteres)."),
    )

    reg_I510_ids_RegistroI010_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.i010",
        string="IDENTIFICAÇÃO DA ESCRITURAÇÃO CONTÁBIL",
        required=True,
        ondelete="cascade",
    )


class RegistroI550(models.AbstractModel):
    "DETALHES DO LIVRO RAZÃO AUXILIAR COM LEIAUTE PARAMETRIZÁVEL"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.i550"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 3

    reg_I550_ids_RegistroI010_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.i010",
        string="IDENTIFICAÇÃO DA ESCRITURAÇÃO CONTÁBIL",
        required=True,
        ondelete="cascade",
    )

    reg_I555_ids = fields.One2many(
        "l10n_br_sped.ecd.i555",
        "reg_I555_ids_RegistroI550_id",
        string="I555",
        sped_card="0:N",
        sped_required=True,
        help=("I555 TOTAIS NO LIVRO RAZÃO AUXILIAR COM LEIAUTE PARAMETRIZÁVEL"),
    )


class RegistroI555(models.AbstractModel):
    "TOTAIS NO LIVRO RAZÃO AUXILIAR COM LEIAUTE PARAMETRIZÁVEL"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.i555"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 4

    reg_I555_ids_RegistroI550_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.i550",
        string="reg_I555_ids_RegistroI550_id",
        required=True,
        ondelete="cascade",
        help="DETALHES DO LIVRO RAZÃO AUXILIAR COM LEIAUTE PARAMETRIZÁVEL",
    )


class RegistroJ005(models.AbstractModel):
    "DEMONSTRAÇÕES CONTÁBEIS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.j005"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 2

    DT_INI = fields.Date(
        string="O Data inicial das demonstrações contábeis",
        required=True,
        sped_length="8",
        help=(
            "O Data inicial das demonstrações contábeis. bservação: A data "
            "inicial das demonstrações deve ser a data posterior ao último "
            "encerramento do exercício, mesmo que essa data não esteja no "
            "período da ECD transmitida. Exemplo: Data do Último Encerramento "
            "do Exercício: 31/12/2021 Data Inicial das Demonstrações "
            "Contábeis: 01/01/2022"
        ),
    )

    DT_FIN = fields.Date(
        string="Data final das demonstrações contábeis", required=True, sped_length="8"
    )

    ID_DEM = fields.Integer(
        string="Identificação das demonstrações",
        required=True,
        sped_length="1",
        help=(
            "Identificação das demonstrações: 1 – demonstrações contábeis da "
            "pessoa jurídica a que se refere a escrituração (inclusive "
            "Matrix/Filiais); 2 – demonstrações consolidadas ou de outras "
            "pessoas jurídicas."
        ),
    )

    CAB_DEM = fields.Char(string="Cabeçalho das demonstrações", sped_length="65535")

    reg_J100_ids = fields.One2many(
        "l10n_br_sped.ecd.j100",
        "reg_J100_ids_RegistroJ005_id",
        string="J100 BALANÇO PATRIMONIAL",
        sped_card="1:N",
        sped_required=True,
    )

    reg_J150_ids = fields.One2many(
        "l10n_br_sped.ecd.j150",
        "reg_J150_ids_RegistroJ005_id",
        string="J150 DEMONSTRAÇÃO DO RESULTADO DO EXERCÍCIO",
        sped_card="1:N",
        sped_required=True,
        help="J150 DEMONSTRAÇÃO DO RESULTADO DO EXERCÍCIO (DRE)",
    )

    reg_J210_ids = fields.One2many(
        "l10n_br_sped.ecd.j210",
        "reg_J210_ids_RegistroJ005_id",
        string="J210",
        sped_card="1:N",
        sped_required=True,
        help=(
            "J210 DE OU DEMONSTRAÇÃO LUCROS PREJUÍZOS ACUMULADOS DO "
            "(DLPA)/DEMONSTRAÇÃO DE MUTAÇÕES PATRIMÔNIO LÍQUIDO (DMPL)"
        ),
    )

    reg_J800_ids = fields.One2many(
        "l10n_br_sped.ecd.j800",
        "reg_J800_ids_RegistroJ005_id",
        string="J800 OUTRAS INFORMAÇÕES",
        sped_card="1:N",
        sped_required=True,
    )

    reg_J801_ids = fields.One2many(
        "l10n_br_sped.ecd.j801",
        "reg_J801_ids_RegistroJ005_id",
        string="J801",
        sped_card="0:1",
        sped_required=True,
        help="J801 TERMO DE VERIFICAÇÃO PARA FINS DE SUBSTITUIÇÃO DA ECD",
    )


class RegistroJ100(models.AbstractModel):
    "BALANÇO PATRIMONIAL"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.j100"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 3

    COD_AGL = fields.Char(
        string="O Código de aglutinação atribuído",
        required=True,
        help=(
            "O Código de aglutinação atribuído pela pessoa jurídica. "
            "bservação: Caso o indicador de código de aglutinação seja "
            "totalizador (T), o código de aglutinação deve ser informado, mas "
            "não deve estar cadastrado no registro I052 – os códigos de "
            "aglutinação informados no registro I052 são somente"
        ),
    )

    IND_COD_AGL = fields.Char(
        string="Indicador do tipo de código de aglutinação",
        required=True,
        sped_length="1",
        help=(
            "Indicador do tipo de código de aglutinação das linhas: T – "
            "Totalizador (nível que totaliza um ou mais níveis inferiores da "
            "demonstração financeira) D – Detalhe (nível mais detalhado da "
            "demonstração financeira)"
        ),
    )

    NIVEL_AGL = fields.Integer(
        string="Nível do Código de aglutinação",
        required=True,
        help=(
            "Nível do Código de aglutinação (mesmo conceito do plano de contas"
            " – Registro I050)."
        ),
    )

    COD_AGL_SUP = fields.Char(
        string="Código de aglutinação sintético/grupo de código",
        help=(
            "Código de aglutinação sintético/grupo de código de aglutinação de"
            " nível superior."
        ),
    )

    IND_GRP_BAL = fields.Char(
        string="Indicador de grupo do balanço",
        required=True,
        sped_length="1",
        help=(
            "Indicador de grupo do balanço: A – Ativo; P – Passivo e "
            "Patrimônio Líquido."
        ),
    )

    DESCR_COD_AGL = fields.Char(
        string="Descrição do Código de aglutinação", required=True
    )

    VL_CTA_INI = fields.Monetary(
        string="Valor inicial do código de aglutinação",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor inicial do código de aglutinação no Balanço Patrimonial no "
            "exercício informado, ou de período definido em norma específica."
        ),
    )

    IND_DC_CTA_INI = fields.Char(
        string="Indicador da situação do saldo inicial informado",
        required=True,
        sped_length="1",
        help=(
            "Indicador da situação do saldo inicial informado no campo "
            "anterior: D - Devedor; C – Credor."
        ),
    )

    VL_CTA_FIN = fields.Monetary(
        string="Valor final do código de aglutinação",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor final do código de aglutinação no Balanço Patrimonial no "
            "exercício informado, ou de período definido em norma específica."
        ),
    )

    IND_DC_CTA_FIN = fields.Char(
        string="Indicador da situação do saldo final informado",
        required=True,
        sped_length="1",
        help=(
            "Indicador da situação do saldo final informado no campo anterior:"
            " D - Devedor; C – Credor."
        ),
    )

    NOTA_EXP_REF = fields.Char(
        string="Referência a numeração",
        sped_length="12",
        help=(
            "Referência a numeração das notas explicativas relativas às "
            "demonstrações contábeis."
        ),
    )

    reg_J100_ids_RegistroJ005_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.j005",
        string="DEMONSTRAÇÕES CONTÁBEIS",
        required=True,
        ondelete="cascade",
    )


class RegistroJ150(models.AbstractModel):
    "DEMONSTRAÇÃO DO RESULTADO DO EXERCÍCIO (DRE)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.j150"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 3

    NU_ORDEM = fields.Char(
        string="O Número de ordem da linha na visualização",
        required=True,
        xsd_type="numeric_code",
        sped_length="19",
        help=(
            "O Número de ordem da linha na visualização da demonstração. rdem "
            "de apresentação da linha na visualização do registro J150."
        ),
    )

    COD_AGL = fields.Char(
        string="O Código de aglutinação das linhas",
        help=(
            "O Código de aglutinação das linhas, atribuído pela pessoa "
            "jurídica. bservação: Caso o indicador de código de aglutinação "
            "seja totalizador (T), o código de aglutinação deve ser informado,"
            " mas não deve estar cadastrado no"
        ),
    )

    IND_COD_AGL = fields.Char(
        string="Indicador do tipo de código de aglutinação",
        required=True,
        sped_length="1",
        help=(
            "Indicador do tipo de código de aglutinação das linhas: T – "
            "Totalizador (nível que totaliza um ou mais níveis inferiores da "
            "demonstração financeira) D – Detalhe (nível mais detalhado da "
            "demonstração financeira)"
        ),
    )

    NIVEL_AGL = fields.Integer(
        string="Nível do Código de aglutinação",
        required=True,
        help=(
            "Nível do Código de aglutinação (mesmo conceito do plano de contas"
            " – Registro I050)."
        ),
    )

    COD_AGL_SUP = fields.Char(
        string="Código de aglutinação sintético/grupo de código",
        help=(
            "Código de aglutinação sintético/grupo de código de aglutinação de"
            " nível superior."
        ),
    )

    DESCR_COD_AGL = fields.Char(
        string="Descrição do Código de aglutinação", required=True
    )

    VL_CTA_INI_ = fields.Monetary(
        string="Valor do saldo final da linha",
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do saldo final da linha no período imediatamente anterior "
            "(saldo final da DRE anterior)."
        ),
    )

    IND_DC_CTA_INI = fields.Char(
        string="Indicador da situação do valor final da linha",
        sped_length="1",
        help=(
            "Indicador da situação do valor final da linha no período "
            "imediatamente anterior: D – Devedor; C – Credor."
        ),
    )

    VL_CTA_FIN = fields.Monetary(
        string="Valor final da linha antes do encerramento",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor final da linha antes do encerramento do exercício.",
    )

    IND_DC_CTA_FIN = fields.Char(
        string="Indicador da situação do valor final",
        required=True,
        sped_length="1",
        help=(
            "Indicador da situação do valor final da linha antes do "
            "encerramento do exercício: D – Devedor; C – Credor."
        ),
    )

    IND_GRP_DRE = fields.Char(
        string="D R Indicador de grupo da DRE",
        required=True,
        sped_length="1",
        help=(
            "D R Indicador de grupo da DRE: – Linha totalizadora ou de detalhe"
            " da demonstração que, por sua natureza de despesa, represente "
            "redução do lucro. – Linha totalizadora ou de detalhe da "
            "demonstração que, por sua natureza de receita, represente "
            "incremento do lucro."
        ),
    )

    NOTA_EXP_REF = fields.Char(
        string="Referência a numeração",
        sped_length="12",
        help=(
            "Referência a numeração das notas explicativas relativas às "
            "demonstrações contábeis."
        ),
    )

    reg_J150_ids_RegistroJ005_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.j005",
        string="DEMONSTRAÇÕES CONTÁBEIS",
        required=True,
        ondelete="cascade",
    )


class RegistroJ210(models.AbstractModel):
    """DE OU DEMONSTRAÇÃO LUCROS PREJUÍZOS ACUMULADOS DO (DLPA)/DEMONSTRAÇÃO DE
    MUTAÇÕES PATRIMÔNIO LÍQUIDO (DMPL)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.j210"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 3

    IND_TIP = fields.Char(
        string="Indicador do tipo de demonstração",
        required=True,
        xsd_type="numeric_code",
        sped_length="1",
        help=(
            "Indicador do tipo de demonstração: 0 – DLPA – Demonstração de "
            "Lucro ou Prejuízos Acumulados 1 – DMPL – Demonstração de Mutações"
            " do Patrimônio Líquido"
        ),
    )

    COD_AGL = fields.Char(
        string="Código de aglutinação das contas analíticas",
        required=True,
        help=(
            "Código de aglutinação das contas analíticas do patrimônio "
            "líquido, atribuído pela empresa."
        ),
    )

    DESCR_COD_AGL = fields.Char(
        string="Descrição do código de aglutinação", required=True
    )

    VL_CTA_INI = fields.Monetary(
        string="Saldo inicial do código de aglutinação",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Saldo inicial do código de aglutinação na demonstração do período"
            " informado."
        ),
    )

    IND_DC_CTA_INI = fields.Char(
        string="Indicador da situação do saldo inicial informado",
        required=True,
        sped_length="1",
        help=(
            "Indicador da situação do saldo inicial informado no campo "
            "anterior: D – Devedor C – Credor"
        ),
    )

    VL_CTA_FIN = fields.Monetary(
        string="Saldo final do código de aglutinação",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Saldo final do código de aglutinação na demonstração do período "
            "informado."
        ),
    )

    IND_DC_CTA_FIN = fields.Char(
        string="Indicador da situação do saldo final informado",
        required=True,
        sped_length="1",
        help=(
            "Indicador da situação do saldo final informado no campo anterior:"
            " D – Devedor C – Credor"
        ),
    )

    NOTAS_EXP_REF = fields.Char(
        string="Referência à numeração",
        sped_length="12",
        help=(
            "Referência à numeração das notas explicativas relativas às "
            "demonstrações contábeis."
        ),
    )

    reg_J210_ids_RegistroJ005_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.j005",
        string="DEMONSTRAÇÕES CONTÁBEIS",
        required=True,
        ondelete="cascade",
    )

    reg_J215_ids = fields.One2many(
        "l10n_br_sped.ecd.j215",
        "reg_J215_ids_RegistroJ210_id",
        string="J215",
        sped_card="1:N",
        sped_required=True,
        help=(
            "J215 FATO CONTÁBIL QUE ALTERA A CONTA LUCROS ACUMULADOS OU A "
            "CONTA PREJUÍZOS ACUMULADOS OU O PATRIMÔNIO LÍQUIDO"
        ),
    )


class RegistroJ215(models.AbstractModel):
    """FATO CONTÁBIL QUE ALTERA A CONTA LUCROS ACUMULADOS OU A CONTA PREJUÍZOS
    ACUMULADOS OU O PATRIMÔNIO LÍQUIDO"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.j215"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 4

    COD_HIST_FAT = fields.Char(
        string="Código do histórico do fato contábil", required=True
    )

    DESC_FAT = fields.Char(string="Descrição do Fato Contábil", required=True)

    VL_FAT_CONT = fields.Monetary(
        string="Valor do fato contábil",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_DC_FAT = fields.Char(
        string="Indicador de situação do saldo informado",
        required=True,
        sped_length="1",
        help=(
            "Indicador de situação do saldo informado no campo anterior: D – "
            "Devedor C – Credor P – Subtotal ou total positivo N – Subtotal ou"
            " total negativo"
        ),
    )

    reg_J215_ids_RegistroJ210_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.j210",
        string="DE OU DEMONSTRAÇÃO LUCROS PREJUÍZOS ACUMULADOS DO",
        required=True,
        ondelete="cascade",
        help=(
            "DE OU DEMONSTRAÇÃO LUCROS PREJUÍZOS ACUMULADOS DO "
            "(DLPA)/DEMONSTRAÇÃO DE MUTAÇÕES PATRIMÔNIO LÍQUIDO (DMPL)"
        ),
    )


class RegistroJ800(models.AbstractModel):
    "OUTRAS INFORMAÇÕES"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.j800"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 3

    TIPO_DOC = fields.Char(
        string="Tipo de documento: 001",
        required=True,
        sped_length="3",
        help=(
            "Tipo de documento: 001: Demonstração do Resultado Abrangente do "
            "Período 002: Demonstração dos Fluxos de Caixa 003: Demonstração "
            "do Valor Adicionado 010: Notas Explicativas 011: Relatório da "
            "Administração 012: Parecer dos Auditores 099: Outros"
        ),
    )

    DESC_RTF = fields.Char(string="Descrição do arquivo .rtf")

    HASH_RTF = fields.Char(
        string="Hash do arquivo .rtf incluído",
        sped_length="41",
        help=(
            "Hash do arquivo .rtf incluído. Observação: O HASH é preenchido "
            "automaticamente pelo sistema (não é editável e não pode ser "
            "alterado)."
        ),
    )

    ARQ_RTF = fields.Char(
        string="Sequência de bytes que representem",
        required=True,
        sped_length="Não existe limite de tamanho",
        help=(
            "Sequência de bytes que representem um único arquivo no formato "
            "RTF (Rich Text Format)."
        ),
    )

    IND_FIM_RTF = fields.Char(
        string="Indicador de fim do arquivo RTF",
        required=True,
        sped_length="7",
        help=("Indicador de fim do arquivo RTF. Texto fixo contendo “J800FIM”."),
    )

    reg_J800_ids_RegistroJ005_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.j005",
        string="DEMONSTRAÇÕES CONTÁBEIS",
        required=True,
        ondelete="cascade",
    )


class RegistroJ801(models.AbstractModel):
    "TERMO DE VERIFICAÇÃO PARA FINS DE SUBSTITUIÇÃO DA ECD"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.j801"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 3

    TIPO_DOC = fields.Char(
        string="Tipo de documento: 001",
        required=True,
        sped_length="3",
        help=(
            "Tipo de documento: 001: Termo de Verificação para Fins "
            "Substituição da ECD"
        ),
    )

    DESC_RTF = fields.Char(string="Descrição do arquivo .rtf")

    COD_MOT_SUBS = fields.Char(
        string="O Código do motivo da substituição",
        required=True,
        sped_length="1",
        help=(
            "O Código do motivo da substituição: 001 – Mudanças de saldos das "
            "contas que não podem ser realizadas por meio de lançamentos "
            "extemporâneos 002 – Alteração de assinatura 003 – Alteração de "
            "demonstrações contábeis 004 – Alteração da forma de escrituração "
            "contábil 005 – Alteração do número do livro 099 – Outros "
            "bservação: O código a ser adotado deve ser aquele cujo motivo é o"
            " preponderante na substituição da ECD."
        ),
    )

    HASH_RTF = fields.Char(
        string="Hash do arquivo .rtf incluído",
        sped_length="41",
        help=(
            "Hash do arquivo .rtf incluído. Observação: O HASH é preenchido "
            "automaticamente pelo sistema (não é editável e não pode ser "
            "alterado)."
        ),
    )

    ARQ_RTF = fields.Char(
        string="Sequência de bytes que representem",
        required=True,
        sped_length="Não existe limite de tamanho",
        help=(
            "Sequência de bytes que representem um único arquivo no formato "
            "RTF (Rich Text Format)."
        ),
    )

    IND_FIM_RTF = fields.Char(
        string="Indicador de fim do arquivo RTF",
        required=True,
        sped_length="7",
        help=("Indicador de fim do arquivo RTF. Texto fixo contendo “J801FIM”."),
    )

    reg_J801_ids_RegistroJ005_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.j005",
        string="DEMONSTRAÇÕES CONTÁBEIS",
        required=True,
        ondelete="cascade",
    )


class RegistroJ900(models.AbstractModel):
    "TERMO DE ENCERRAMENTO"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.j900"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 2

    DNRC_ENCER = fields.Char(
        string="Texto fixo contendo “TERMO DE ENCERRAMENTO”",
        required=True,
        sped_length="21",
    )

    NUM_ORD = fields.Integer(
        string="Número de ordem do instrumento de escrituração", required=True
    )

    NAT_LIVRO = fields.Char(
        string="Natureza do livro; finalidade a que se destinou",
        required=True,
        sped_length="8",
        help=("Natureza do livro; finalidade a que se destinou o instrumento."),
    )

    NOME = fields.Char(string="Nome empresarial", required=True, sped_length="(*)")

    QTD_LIN = fields.Integer(
        string="Quantidade total de linhas do arquivo digital", required=True
    )

    DT_INI_ESCR = fields.Date(
        string="Data de início da escrituração", required=True, sped_length="8"
    )

    DT_FIN_ESCR = fields.Date(
        string="Data de término da escrituração", required=True, sped_length="8"
    )

    reg_J930_ids = fields.One2many(
        "l10n_br_sped.ecd.j930",
        "reg_J930_ids_RegistroJ900_id",
        string="J930 SIGNATÁRIOS DA ESCRITURAÇÃO",
        sped_card="1:N",
        sped_required=True,
    )

    reg_J932_ids = fields.One2many(
        "l10n_br_sped.ecd.j932",
        "reg_J932_ids_RegistroJ900_id",
        string="J932",
        sped_card="1:N",
        sped_required=True,
        help=(
            "J932 SIGNATÁRIOS DO TERMO DE VERIFICAÇÃO PARA FINS DE "
            "SUBSTITUIÇÃO DA ECD"
        ),
    )

    reg_J935_ids = fields.One2many(
        "l10n_br_sped.ecd.j935",
        "reg_J935_ids_RegistroJ900_id",
        string="J935 IDENTIFICAÇÃO DOS AUDITORES INDEPENDENTES",
        sped_card="1:N",
        sped_required=True,
    )


class RegistroJ930(models.AbstractModel):
    "SIGNATÁRIOS DA ESCRITURAÇÃO"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.j930"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 3

    IDENT_NOM = fields.Char(string="Nome do signatário", required=True)

    IDENT_CPF_CNPJ = fields.Char(
        string="CPF ou CNPJ",
        required=True,
        xsd_type="numeric_code",
        sped_length="CPF (11) CNPJ(14)",
    )

    IDENT_QUALIF = fields.Char(
        string="Qualificação do assinante",
        required=True,
        help="Qualificação do assinante, conforme tabela.",
    )

    COD_ASSIN = fields.Char(
        string="Código de qualificação do assinante",
        required=True,
        sped_length="3",
        help="Código de qualificação do assinante, conforme tabela.",
    )

    IND_CRC = fields.Char(
        string="Número de inscrição do contabilista",
        help=(
            "Número de inscrição do contabilista no Conselho Regional de "
            "Contabilidade."
        ),
    )

    EMAIL = fields.Char(string="Email do signatário", sped_length="6")

    FONE = fields.Char(string="Telefone do signatário", sped_length="14")

    UF_CRC = fields.Char(
        string="Indicação da unidade da federação que expediu",
        sped_length="2",
        help="Indicação da unidade da federação que expediu o CRC.",
    )

    NUM_SEQ_CRC = fields.Char(
        string="Número da Certidão de Regularidade Profissional",
        help=(
            "Número da Certidão de Regularidade Profissional do Contador no "
            "seguinte formato: UF/ano/número"
        ),
    )

    DT_CRC = fields.Date(
        string="Data de validade da Certidão",
        sped_length="8",
        help=(
            "Data de validade da Certidão de Regularidade Profissional do " "Contador"
        ),
    )

    IND_RESP_LEGAL = fields.Char(
        string="Identificação do signatário que será validado",
        required=True,
        sped_length="1",
        help=(
            "Identificação do signatário que será validado como responsável "
            "pela assinatura da ECD, conforme atos societários: S – Sim N – "
            "Não"
        ),
    )

    reg_J930_ids_RegistroJ900_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.j900",
        string="TERMO DE ENCERRAMENTO",
        required=True,
        ondelete="cascade",
    )


class RegistroJ932(models.AbstractModel):
    """SIGNATÁRIOS DO TERMO DE VERIFICAÇÃO PARA FINS DE SUBSTITUIÇÃO DA ECD"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.j932"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 3

    IDENT_NOM_T = fields.Char(
        string="Nome do signatário do termo de verificação", required=True
    )

    IDENT_CPF_CNPJ_T = fields.Char(
        string="CPF ou CNPJ do assinante do termo de verificação",
        required=True,
        xsd_type="numeric_code",
        sped_length="CPF (11) CNPJ(14)",
    )

    IDENT_QUALIF_T = fields.Char(
        string="Qualificação do assinante do termo de verificação",
        required=True,
        help=("Qualificação do assinante do termo de verificação, conforme " "tabela."),
    )

    COD_ASSIN_T = fields.Char(
        string="Código de qualificação do assinante do termo",
        required=True,
        sped_length="3",
        help=(
            "Código de qualificação do assinante do termo de verificação, "
            "conforme tabela."
        ),
    )

    IND_CRC_T = fields.Char(string="Número de inscrição do contabilista no Conselho")

    EMAIL_T = fields.Char(string="Email do signatário", sped_length="6")

    FONE_T = fields.Char(string="Telefone do signatário", sped_length="14")

    UF_CRC_T = fields.Char(
        string="Indicação da unidade da federação que expediu",
        sped_length="2",
        help="Indicação da unidade da federação que expediu o CRC.",
    )

    NUM_SEQ_CRC_T = fields.Char(
        string="Número da Certidão de Regularidade Profissional",
        help=(
            "Número da Certidão de Regularidade Profissional do Contador no "
            "seguinte formato: UF/ano/número"
        ),
    )

    DT_CRC_T = fields.Date(
        string="Data de validade da Certidão",
        sped_length="8",
        help=(
            "Data de validade da Certidão de Regularidade Profissional do " "Contador"
        ),
    )

    reg_J932_ids_RegistroJ900_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.j900",
        string="TERMO DE ENCERRAMENTO",
        required=True,
        ondelete="cascade",
    )


class RegistroJ935(models.AbstractModel):
    "IDENTIFICAÇÃO DOS AUDITORES INDEPENDENTES"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.j935"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 3

    NI_CPF_CNPJ = fields.Char(
        string="CPF do auditor independente/CNPJ",
        required=True,
        sped_length="CPF (11) CNPJ (14)",
        help=(
            "CPF do auditor independente/CNPJ da pessoa jurídica de auditoria "
            "independente."
        ),
    )

    NOME_AUDITOR_FIRMA = fields.Char(
        string="Nome do auditor independente ou pessoa jurídica",
        required=True,
        help=(
            "Nome do auditor independente ou pessoa jurídica de auditoria "
            "independente."
        ),
    )

    COD_CVM_AUDITOR = fields.Char(string="Registro do auditor independente na CVM")

    reg_J935_ids_RegistroJ900_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.j900",
        string="TERMO DE ENCERRAMENTO",
        required=True,
        ondelete="cascade",
    )


class RegistroK030(models.AbstractModel):
    "PERÍODO DA ESCRITURAÇÃO CONTÁBIL CONSOLIDADA"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.k030"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 2

    DT_INI = fields.Date(
        string="Data inicial do período consolidado", required=True, sped_length="8"
    )

    DT_FIN = fields.Date(
        string="Data final do período consolidado", required=True, sped_length="8"
    )

    reg_K100_ids = fields.One2many(
        "l10n_br_sped.ecd.k100",
        "reg_K100_ids_RegistroK030_id",
        string="K100 RELAÇÃO DAS EMPRESAS CONSOLIDADAS",
        sped_card="0:N",
        sped_required=True,
    )


class RegistroK100(models.AbstractModel):
    "RELAÇÃO DAS EMPRESAS CONSOLIDADAS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.k100"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 3

    COD_PAIS = fields.Char(
        string="Código do país da empresa",
        required=True,
        xsd_type="numeric_code",
        sped_length="5",
        help=(
            "Código do país da empresa, conforme tabela do Banco Central do " "Brasil."
        ),
    )

    EMP_COD = fields.Char(
        string="Código de identificação da empresa participante",
        required=True,
        xsd_type="numeric_code",
        sped_length="4",
    )

    CNPJ = fields.Char(
        string="CNPJ",
        xsd_type="numeric_code",
        sped_length="8",
        help="CNPJ (somente os 8 primeiros dígitos).",
    )

    NOME = fields.Char(string="Nome empresarial", required=True)

    PER_PART = fields.Float(
        string="Percentual de participação total do conglomerado",
        required=True,
        sped_length="8",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help=(
            "Percentual de participação total do conglomerado na empresa no "
            "final do período consolidado. Observação: Neste campo, deve ser "
            "informado o percentual de participação acionária da empresa "
            "titular da ECD."
        ),
    )

    EVENTO = fields.Char(
        string="Evento societário ocorrido no período",
        required=True,
        sped_length="1",
        help="Evento societário ocorrido no período: S - Sim N – Não",
    )

    PER_CONS = fields.Float(
        string="Percentual de consolidação da empresa no final",
        required=True,
        sped_length="8",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help=(
            "Percentual de consolidação da empresa no final do período "
            "consolidado: Informar o percentual do resultado da empresa que "
            "foi para a consolidação."
        ),
    )

    DATA_INI_EMP = fields.Date(
        string="Data inicial do período da escrituração contábil",
        required=True,
        sped_length="8",
        help=(
            "Data inicial do período da escrituração contábil da empresa que "
            "foi consolidada."
        ),
    )

    DATA_FIN_EMP = fields.Date(
        string="Data final do período da escrituração contábil",
        required=True,
        sped_length="8",
        help=(
            "Data final do período da escrituração contábil da empresa que foi"
            " consolidada"
        ),
    )

    reg_K100_ids_RegistroK030_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.k030",
        string="PERÍODO DA ESCRITURAÇÃO CONTÁBIL CONSOLIDADA",
        required=True,
        ondelete="cascade",
    )

    reg_K110_ids = fields.One2many(
        "l10n_br_sped.ecd.k110",
        "reg_K110_ids_RegistroK100_id",
        string="K110 RELAÇÃO DOS EVENTOS SOCIETÁRIOS",
        sped_card="0:N",
        sped_required=True,
    )


class RegistroK110(models.AbstractModel):
    "RELAÇÃO DOS EVENTOS SOCIETÁRIOS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.k110"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 4

    EVENTO = fields.Integer(
        string="Evento societário ocorrido no período",
        required=True,
        sped_length="1",
        help=(
            "Evento societário ocorrido no período: 1 – Aquisição 2 – "
            "Alienação 3 – Fusão 4 – Cisão Parcial 5 – Cisão Total 6 – "
            "Incorporação 7 – Extinção 8 – Constituição"
        ),
    )

    DT_EVENTO = fields.Date(
        string="Data do evento societário", required=True, sped_length="8"
    )

    reg_K110_ids_RegistroK100_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.k100",
        string="RELAÇÃO DAS EMPRESAS CONSOLIDADAS",
        required=True,
        ondelete="cascade",
    )

    reg_K115_ids = fields.One2many(
        "l10n_br_sped.ecd.k115",
        "reg_K115_ids_RegistroK110_id",
        string="K115 EMPRESAS PARTICIPANTES DO EVENTO SOCIETÁRIO",
        sped_card="0:N",
        sped_required=True,
    )


class RegistroK115(models.AbstractModel):
    "EMPRESAS PARTICIPANTES DO EVENTO SOCIETÁRIO"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.k115"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 5

    EMP_COD_PART = fields.Char(
        string="Código da empresa envolvida na operação",
        required=True,
        xsd_type="numeric_code",
        sped_length="4",
    )

    COND_PART = fields.Integer(
        string="Condição da empresa relacionada à operação",
        required=True,
        sped_length="1",
        help=(
            "Condição da empresa relacionada à operação: 1 – Sucessora; 2 – "
            "Adquirente; 3 – Alienante."
        ),
    )

    PER_EVT = fields.Float(
        string="Percentual da empresa participante envolvida",
        required=True,
        sped_length="8",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Percentual da empresa participante envolvida na operação",
    )

    reg_K115_ids_RegistroK110_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.k110",
        string="RELAÇÃO DOS EVENTOS SOCIETÁRIOS",
        required=True,
        ondelete="cascade",
    )


class RegistroK200(models.AbstractModel):
    "PLANO DE CONTAS CONSOLIDADO"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.k200"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 2

    COD_NAT = fields.Char(
        string="Código da natureza da conta/grupo de contas",
        required=True,
        sped_length="2",
        help=(
            "Código da natureza da conta/grupo de contas, conforme tabela "
            "publicada pelo Sped."
        ),
    )

    IND_CTA = fields.Char(
        string="Indicador do tipo de conta: S",
        required=True,
        sped_length="1",
        help=(
            "Indicador do tipo de conta: S - Sintética (grupo de contas); A - "
            "Analítica (conta)."
        ),
    )

    NIVEL = fields.Integer(string="Nível da conta", required=True)

    COD_CTA = fields.Char(string="Código da conta", required=True)

    COD_CTA_SUP = fields.Char(string="Código da conta superior")

    CTA = fields.Char(string="Nome da conta", required=True)

    reg_K210_ids = fields.One2many(
        "l10n_br_sped.ecd.k210",
        "reg_K210_ids_RegistroK200_id",
        string="K210",
        sped_card="1:N",
        sped_required=True,
        help=("K210 MAPEAMENTO PARA O PLANO DE CONTAS DAS EMPRESAS CONSOLIDADAS"),
    )

    reg_K300_ids = fields.One2many(
        "l10n_br_sped.ecd.k300",
        "reg_K300_ids_RegistroK200_id",
        string="K300 SALDOS DAS CONTAS CONSOLIDADAS",
        sped_card="0:N",
        sped_required=True,
    )


class RegistroK210(models.AbstractModel):
    "MAPEAMENTO PARA O PLANO DE CONTAS DAS EMPRESAS CONSOLIDADAS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.k210"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 3

    COD_EMP = fields.Char(
        string="Código de identificação da empresa participante",
        required=True,
        xsd_type="numeric_code",
        sped_length="4",
    )

    COD_CTA_EMP = fields.Char(
        string="Código da conta da empresa participante", required=True
    )

    reg_K210_ids_RegistroK200_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.k200",
        string="PLANO DE CONTAS CONSOLIDADO",
        required=True,
        ondelete="cascade",
    )


class RegistroK300(models.AbstractModel):
    "SALDOS DAS CONTAS CONSOLIDADAS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.k300"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 3

    COD_CTA = fields.Char(string="Código da conta consolidada", required=True)

    VAL_AG = fields.Monetary(
        string="Valor absoluto aglutinado",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VAL_AG = fields.Char(
        string="Indicador da situação do valor aglutinado",
        required=True,
        sped_length="1",
        help=("Indicador da situação do valor aglutinado: D – Devedor C – Credor"),
    )

    VAL_EL = fields.Monetary(
        string="Valor absoluto das eliminações",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VAL_EL = fields.Char(
        string="Indicador da situação do valor eliminado",
        required=True,
        sped_length="1",
        help=("Indicador da situação do valor eliminado: D – Devedor C – Credor"),
    )

    VAL_CS = fields.Monetary(
        string="Valor absoluto consolidado",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor absoluto consolidado: VAL_CS = VAL_AG – VAL_EL",
    )

    IND_VAL_CS = fields.Char(
        string="Indicador da situação do valor consolidado",
        required=True,
        sped_length="1",
        help=("Indicador da situação do valor consolidado: D – Devedor C – " "Credor"),
    )

    reg_K300_ids_RegistroK200_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.k200",
        string="PLANO DE CONTAS CONSOLIDADO",
        required=True,
        ondelete="cascade",
    )

    reg_K310_ids = fields.One2many(
        "l10n_br_sped.ecd.k310",
        "reg_K310_ids_RegistroK300_id",
        string="K310",
        sped_card="0:N",
        sped_required=True,
        help=("K310 EMPRESAS DETENTORAS DAS PARCELAS DO VALOR ELIMINADO TOTAL"),
    )


class RegistroK310(models.AbstractModel):
    "EMPRESAS DETENTORAS DAS PARCELAS DO VALOR ELIMINADO TOTAL"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.k310"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 4

    EMP_COD_PARTE = fields.Char(
        string="Código da empresa detentora",
        required=True,
        xsd_type="numeric_code",
        sped_length="4",
        help=("Código da empresa detentora do valor aglutinado que foi eliminado"),
    )

    VALOR = fields.Monetary(
        string="Parcela do valor eliminado total",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VALOR = fields.Char(
        string="Indicador da situação do valor eliminado",
        required=True,
        sped_length="1",
        help=("Indicador da situação do valor eliminado: D – Devedor C – Credor"),
    )

    reg_K310_ids_RegistroK300_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.k300",
        string="SALDOS DAS CONTAS CONSOLIDADAS",
        required=True,
        ondelete="cascade",
    )

    reg_K315_ids = fields.One2many(
        "l10n_br_sped.ecd.k315",
        "reg_K315_ids_RegistroK310_id",
        string="K315",
        sped_card="0:N",
        sped_required=True,
        help=("K315 EMPRESAS CONTRAPARTES DAS PARCELAS DO VALOR ELIMINADO TOTAL"),
    )


class RegistroK315(models.AbstractModel):
    "EMPRESAS CONTRAPARTES DAS PARCELAS DO VALOR ELIMINADO TOTAL"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.ecd.9.k315"
    _inherit = "l10n_br_sped.mixin.ecd"
    _sped_level = 5

    EMP_COD_CONTRA = fields.Char(
        string="Código da empresa da contrapartida",
        required=True,
        xsd_type="numeric_code",
        sped_length="4",
    )

    COD_CONTRA = fields.Char(
        string="Código da conta consolidada da contrapartida", required=True
    )

    VALOR = fields.Monetary(
        string="Parcela da contrapartida do valor eliminado total",
        required=True,
        sped_length="19",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_VALOR = fields.Char(
        string="Indicador da situação do valor eliminado",
        required=True,
        sped_length="1",
        help=("Indicador da situação do valor eliminado: D – Devedor C – Credor"),
    )

    reg_K315_ids_RegistroK310_id = fields.Many2one(
        comodel_name="l10n_br_sped.ecd.k310",
        string="reg_K315_ids_RegistroK310_id",
        required=True,
        ondelete="cascade",
        help="EMPRESAS DETENTORAS DAS PARCELAS DO VALOR ELIMINADO TOTAL",
    )
