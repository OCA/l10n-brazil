# Copyright 2022 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo

"""
STRUCTURE SPED EFD_ICMS_IPI

<BLOCO 0>

  - 0002 CLASSIFICAÇÃO DO ESTABELECIMENTO INDUSTRIAL OU EQUIPARADO A INDUSTRIAL

  - 0005 DADOS COMPLEMENTARES DA ENTIDADE

  - 0015 DADOS DO CONTRIBUINTE SUBSTITUTO OU RESPONSÁVEL PELO ICMS DESTINO

  - 0100 DADOS DO CONTABILISTA

  - 0150 TABELA DE CADASTRO DO PARTICIPANTE
    ≡ 0175 Alteração da Tabela de Cadastro de Participante

  - 0190 IDENTIFICAÇÃO DAS UNIDADES DE MEDIDA

  - 0200 TABELA DE IDENTIFICAÇÃO DO ITEM
    ≡ 0205 Alteração do Item
    - 0206 Código de produto conforme Tabela ANP
    ≡ 0210 Consumo Específico Padronizado
    ≡ 0220 Fatores de Conversão de Unidades

  - 0300 CADASTRO DE BENS OU COMPONENTES DO ATIVO IMOBILIZADO
    - 0305 Informação sobre a Utilização do Bem

  - 0400 TABELA DE NATUREZA DA OPERAÇÃO/ PRESTAÇÃO

  - 0450 TABELA DE INFORMAÇÃO COMPLEMENTAR DO DOCUMENTO FISCAL

  - 0460 TABELA DE OBSERVAÇÕES DO LANÇAMENTO FISCAL

  - 0500 PLANO DE CONTAS CONTÁBEIS

  - 0600 CENTRO DE CUSTOS

<BLOCO B>

  - B020 NOTA FISCAL (CÓDIGO 01)
    ≡ B025 Detalhamento por combinação de alíquota e item da lista de serviços da Lei Complementar nº 116/2003

  - B030 NOTA FISCAL DE SERVIÇOS SIMPLIFICADA

  - B350 SERVIÇOS PRESTADOS POR INSITUIÇÕES FINANCEIRAS

  - B420 TOTALIZAÇÃO DOS VALORES DE SERVIÇOS PRESTADOS POR COMBINAÇÃO DE ALÍQUOTA E ITEM DA LISTA DE SERVIÇOS

  - B440 TOTALIZAÇÃO DOS VALORES RETIDOS

  - B460 DEDUÇÕES DO ISS

  - B470 APURAÇÃO DO ISS

  - B500 APURAÇÃO DO ISS SOCIEDADE UNIPROFISSIONAL
    ≡ B510 Uniprofissional – empregados e sócios

<BLOCO C>

  - C100 DOCUMENTO - NOTA FISCAL (CÓDIGO 01)
    - C101 Informação complementar dos documentos fiscais quando das operações interestaduais destinadas
    - C105 Operações com ICMS ST recolhido para UF diversa do destinatário do docu- mento fiscal
    ≡ C110 Complemento de Documento
      ≡ C111 
      ≡ C112 
      ≡ C113 
      ≡ C114 
      ≡ C115 
      ≡ C116 
    ≡ C120 Complemento de Documento
    - C130 Complemento de Documento - ISSQN
    - C140 Complemento de Documento - Fatura
      ≡ C141 
    - C160 Complemento de Documento
    ≡ C165 Complemento de Documento
    ≡ C170 Complemento de Documento
      ≡ C171 
      - C172 
      ≡ C173 
      ≡ C174 
      ≡ C175 
      ≡ C176 
      ≡ C177 
      - C178 
      - C179 
      - C180 
      ≡ C181 
    ≡ C185 Informações complementares das operações de sa- ída de mercadorias sujeitas
    ≡ C186 Informações complementares das operações de devolução de entradas de mercadorias sujeitas
    ≡ C190 Registro Analítico do Documento
      - C191 
    ≡ C195 Complemento do Registro Analítico
      ≡ C197 

  - C300 DOCUMENTO
    ≡ C310 Documentos Cancelados de Nota Fiscal de Venda a Consumidor
    ≡ C320 Registro Analítico das Notas Fiscais de Venda a Consumidor
      ≡ C321 
        - C330 

  - C350 NOTA FISCAL DE VENDA A CONSUMIDOR
    ≡ C370 Itens do documento (código 02)
      - C380 
    ≡ C390 Registro Analítico das Notas Fiscais de Venda a Consumidor

  - C400 EQUIPAMENTO ECF (CÓDIGO 02, 2D E 60)
    ≡ C405 Redução Z (código 02, 2D e 60)
      - C410 
      ≡ C420 
        ≡ C425 
          ≡ C430 
      ≡ C460 
        - C465 
        ≡ C470 
          - C480 
      ≡ C490 

  - C495 RESUMO MENSAL DE ITENS DO ECF POR ESTABELECIMENTO

  - C500 NOTA FISCAL/CONTA DE ENERGIA ELÉTRICA
    ≡ C510 Itens do Documento
    ≡ C590 Registro Analítico do Documento
      - C591 
    ≡ C595 Observações do Lançamento Fiscal
      ≡ C597 

  - C600 CONSOLIDAÇÃO DIÁRIA DE NOTAS FISCAIS/CONTAS DE ENERGIA ELÉTRICA
    ≡ C601 Documentos cancelados
    ≡ C610 Itens do Documento Consolidado
    ≡ C690 Registro Analítico dos Documentos

  - C700 CONSOLIDAÇÃO DOS DOCUMENTOS NOTA FISCAL/CONTA ENERGIA ELÉTRICA
    ≡ C790 Registro Analítico dos Documentos
      ≡ C791 

  - C800 REGISTRO CUPOM FISCAL ELETRÔNICO
    ≡ C810 Itens do documento do cupom fiscal eletrônico – SAT
      - C815 
    ≡ C850 Registro Analítico do CF-e

  - C860 IDENTIFICAÇÃO DO EQUIPAMENTO SAT-CF-E
    ≡ C870 Itens do documento do cupom fiscal eletrônico – SAT
      - C880 
    ≡ C890 Resumo diário de CF-e

<BLOCO D>

  - D100 NOTA FISCAL DE SERVIÇO DE TRANSPORTE
    - D101 Informação complementar dos documentos fiscais quando das prestações interestaduais destinadas
    ≡ D110 Itens do documento
      ≡ D120 
    ≡ D130 Complemento do Conhecimento Rodoviário de Cargas
    - D140 Complemento do Conhecimento Aquaviário de Cargas
    - D150 Complemento do Conhecimento Aéreo de Cargas
    ≡ D160 Carga Transportada
      - D161 
      ≡ D162 
    - D170 Complemento do Conhecimento Multimodal de Cargas
    ≡ D180 Modais (código 26)
    ≡ D190 Registro Analítico dos Documentos
    ≡ D195 Observações do lançamento
      ≡ D197 

  - D300 REGISTRO ANALÍTICO DOS BILHETES CONSOLIDADOS DE PASSAGEM RODOVIÁRIO
    ≡ D301 Documentos cancelados dos Bilhetes de Passagem Rodoviário
    ≡ D310 Complemento dos Bilhetes

  - D350 EQUIPAMENTO ECF
    ≡ D355 Redução Z
      - D360 
      ≡ D365 
        ≡ D370 
      ≡ D390 

  - D400 RESUMO DO MOVIMENTO DIÁRIO
    ≡ D410 Documentos Informados
      ≡ D411 
    ≡ D420 Complemento dos Documentos Informados

  - D500 NOTA FISCAL DE SERVIÇO DE COMUNICAÇÃO
    ≡ D510 Itens do Documento
    ≡ D530 Terminal Faturado
    ≡ D590 Registro Analítico do Documento

  - D600 CONSOLIDAÇÃO DA PRESTAÇÃO DE SERVIÇOS
    ≡ D610 Itens do Documento Consolidado
    ≡ D690 Registro Analítico dos Documentos

  - D695 CONSOLIDAÇÃO DA PRESTAÇÃO DE SERVIÇOS
    ≡ D696 Registro Analítico dos Documentos
      ≡ D697 

<BLOCO E>

  - E100 PERÍODO DE APURAÇÃO DO ICMS
    - E110 Apuração do ICMS
      ≡ E111 
        ≡ E112 
        ≡ E113 
      ≡ E115 
      ≡ E116 

  - E200 PERÍODO DE APURAÇÃO DO ICMS
    - E210 Apuração do ICMS
      ≡ E220 
        ≡ E230 
        ≡ E240 
      ≡ E250 

  - E300 PERÍODO DE APURAÇÃO DO ICMS DIFERENCIAL DE ALÍQUOTA – UF ORIGEM/DESTINO EC 87/15
    - E310 Apuração do ICMS Diferencial de Alíquota – UF Origem/Destino EC 87/15
      ≡ E311 
        ≡ E312 
        ≡ E313 
      ≡ E316 

  - E500 PERÍODO DE APURAÇÃO DO IPI
    ≡ E510 Consolidação dos Valores de IPI
    - E520 Apuração do IPI
      ≡ E530 
        ≡ E531 

<BLOCO G>

  - G110 ICMS – ATIVO PERMANENTE – CIAP
    ≡ G125 Movimentação de bem ou componente
      ≡ G126 
      ≡ G130 
        ≡ G140 

<BLOCO H>

  - H005 TOTAIS DO INVENTÁRIO
    ≡ H010 Inventário
      ≡ H020 
      - H030 

<BLOCO K>

  - K100 PERÍODO DE APURAÇÃO DO ICMS/IPI
    ≡ K200 Estoque Escriturado
    ≡ K210 Desmontagem de mercadorias – Item de Origem
      ≡ K215 
    ≡ K220 Outras Movimentações Internas entre Mercadorias
    ≡ K230 Itens Produzidos
      ≡ K235 
    ≡ K250 Industrialização Efetuada por Terceiros – Itens Produzidos
      ≡ K255 
    ≡ K260 Reprocessamento/Reparo de Produto/Insumo
      ≡ K265 
    ≡ K270 Correção de Apontamento dos Registros K210
      ≡ K275 
    ≡ K280 Correção de Apontamento – Estoque Escriturado
    ≡ K290 Produção Conjunta – Ordem de Produção
      ≡ K291 
      ≡ K292 
    ≡ K300 Produção Conjunta – Industrialização efetuada por terceiros
      ≡ K301 
      ≡ K302 

<BLOCO 1>

  - 1010 OBRIGATORIEDADE DE REGISTROS DO BLOCO 1

  - 1100 REGISTRO DE INFORMAÇÕES SOBRE EXPORTAÇÃO
    ≡ 1105 Documentos Fiscais de Exportação
      ≡ 1110 

  - 1200 CONTROLE DE CRÉDITOS FISCAIS - ICMS
    ≡ 1210 Utilização de Créditos Fiscais

  - 1250 INFORMAÇÕES CONSOLIDADAS DE SALDOS DE RESTITUIÇÃO
    ≡ 1255 Informações consolidadas de saldos de restituição

  - 1300 MOVIMENTAÇÃO DIÁRIA DE COMBUSTÍVEIS
    ≡ 1310 Movimentação diária de combustíveis por tanque
      ≡ 1320 

  - 1350 BOMBAS
    ≡ 1360 Lacres das bombas
    ≡ 1370 Bicos da bomba

  - 1390 CONTROLE DE PRODUÇÃO DE USINA
    ≡ 1391 Produção diária da usina

  - 1400 INFORMAÇÃO SOBRE VALOR AGREGADO

  - 1500 NOTA FISCAL/CONTA DE ENERGIA ELÉTRICA
    ≡ 1510 Itens do documento Nota fiscal/Conta de energia elétrica

  - 1600 TOTAL DAS OPERAÇÕES COM CARTÃO DE CRÉDITO E/OU DÉBITO

  - 1601 OPERAÇÕES COM INSTRUMENTOS DE PAGAMENTOS ELETRÔNICOS

  - 1700 DOCUMENTOS FISCAIS UTILIZADOS
    ≡ 1710 Documentos fiscais cancelados/inutilizados

  - 1800 DCTA

  - 1900 INDICADOR DE SUB-APURAÇÃO DO ICMS
    ≡ 1910 Período da Sub-apuração do ICMS
      - 1920 
        ≡ 1921 
          ≡ 1922 
          ≡ 1923 
        ≡ 1925 
        ≡ 1926 

  - 1960 GIAF 1

  - 1970 GIAF 3
    ≡ 1975 GIAF 3

  - 1980 GIAF 4

<BLOCO 9>

  - 9900 REGISTROS DO ARQUIVO
"""

import textwrap
from odoo import fields, models
from . import sped_models


class Registro0000(models.Model):
    "Abertura do Arquivo Digital e Identificação da entidade"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.0000"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 0

    COD_VER = fields.Integer(
        string="Código da versão do leiaute conforme",
        required=True,
        help=(
            "Código da versão do leiaute conforme a tabela indicada no Ato " "COTEPE."
        ),
    )

    COD_FIN = fields.Integer(
        string="Código da finalidade do arquivo: 0",
        required=True,
        sped_length=1,
        help=(
            "Código da finalidade do arquivo: 0 - Remessa do arquivo original;"
            " 1 - Remessa do arquivo substituto."
        ),
    )

    DT_INI = fields.Date(
        string="Data inicial das informações contidas no arquivo", required=True
    )

    DT_FIN = fields.Date(
        string="Data final das informações contidas no arquivo", required=True
    )

    NOME = fields.Char(
        string="Nome empresarial da entidade", required=True, sped_length=100
    )

    CNPJ = fields.Char(string="Número de inscrição da entidade no CNPJ")

    CPF = fields.Char(string="Número de inscrição da entidade no CPF")

    UF = fields.Char(string="Sigla da unidade da federação da entidade", required=True)

    IE = fields.Char(
        string="Inscrição Estadual da entidade", required=True, sped_length=14
    )

    COD_MUN = fields.Integer(
        string="Código do município do domicílio fiscal",
        required=True,
        help=(
            "Código do município do domicílio fiscal da entidade, conforme a "
            "tabela IBGE"
        ),
    )

    IM = fields.Char(string="Inscrição Municipal da entidade")

    SUFRAMA = fields.Char(string="Inscrição da entidade na SUFRAMA")

    IND_PERFIL = fields.Char(
        string="Perfil de apresentação",
        required=True,
        sped_length=1,
        help=(
            "Perfil de apresentação do arquivo fiscal; A – Perfil A; B – "
            "Perfil B.; C – Perfil C."
        ),
    )

    IND_ATIV = fields.Integer(
        string="Indicador de tipo de atividade",
        required=True,
        sped_length=1,
        help=(
            "Indicador de tipo de atividade: 0 – Industrial ou equiparado a "
            "industrial; 1 – Outros."
        ),
    )


class Registro0002(models.Model):
    """Classificação do Estabelecimento Industrial ou Equiparado a
    Industrial"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.0002"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    CLAS_ESTAB_IND = fields.Integer(
        string="classificação do estabelecimento conforme tabela 4",
        required=True,
        sped_length=2,
        help="classificação do estabelecimento conforme tabela 4.5.5",
    )


class Registro0005(models.Model):
    "Dados Complementares da entidade"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.0005"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    FANTASIA = fields.Char(
        string="Nome de fantasia associado ao nome empresarial",
        required=True,
        sped_length=60,
    )

    CEP = fields.Integer(string="Código de Endereçamento Postal", required=True)

    END = fields.Char(
        string="Logradouro e endereço do imóvel", required=True, sped_length=60
    )

    NUM = fields.Char(string="Número do imóvel", sped_length=10)

    COMPL = fields.Char(string="Dados complementares do endereço", sped_length=60)

    BAIRRO = fields.Char(
        string="Bairro em que o imóvel está situado", required=True, sped_length=60
    )

    FONE = fields.Char(string="Número do telefone (DDD+FONE)", sped_length=11)

    FAX = fields.Char(string="Número do fax", sped_length=11)

    EMAIL = fields.Char(string="Endereço do correio eletrônico")


class Registro0015(models.Model):
    "Dados do Contribuinte Substituto ou Responsável pelo ICMS Destino"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.0015"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    UF_ST = fields.Char(
        string="Sigla da unidade da federação",
        required=True,
        help=(
            "Sigla da unidade da federação do contribuinte substituído ou "
            "unidade de federação do consumidor final não contribuinte -"
        ),
    )

    IE_ST = fields.Char(
        string="Inscrição Estadual do contribuinte substituto",
        required=True,
        sped_length=14,
        help=(
            "Inscrição Estadual do contribuinte substituto na unidade da "
            "federação do contribuinte substituído ou unidade de federação do "
            "consumidor final não contribuinte - ICMS Destino EC 87/15."
        ),
    )


class Registro0100(models.Model):
    "Dados do Contabilista"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.0100"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    NOME = fields.Char(string="Nome do contabilista", required=True, sped_length=100)

    CPF = fields.Char(
        string="Número de inscrição do contabilista no CPF", required=True
    )

    CRC = fields.Char(
        string="Número de inscrição do contabilista",
        required=True,
        sped_length=15,
        help=(
            "Número de inscrição do contabilista no Conselho Regional de "
            "Contabilidade."
        ),
    )

    CNPJ = fields.Char(
        string="Número de inscrição do escritório de contabilidade",
        help=(
            "Número de inscrição do escritório de contabilidade no CNPJ, se " "houver."
        ),
    )

    CEP = fields.Integer(string="Código de Endereçamento Postal")

    END = fields.Char(string="Logradouro e endereço do imóvel", sped_length=60)

    NUM = fields.Char(string="Número do imóvel", sped_length=10)

    COMPL = fields.Char(string="Dados complementares do endereço", sped_length=60)

    BAIRRO = fields.Char(string="Bairro em que o imóvel está situado", sped_length=60)

    FONE = fields.Char(string="Número do telefone (DDD+FONE)", sped_length=11)

    FAX = fields.Char(string="Número do fax", sped_length=11)

    EMAIL = fields.Char(string="Endereço do correio eletrônico", required=True)

    COD_MUN = fields.Integer(
        string="Código do município",
        required=True,
        help="Código do município, conforme tabela IBGE.",
    )


class Registro0150(models.Model):
    "Tabela de Cadastro do Participante"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.0150"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_PART = fields.Char(
        string="Código de identificação do participante no arquivo", sped_length=60
    )

    NOME = fields.Char(
        string="Nome pessoal ou empresarial do participante",
        required=True,
        sped_length=100,
    )

    COD_PAIS = fields.Integer(
        string="Código do país do participante",
        required=True,
        sped_length=5,
        help=(
            "Código do país do participante, conforme a tabela indicada no "
            "item 3.2.1"
        ),
    )

    CNPJ = fields.Char(string="CNPJ do participante")

    CPF = fields.Char(string="CPF do participante")

    IE = fields.Char(string="Inscrição Estadual do participante", sped_length=14)

    COD_MUN = fields.Integer(
        string="Código do município", help="Código do município, conforme a tabela IBGE"
    )

    SUFRAMA = fields.Char(string="Número de inscrição do participante na SUFRAMA")

    END = fields.Char(
        string="Logradouro e endereço do imóvel", required=True, sped_length=60
    )

    NUM = fields.Char(string="Número do imóvel", sped_length=10)

    COMPL = fields.Char(string="Dados complementares do endereço", sped_length=60)

    BAIRRO = fields.Char(string="Bairro em que o imóvel está situado", sped_length=60)

    reg_0175_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.0175",
        "reg_0175_ids_Registro0150_id",
        string="0175 Alteração da Tabela de Cadastro",
        sped_card="1:N",
        sped_required="O",
        help="0175 Alteração da Tabela de Cadastro de Participante",
    )


class Registro0175(models.Model):
    "Alteração da Tabela de Cadastro de Participante"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.0175"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    DT_ALT = fields.Date(string="Data de alteração do cadastro", required=True)

    NR_CAMPO = fields.Char(
        string="Número do campo alterado",
        required=True,
        sped_length=2,
        help="Número do campo alterado (campos 03 a 13, exceto 07)",
    )

    CONT_ANT = fields.Char(
        string="Conteúdo anterior do campo", required=True, sped_length=100
    )

    reg_0175_ids_Registro0150_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.0150",
        string="Tabela de Cadastro do Participante",
        required=True,
        ondelete="cascade",
    )


class Registro0190(models.Model):
    "Identificação das unidades de medida"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.0190"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    UNID = fields.Char(
        string="Código da unidade de medida", required=True, sped_length=6
    )

    DESCR = fields.Char(string="Descrição da unidade de medida", required=True)


class Registro0200(models.Model):
    "Tabela de Identificação do Item (Produtos e Serviços)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.0200"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_ITEM = fields.Char(string="Código do item", required=True, sped_length=60)

    DESCR_ITEM = fields.Char(string="Descrição do item", required=True)

    COD_BARRA = fields.Char(
        string="Representação alfanumérico do código de barra",
        help=("Representação alfanumérico do código de barra do produto, se " "houver"),
    )

    COD_ANT_ITEM = fields.Char(
        string="Código anterior do item com relação",
        sped_length=60,
        help=(
            "Código anterior do item com relação à última informação " "apresentada."
        ),
    )

    UNID_INV = fields.Char(
        string="Unidade de medida utilizada na quantificação",
        required=True,
        sped_length=6,
        help="Unidade de medida utilizada na quantificação de estoques.",
    )

    TIPO_ITEM = fields.Integer(
        string="Tipo do item – Atividades Industriais",
        required=True,
        sped_length=2,
        help=(
            "Tipo do item – Atividades Industriais, Comerciais e Serviços: 00 "
            "– Mercadoria para Revenda; 01 – Matéria-prima; 02 – Embalagem; 03"
            " – Produto em Processo; 04 – Produto Acabado; 05 – Subproduto; 06"
            " – Produto Intermediário; 07 – Material de Uso e Consumo; 08 – "
            "Ativo Imobilizado; 09 – Serviços; 10 – Outros insumos; 99 – "
            "Outras"
        ),
    )

    COD_NCM = fields.Char(string="Código da Nomenclatura Comum do Mercosul")

    EX_IPI = fields.Char(string="Código EX, conforme a TIPI", sped_length=3)

    COD_GEN = fields.Integer(
        string="Código do gênero do item",
        help="Código do gênero do item, conforme a Tabela 4.2.1",
    )

    COD_LST = fields.Char(
        string="Código do serviço conforme lista do Anexo I",
        sped_length=5,
        help=(
            "Código do serviço conforme lista do Anexo I da Lei Complementar "
            "Federal nº 116/03."
        ),
    )

    ALIQ_ICMS = fields.Float(
        string="Alíquota de ICMS aplicável ao item",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Alíquota de ICMS aplicável ao item nas operações internas",
    )

    CEST = fields.Integer(string="Código Especificador da Substituição Tributária")

    reg_0206_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.0206",
        "reg_0206_ids_Registro0200_id",
        string="0206 Código de produto conforme Tabela ANP",
        sped_card="1:1",
        sped_required="O",
    )

    reg_0205_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.0205",
        "reg_0205_ids_Registro0200_id",
        string="0205 Alteração do Item",
        sped_card="1:N",
        sped_required="O",
    )

    reg_0210_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.0210",
        "reg_0210_ids_Registro0200_id",
        string="0210 Consumo Específico Padronizado",
        sped_card="1:N",
        sped_required="O",
    )

    reg_0220_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.0220",
        "reg_0220_ids_Registro0200_id",
        string="0220 Fatores de Conversão de Unidades",
        sped_card="1:N",
        sped_required="O",
    )


class Registro0205(models.Model):
    "Alteração do Item"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.0205"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    DESCR_ANT_ITEM = fields.Char(string="Descrição anterior do item")

    DT_INI = fields.Date(
        string="Data inicial de utilização da descrição do item", required=True
    )

    DT_FIM = fields.Date(
        string="Data final de utilização da descrição do item", required=True
    )

    COD_ANT_ITEM = fields.Char(
        string="Código anterior do item com relação",
        sped_length=60,
        help=(
            "Código anterior do item com relação à última informação " "apresentada."
        ),
    )

    reg_0205_ids_Registro0200_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.0200",
        string="Tabela de Identificação do Item",
        required=True,
        ondelete="cascade",
        help="Tabela de Identificação do Item (Produtos e Serviços)",
    )


class Registro0206(models.Model):
    "Código de produto conforme Tabela ANP"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.0206"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_COMB = fields.Char(
        string="Código do produto",
        required=True,
        help="Código do produto, conforme tabela publicada pela ANP",
    )

    reg_0206_ids_Registro0200_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.0200",
        string="Tabela de Identificação do Item",
        required=True,
        ondelete="cascade",
        help="Tabela de Identificação do Item (Produtos e Serviços)",
    )


class Registro0210(models.Model):
    "Consumo Específico Padronizado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.0210"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_ITEM_COMP = fields.Char(
        string="Código do item componente/insumo",
        required=True,
        sped_length=60,
        help="Código do item componente/insumo (campo 02 do Registro 0200)",
    )

    QTD_COMP = fields.Float(
        string="Quantidade do item componente/insumo",
        required=True,
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Quantidade do item componente/insumo para se produzir uma unidade"
            " do item composto/resultante"
        ),
    )

    PERDA = fields.Float(
        string="Perda/quebra normal percentual",
        required=True,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help=(
            "Perda/quebra normal percentual do insumo/componente para se "
            "produzir uma unidade do item composto/resultante"
        ),
    )

    reg_0210_ids_Registro0200_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.0200",
        string="Tabela de Identificação do Item",
        required=True,
        ondelete="cascade",
        help="Tabela de Identificação do Item (Produtos e Serviços)",
    )


class Registro0220(models.Model):
    "Fatores de Conversão de Unidades"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.0220"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    UNID_CONV = fields.Char(
        string="Unidade comercial a ser convertida na unidade",
        required=True,
        sped_length=6,
        help=(
            "Unidade comercial a ser convertida na unidade de estoque, "
            "referida no registro 0200. Ou unidade do 0200 utilizada na EFD "
            "anterior."
        ),
    )

    FAT_CONV = fields.Float(
        string="Fator de conversão",
        required=True,
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Fator de conversão: fator utilizado para converter (multiplicar) "
            "a unidade a ser convertida na unidade adotada no inventário."
        ),
    )

    COD_BARRA = fields.Char(
        string="Representação alfanumérica do código de barra",
        help=(
            "Representação alfanumérica do código de barra da unidade "
            "comercial do produto, se houver"
        ),
    )

    reg_0220_ids_Registro0200_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.0200",
        string="Tabela de Identificação do Item",
        required=True,
        ondelete="cascade",
        help="Tabela de Identificação do Item (Produtos e Serviços)",
    )


class Registro0300(models.Model):
    "Cadastro de bens ou componentes do Ativo Imobilizado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.0300"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_IND_BEM = fields.Char(
        string="Código individualizado do bem",
        required=True,
        sped_length=60,
        help=(
            "Código individualizado do bem ou componente adotado no controle "
            "patrimonial do estabelecimento informante"
        ),
    )

    IDENT_MERC = fields.Char(
        string="Identificação do tipo de mercadoria",
        required=True,
        help=("Identificação do tipo de mercadoria: 1 = bem; 2 = componente."),
    )

    DESCR_ITEM = fields.Char(
        string="Descrição do bem ou componente",
        required=True,
        help=(
            "Descrição do bem ou componente (modelo, marca e outras "
            "características necessárias a sua individualização)"
        ),
    )

    COD_PRNC = fields.Char(
        string="Código de cadastro do bem principal nos casos",
        sped_length=60,
        help=(
            "Código de cadastro do bem principal nos casos em que o bem ou "
            "componente ( campo 02) esteja vinculado a um bem principal."
        ),
    )

    COD_CTA = fields.Char(
        string="Código da conta analítica de contabilização do bem",
        required=True,
        sped_length=60,
        help=(
            "Código da conta analítica de contabilização do bem ou componente "
            "(campo 06 do Registro 0500)"
        ),
    )

    NR_PARC = fields.Integer(
        string="Número total de parcelas a serem apropriadas",
        sped_length=3,
        help=(
            "Número total de parcelas a serem apropriadas, segundo a "
            "legislação de cada unidade federada"
        ),
    )

    reg_0305_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.0305",
        "reg_0305_ids_Registro0300_id",
        string="0305 Informação sobre a Utilização do Bem",
        sped_card="1:1",
        sped_required="O",
    )


class Registro0305(models.Model):
    "Informação sobre a Utilização do Bem"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.0305"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_CCUS = fields.Char(
        string="Código do centro de custo onde o bem está sendo",
        required=True,
        sped_length=60,
        help=(
            "Código do centro de custo onde o bem está sendo ou será utilizado"
            " (campo 03 do Registro 0600)"
        ),
    )

    FUNC = fields.Char(
        string="Descrição sucinta da função do bem na atividade",
        required=True,
        help=("Descrição sucinta da função do bem na atividade do " "estabelecimento"),
    )

    VIDA_UTIL = fields.Integer(
        string="Vida útil estimada do bem",
        sped_length=3,
        help="Vida útil estimada do bem, em número de meses",
    )

    reg_0305_ids_Registro0300_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.0300",
        string="Cadastro de bens ou componentes",
        required=True,
        ondelete="cascade",
        help="Cadastro de bens ou componentes do Ativo Imobilizado",
    )


class Registro0400(models.Model):
    "Tabela de Natureza da Operação/ Prestação"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.0400"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_NAT = fields.Char(
        string="Código da natureza da operação/prestação", required=True, sped_length=10
    )

    DESCR_NAT = fields.Char(
        string="Descrição da natureza da operação/prestação", required=True
    )


class Registro0450(models.Model):
    "Tabela de Informação Complementar do documento fiscal"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.0450"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_INF = fields.Char(
        string="Código da informação complementar",
        required=True,
        sped_length=6,
        help="Código da informação complementar do documento fiscal.",
    )

    TXT = fields.Char(
        string="Texto livre da informação complementar existente",
        required=True,
        help=(
            "Texto livre da informação complementar existente no documento "
            "fiscal, inclusive espécie de normas legais, poder normativo, "
            "número, capitulação, data e demais referências pertinentes com "
            "indicações referentes ao tributo."
        ),
    )


class Registro0460(models.Model):
    "Tabela de Observações do Lançamento Fiscal"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.0460"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_OBS = fields.Char(
        string="Código da Observação do lançamento fiscal", required=True, sped_length=6
    )

    TXT = fields.Char(
        string="Descrição da observação vinculada",
        required=True,
        help="Descrição da observação vinculada ao lançamento fiscal",
    )


class Registro0500(models.Model):
    "Plano de contas contábeis"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.0500"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    DT_ALT = fields.Date(string="Data da inclusão/alteração", required=True)

    COD_NAT_CC = fields.Char(
        string="Código da natureza da conta/grupo de contas",
        required=True,
        help=(
            "Código da natureza da conta/grupo de contas: 01 - Contas de "
            "ativo; 02 - Contas de passivo; 03 - Patrimônio líquido; 04 - "
            "Contas de resultado; 05 - Contas de compensação; 09 - Outras."
        ),
    )

    IND_CTA = fields.Char(
        string="Indicador do tipo de conta: S",
        required=True,
        help=(
            "Indicador do tipo de conta: S - Sintética (grupo de contas); A - "
            "Analítica (conta)."
        ),
    )

    NÍVEL = fields.Integer(
        string="Nível da conta analítica/grupo de contas", required=True, sped_length=5
    )

    COD_CTA = fields.Char(
        string="Código da conta analítica/grupo de contas",
        required=True,
        sped_length=60,
    )

    NOME_CTA = fields.Char(
        string="Nome da conta analítica/grupo de contas", required=True, sped_length=60
    )


class Registro0600(models.Model):
    "Centro de custos"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.0600"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    DT_ALT = fields.Date(string="Data da inclusão/alteração", required=True)

    COD_CCUS = fields.Char(
        string="Código do centro de custos", required=True, sped_length=60
    )

    CCUS = fields.Char(string="Nome do centro de custos", required=True, sped_length=60)


class RegistroB020(models.Model):
    """Nota Fiscal (código 01), Nota Fiscal de Serviços (código 03), Nota
    Fiscal de Serviços Avulsa (código 3B), Nota Fiscal de Produtor (código
    04), Conhecimento de Transporte Rodoviário de Cargas (código 08), NF-e
    (código 55) e NFC-e (código 65)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.b020"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    IND_OPER = fields.Char(
        string="Indicador do tipo de operação: 0",
        help="Indicador do tipo de operação: 0 - Aquisição; 1 - Prestação",
    )

    IND_EMIT = fields.Char(
        string="Indicador do emitente do documento fiscal",
        help=(
            "Indicador do emitente do documento fiscal: 0 - Emissão própria; 1"
            " - Terceiros"
        ),
    )

    COD_PART = fields.Char(
        string="Código do participante",
        sped_length=60,
        help=(
            "Código do participante (campo 02 do Registro 0150): - do "
            "prestador, no caso de declarante na condição de tomador; - do "
            "tomador, no caso de declarante na condição de prestador"
        ),
    )

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.3"),
    )

    COD_SIT = fields.Integer(
        string="Código da situação do documento conforme tabela 4",
        help="Código da situação do documento conforme tabela 4.1.2",
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=3)

    NUM_DOC = fields.Integer(string="Número do documento fiscal", sped_length=9)

    CHV_NFE = fields.Integer(string="Chave da Nota Fiscal Eletrônica")

    DT_DOC = fields.Date(string="Data da emissão do documento fiscal")

    COD_MUN_SERV = fields.Char(
        string="Código do município onde o serviço foi prestado",
        help=(
            "Código do município onde o serviço foi prestado, conforme a "
            "tabela IBGE."
        ),
    )

    VL_CONT = fields.Monetary(
        string="Valor contábil",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor contábil (valor total do documento)",
    )

    VL_MAT_TERC = fields.Monetary(
        string="Valor do material fornecido por terceiros",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor do material fornecido por terceiros na prestação do serviço"),
    )

    VL_SUB = fields.Monetary(
        string="Valor da subempreitada",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ISNT_ISS = fields.Monetary(
        string="Valor das operações isentas ou não- tributadas",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor das operações isentas ou não- tributadas pelo ISS",
    )

    VL_DED_BC = fields.Monetary(
        string="Valor da dedução da base de cálculo",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ISS = fields.Monetary(
        string="Valor da base de cálculo do ISS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ISS_RT = fields.Monetary(
        string="Valor da base de cálculo de retenção do ISS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ISS_RT = fields.Monetary(
        string="Valor do ISS retido pelo tomador",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ISS = fields.Monetary(
        string="Valor do ISS destacado",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_INF_OBS = fields.Char(
        string="Código da observação do lançamento fiscal",
        sped_length=60,
        help=(
            "Código da observação do lançamento fiscal (campo 02 do Registro " "0460)"
        ),
    )

    reg_B025_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.b025",
        "reg_B025_ids_RegistroB020_id",
        string="B025 Detalhamento por combinação de alíquota",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "B025 Detalhamento por combinação de alíquota e item da lista de "
            "serviços da Lei Complementar nº 116/2003"
        ),
    )


class RegistroB025(models.Model):
    """Detalhamento por combinação de alíquota e item da lista de serviços da
    Lei Complementar nº 116/2003"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.b025"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    VL_CONT_P = fields.Monetary(
        string="Parcela correspondente",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao “Valor Contábil” referente à combinação"
            " da alíquota e item da lista"
        ),
    )

    VL_BC_ISS_P = fields.Monetary(
        string="Parcela correspondente ao “Valor da base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao “Valor da base de cálculo do ISS” "
            "referente à combinação da alíquota e item da lista"
        ),
    )

    ALIQ_ISS = fields.Float(
        string="Alíquota do ISS",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_ISS_P = fields.Monetary(
        string="Parcela correspondente ao “Valor do ISS” referente",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao “Valor do ISS” referente à combinação "
            "da alíquota e item da lista"
        ),
    )

    VL_ISNT_ISS_P = fields.Monetary(
        string="Parcela correspondente ao “Valor",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao “Valor das operações isentas ou não- "
            "tributadas pelo ISS” referente à combinação da alíquota e item da"
            " lista"
        ),
    )

    COD_SERV = fields.Char(
        string="Item da lista de serviços",
        help="Item da lista de serviços, conforme Tabela 4.6.3",
    )

    reg_B025_ids_RegistroB020_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.b020",
        string="Nota Fiscal (código 01)",
        required=True,
        ondelete="cascade",
        help=(
            "Nota Fiscal (código 01), Nota Fiscal de Serviços (código 03), "
            "Nota Fiscal de Serviços Avulsa (código 3B), Nota Fiscal de "
            "Produtor (código 04), Conhecimento de Transporte Rodoviário de "
            "Cargas (código 08), NF-e (código 55) e NFC-e (código 65)"
        ),
    )


class RegistroB030(models.Model):
    "Nota fiscal de Serviços Simplificada (código 3A)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.b030"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.3"),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=3)

    NUM_DOC_INI = fields.Integer(
        string="Número do primeiro documento fiscal emitido no dia", sped_length=9
    )

    NUM_DOC_FIN = fields.Integer(
        string="Número do último documento fiscal emitido no dia", sped_length=9
    )

    DT_DOC = fields.Date(string="Data da emissão dos documentos fiscais")

    QTD_CANC = fields.Integer(string="Quantidade de documentos cancelados")

    VL_CONT = fields.Monetary(
        string="Valor contábil",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor contábil (valor total acumulado dos documentos)",
    )

    VL_ISNT_ISS = fields.Monetary(
        string="Valor acumulado das operações isentas",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor acumulado das operações isentas ou não-tributadas pelo ISS"),
    )

    VL_BC_ISS = fields.Monetary(
        string="Valor acumulado da base de cálculo do ISS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ISS = fields.Monetary(
        string="Valor acumulado do ISS destacado",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_INF_OBS = fields.Char(
        string="Código da observação do lançamento fiscal",
        sped_length=60,
        help=(
            "Código da observação do lançamento fiscal (campo 02 do Registro " "0460)"
        ),
    )


class RegistroB350(models.Model):
    "Serviços prestados por insituições financeiras"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.b350"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_CTD = fields.Char(string="Código da conta do plano de contas")

    CTA_ISS = fields.Char(string="Descrição da conta no plano de contas")

    CTA_COSIF = fields.Integer(
        string="Código COSIF a que está subordinada a conta do ISS",
        help=(
            "Código COSIF a que está subordinada a conta do ISS das "
            "instituições financeiras"
        ),
    )

    QTD_OCOR = fields.Integer(string="Quantidade de ocorrências na conta")

    COD_SERV = fields.Integer(
        string="Item da lista de serviços",
        help="Item da lista de serviços, conforme Tabela 4.6.3.",
    )

    VL_CONT = fields.Monetary(
        string="Valor contábil", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_BC_ISS = fields.Monetary(
        string="Valor da base de cálculo do ISS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_ISS = fields.Float(
        string="Alíquota do ISS",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_ISS = fields.Monetary(
        string="Valor do ISS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_INF_OBS = fields.Char(
        string="Código da observação do lançamento fiscal",
        sped_length=60,
        help=(
            "Código da observação do lançamento fiscal (campo 02 do Registro " "0460)"
        ),
    )


class RegistroB420(models.Model):
    """Totalização dos valores de serviços prestados por combinação de alíquota
    e item da lista de serviços da Lei Complementar nº 116/2003"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.b420"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    VL_CONT = fields.Monetary(
        string="Totalização do Valor Contábil das prestações",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Totalização do Valor Contábil das prestações do declarante "
            "referente à combinação da alíquota e item da lista"
        ),
    )

    VL_BC_ISS = fields.Monetary(
        string="Totalização do Valor da base de cálculo do ISS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Totalização do Valor da base de cálculo do ISS das prestações do "
            "declarante referente à combinação da alíquota e item da lista"
        ),
    )

    ALIQ_ISS = fields.Float(
        string="Alíquota do ISS",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_ISNT_ISS = fields.Monetary(
        string="Totalização do valor das operações isentas",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Totalização do valor das operações isentas ou não-tributadas pelo"
            " ISS referente à combinação da alíquota e item da lista"
        ),
    )

    VL_ISS = fields.Monetary(
        string="Totalização",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Totalização, por combinação da alíquota e item da lista, do Valor"
            " do ISS"
        ),
    )

    COD_SERV = fields.Char(
        string="Item da lista de serviços",
        help="Item da lista de serviços, conforme Tabela 4.6.3.",
    )


class RegistroB440(models.Model):
    "Totalização dos valores retidos"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.b440"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    IND_OPER = fields.Float(
        string="Indicador do tipo de operação: 0",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Indicador do tipo de operação: 0 - Aquisição; 1 - Prestação",
    )

    COD_PART = fields.Char(
        string="Código do participante",
        help=(
            "Código do participante (campo 02 do Registro 0150): - do "
            "prestador, no caso de aquisição de serviço pelo declarante; - do "
            "tomador, no caso de prestação de serviço pelo declarante"
        ),
    )

    VL_CONT_RT = fields.Monetary(
        string="Totalização do Valor Contábil",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Totalização do Valor Contábil das prestações e/ou aquisições do "
            "declarante pela combinação de tipo de operação e participante."
        ),
    )

    VL_BC_ISS_RT = fields.Monetary(
        string="Totalização do Valor da base de cálculo",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Totalização do Valor da base de cálculo de retenção do ISS das "
            "prestações e/ou aquisições do declarante pela combinação de tipo "
            "de operação e participante."
        ),
    )

    VL_ISS_RT = fields.Monetary(
        string="Totalização do Valor do ISS retido pelo tomador",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Totalização do Valor do ISS retido pelo tomador das prestações "
            "e/ou aquisições do declarante pela combinação de tipo de operação"
            " e participante."
        ),
    )


class RegistroB460(models.Model):
    "Deduções do ISS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.b460"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    IND_DED = fields.Char(
        string="Indicador do tipo de dedução: 0",
        help=(
            "Indicador do tipo de dedução: 0 - Compensação do ISS calculado a "
            "maior; 1 - Benefício fiscal por incentivo à cultura; 2 - Decisão "
            "administrativa ou judicial; 9 - Outros"
        ),
    )

    VL_DED = fields.Monetary(
        string="Valor da dedução",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    NUM_PROC = fields.Char(
        string="Número do processo ao qual o ajuste está vinculado",
        help=("Número do processo ao qual o ajuste está vinculado, se houver"),
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 0",
        help=(
            "Indicador da origem do processo: 0 - Sefin; 1 - Justiça Federal; "
            "2 - Justiça Estadual; 9 - Outros"
        ),
    )

    PROC = fields.Char(string="Descrição do processo que embasou o lançamento")

    COD_INF_OBS = fields.Char(
        string="Código da observação do lançamento fiscal",
        sped_length=60,
        help=(
            "Código da observação do lançamento fiscal (campo 02 do Registro " "0460)"
        ),
    )

    IND_OBR = fields.Char(
        string="Indicador da obrigação onde será aplicada",
        help=(
            "Indicador da obrigação onde será aplicada a dedução: 0 - ISS "
            "Próprio; 1 - ISS Substituto (devido pelas aquisições de serviços "
            "do declarante)."
        ),
    )


class RegistroB470(models.Model):
    "Apuração do ISS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.b470"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    VL_CONT = fields.Monetary(
        string="A",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("A - Valor total referente às prestações de serviço do período"),
    )

    VL_MAT_TERC = fields.Monetary(
        string="B",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "B - Valor total do material fornecido por terceiros na prestação "
            "do serviço"
        ),
    )

    VL_MAT_PROP = fields.Monetary(
        string="C",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("C - Valor do material próprio utilizado na prestação do serviço"),
    )

    VL_SUB = fields.Monetary(
        string="D - Valor total das subempreitadas",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ISNT = fields.Monetary(
        string="E",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("E - Valor total das operações isentas ou não-tributadas pelo ISS"),
    )

    VL_DED_BC = fields.Monetary(
        string="F",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("F - Valor total das deduções da base de cálculo (B + C + D + E)"),
    )

    VL_BC_ISS = fields.Monetary(
        string="G",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="G - Valor total da base de cálculo do ISS",
    )

    VL_BC_ISS_RT = fields.Monetary(
        string="H",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "H - Valor total da base de cálculo de retenção do ISS referente "
            "às prestações do declarante."
        ),
    )

    VL_ISS = fields.Monetary(
        string="I - Valor total do ISS destacado",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ISS_RT = fields.Monetary(
        string="J",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "J - Valor total do ISS retido pelo tomador nas prestações do " "declarante"
        ),
    )

    VL_DED = fields.Monetary(
        string="K",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="K - Valor total das deduções do ISS próprio",
    )

    VL_ISS_REC = fields.Monetary(
        string="L",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("L - Valor total apurado do ISS próprio a recolher (I - J - K)"),
    )

    VL_ISS_ST = fields.Monetary(
        string="M",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "M - Valor total do ISS substituto a recolher pelas aquisições do "
            "declarante"
        ),
    )

    VL_ISS_REC_UNI = fields.Monetary(
        string="N",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("N - Valor do ISS próprio a recolher pela Sociedade " "Uniprofissional"),
    )


class RegistroB500(models.Model):
    "Apuração do ISS sociedade uniprofissional"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.b500"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    VL_REC = fields.Monetary(
        string="Valor mensal das receitas auferidas",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor mensal das receitas auferidas pela sociedade " "uniprofissional"),
    )

    QTD_PROF = fields.Integer(
        string="Quantidade de profissionais habilitados", required=True
    )

    VL_OR = fields.Monetary(
        string="Valor do ISS devido",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_B510_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.b510",
        "reg_B510_ids_RegistroB500_id",
        string="B510 Uniprofissional – empregados e sócios",
        sped_card="V",
        sped_required="O",
    )


class RegistroB510(models.Model):
    "Uniprofissional – empregados e sócios"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.b510"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    IND_PROF = fields.Char(
        string="Indicador de habilitação",
        required=True,
        help=(
            "Indicador de habilitação: 0- Profissional habilitado 1- "
            "Profissional não habilitado"
        ),
    )

    IND_ESC = fields.Char(
        string="Indicador de escolaridade",
        required=True,
        help="Indicador de escolaridade: 0- Nível superior 1- Nível médio",
    )

    IND_SOC = fields.Char(
        string="Indicador de participação societária",
        required=True,
        help=("Indicador de participação societária: 0 - Sócio 1 - Não sócio"),
    )

    CPF = fields.Char(
        string="Número de inscrição do profissional no CPF", required=True
    )

    NOME = fields.Char(string="Nome do profissional", required=True, sped_length=100)

    reg_B510_ids_RegistroB500_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.b500",
        string="Apuração do ISS sociedade uniprofissional",
        required=True,
        ondelete="cascade",
    )


class RegistroC100(models.Model):
    """Documento - Nota Fiscal (código 01), Nota Fiscal Avulsa (código 1B),
    Nota Fiscal de Produtor (código 04), Nota Fiscal Eletrônica (código 55)
    e Nota Fis- cal Eletrônica para Consumidor Final (código 65)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c100"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    IND_OPER = fields.Char(
        string="Indicador do tipo de operação: 0",
        help="Indicador do tipo de operação: 0 - Entrada; 1 - Saída",
    )

    IND_EMIT = fields.Char(
        string="Indicador do emitente do documento fiscal",
        help=(
            "Indicador do emitente do documento fiscal: 0 - Emissão própria; 1"
            " - Terceiros"
        ),
    )

    COD_PART = fields.Char(
        string="Código do participante",
        sped_length=60,
        help=(
            "Código do participante (campo 02 do Registro 0150): - do emitente"
            " do documento ou do remetente das mercadorias, no caso de "
            "entradas; - do adquirente, no caso de saídas"
        ),
    )

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    COD_SIT = fields.Integer(
        string="Código da situação do documento fiscal",
        help=("Código da situação do documento fiscal, conforme a Tabela 4.1.2"),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=3)

    NUM_DOC = fields.Integer(string="Número do documento fiscal", sped_length=9)

    CHV_NFE = fields.Integer(string="Chave da Nota Fiscal Eletrônica")

    DT_DOC = fields.Date(string="Data da emissão do documento fiscal")

    DT_E_S = fields.Date(string="Data da entrada ou da saída")

    VL_DOC = fields.Monetary(
        string="Valor total do documento fiscal",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_PGTO = fields.Char(
        string="Indicador do tipo de pagamento: 0",
        help=(
            "Indicador do tipo de pagamento: 0 - À vista; 1 - A prazo; 9 - Sem"
            " pagamento."
        ),
    )

    VL_DESC = fields.Monetary(
        string="Valor total do desconto",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ABAT_NT = fields.Monetary(
        string="Abatimento não tributado",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Abatimento não tributado e não comercial Por exemplo: desconto "
            "ICMS nas remessas para ZFM."
        ),
    )

    VL_MERC = fields.Monetary(
        string="Valor total das mercadorias e serviços",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_FRT = fields.Char(
        string="Indicador do tipo do frete: 0",
        help=(
            "Indicador do tipo do frete: 0 - Por conta de terceiros; 1 - Por "
            "conta do emitente; 2 - Por conta do destinatário; 9 - Sem "
            "cobrança de frete."
        ),
    )

    VL_FRT = fields.Monetary(
        string="Valor do frete indicado no documento fiscal",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SEG = fields.Monetary(
        string="Valor do seguro indicado no documento fiscal",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_OUT_DA = fields.Monetary(
        string="Valor de outras despesas acessórias",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS = fields.Monetary(
        string="Valor do ICMS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_BC_ICMS_ST = fields.Monetary(
        string="Valor da base de cálculo",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor da base de cálculo do ICMS substituição tributária",
    )

    VL_ICMS_ST = fields.Monetary(
        string="Valor do ICMS retido por substituição tributária",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_IPI = fields.Monetary(
        string="Valor total do IPI",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_PIS = fields.Monetary(
        string="Valor total do PIS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_COFINS = fields.Monetary(
        string="Valor total da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_PIS_ST = fields.Monetary(
        string="Valor total do PIS retido por substituição",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_COFINS_ST = fields.Monetary(
        string="Valor total da COFINS retido",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor total da COFINS retido por substituição tributária",
    )

    reg_C101_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c101",
        "reg_C101_ids_RegistroC100_id",
        string="C101 Informação complementar",
        sped_card="1:1",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C101 Informação complementar dos documentos fiscais quando das "
            "operações interestaduais destinadas a consumidor final não "
            "contribuinte - EC 87/15"
        ),
    )

    reg_C105_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c105",
        "reg_C105_ids_RegistroC100_id",
        string="C105 Operações com ICMS ST recolhido",
        sped_card="1:1",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C105 Operações com ICMS ST recolhido para UF diversa do "
            "destinatário do docu- mento fiscal (Código 55)"
        ),
    )

    reg_C130_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c130",
        "reg_C130_ids_RegistroC100_id",
        string="C130 Complemento de Documento",
        sped_card="1:1",
        sped_required="UNDEF_REQUIRED",
        help=("C130 Complemento de Documento - ISSQN, IRRF e Previdência Social"),
    )

    reg_C140_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c140",
        "reg_C140_ids_RegistroC100_id",
        string="C140 Complemento de Documento",
        sped_card="1:1",
        sped_required="UNDEF_REQUIRED",
        help="C140 Complemento de Documento - Fatura (código 01)",
    )

    reg_C160_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c160",
        "reg_C160_ids_RegistroC100_id",
        string="C160 Complemento de Documento",
        sped_card="1:1",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C160 Complemento de Documento - Volumes Transportados (código 01 "
            "e 04) Exce- to Combustíveis"
        ),
    )

    reg_C110_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c110",
        "reg_C110_ids_RegistroC100_id",
        string="C110 Complemento de Documento",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C110 Complemento de Documento - Informação Complementar da Nota "
            "Fiscal (código 01, 1B, 55)"
        ),
    )

    reg_C120_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c120",
        "reg_C120_ids_RegistroC100_id",
        string="C120 Complemento de Documento",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C120 Complemento de Documento - Operações de Importação (código "
            "01 e 55)"
        ),
    )

    reg_C165_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c165",
        "reg_C165_ids_RegistroC100_id",
        string="C165 Complemento de Documento",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C165 Complemento de Documento - Operações com combustíveis " "(código 01)"
        ),
    )

    reg_C170_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c170",
        "reg_C170_ids_RegistroC100_id",
        string="C170 Complemento de Documento",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C170 Complemento de Documento - Itens do Documento (código 01, "
            "1B, 04 e 55)"
        ),
    )

    reg_C185_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c185",
        "reg_C185_ids_RegistroC100_id",
        string="C185 Informações complementares das operações",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C185 Informações complementares das operações de sa- ída de "
            "mercadorias sujeitas à substituição tributária (código 01, 1B, 04"
            " e 55)"
        ),
    )

    reg_C186_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c186",
        "reg_C186_ids_RegistroC100_id",
        string="C186 Informações complementares das operações",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C186 Informações complementares das operações de devolução de "
            "entradas de mercadorias sujeitas à substituição tributária "
            "(código 01, 1B, 04 e 55)."
        ),
    )

    reg_C190_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c190",
        "reg_C190_ids_RegistroC100_id",
        string="C190 Registro Analítico do Documento",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=("C190 Registro Analítico do Documento (código 01, 1B, 04, 55 e 65)"),
    )

    reg_C195_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c195",
        "reg_C195_ids_RegistroC100_id",
        string="C195 Complemento do Registro Analítico",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C195 Complemento do Registro Analítico - Observações do "
            "Lançamento Fiscal (código 01, 1B, 04 e 55)"
        ),
    )


class RegistroC101(models.Model):
    """Informação complementar dos documentos fiscais quando das operações
    interestaduais destinadas a consumidor final não contribuinte - EC
    87/15"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c101"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    VL_FCP_UF_DEST = fields.Monetary(
        string="Valor total relativo ao Fundo de Combate à Pobreza",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total relativo ao Fundo de Combate à Pobreza (FCP) da UF de"
            " destino"
        ),
    )

    VL_ICMS_UF_DEST = fields.Monetary(
        string="Valor total do ICMS Interestadual para a UF",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS_UF_REM = fields.Monetary(
        string="VL_ICMS_UF_REM",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor total do ICMS Interestadual para a UF do remetente",
    )

    reg_C101_ids_RegistroC100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c100",
        string="Documento - Nota Fiscal (código 01)",
        required=True,
        ondelete="cascade",
        help=(
            "Documento - Nota Fiscal (código 01), Nota Fiscal Avulsa (código "
            "1B), Nota Fiscal de Produtor (código 04), Nota Fiscal Eletrônica "
            "(código 55) e Nota Fis- cal Eletrônica para Consumidor Final "
            "(código 65)"
        ),
    )


class RegistroC105(models.Model):
    """Operações com ICMS ST recolhido para UF diversa do destinatário do docu-
    mento fiscal (Código 55)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c105"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    OPER = fields.Integer(
        string="Indicador do tipo de operação",
        help=(
            "Indicador do tipo de operação: 0- Combustíveis e Lubrificantes; "
            "1- Leasing de veículos ou faturamento direto."
        ),
    )

    UF = fields.Char(string="Sigla da UF de destino do ICMS_ST")

    reg_C105_ids_RegistroC100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c100",
        string="Documento - Nota Fiscal (código 01)",
        required=True,
        ondelete="cascade",
        help=(
            "Documento - Nota Fiscal (código 01), Nota Fiscal Avulsa (código "
            "1B), Nota Fiscal de Produtor (código 04), Nota Fiscal Eletrônica "
            "(código 55) e Nota Fis- cal Eletrônica para Consumidor Final "
            "(código 65)"
        ),
    )


class RegistroC110(models.Model):
    """Complemento de Documento - Informação Complementar da Nota Fiscal
    (código 01, 1B, 55)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c110"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_INF = fields.Char(
        string="Código da informação complementar",
        sped_length=6,
        help=(
            "Código da informação complementar do documento fiscal (campo 02 "
            "do Registro 0450)"
        ),
    )

    TXT_COMPL = fields.Char(string="Descrição complementar do código de referência")

    reg_C110_ids_RegistroC100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c100",
        string="Documento - Nota Fiscal (código 01)",
        required=True,
        ondelete="cascade",
        help=(
            "Documento - Nota Fiscal (código 01), Nota Fiscal Avulsa (código "
            "1B), Nota Fiscal de Produtor (código 04), Nota Fiscal Eletrônica "
            "(código 55) e Nota Fis- cal Eletrônica para Consumidor Final "
            "(código 65)"
        ),
    )

    reg_C111_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c111",
        "reg_C111_ids_RegistroC110_id",
        string="C111 Complemento de Documento",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help="C111 Complemento de Documento - Processo referenciado",
    )

    reg_C112_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c112",
        "reg_C112_ids_RegistroC110_id",
        string="C112 Complemento de Documento",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C112 Complemento de Documento - Documento de Arrecadação " "Referenciado"
        ),
    )

    reg_C113_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c113",
        "reg_C113_ids_RegistroC110_id",
        string="C113 Complemento de Documento",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=("C113 Complemento de Documento - Documento Fiscal Referenciado"),
    )

    reg_C114_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c114",
        "reg_C114_ids_RegistroC110_id",
        string="C114 Complemento de Documento",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help="C114 Complemento de Documento - Cupom Fiscal Referenciado",
    )

    reg_C115_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c115",
        "reg_C115_ids_RegistroC110_id",
        string="C115 Local de coleta e/ou entrega",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help="C115 Local de coleta e/ou entrega (CÓDIGOS 01, 1B e 04)",
    )

    reg_C116_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c116",
        "reg_C116_ids_RegistroC110_id",
        string="C116 Cupom Fiscal Eletrônico",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help="C116 Cupom Fiscal Eletrônico - CF-e referenciado",
    )


class RegistroC111(models.Model):
    "Complemento de Documento - Processo referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c111"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório", sped_length=15
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 0",
        help=(
            "Indicador da origem do processo: 0 - SEFAZ; 1 - Justiça Federal; "
            "2 - Justiça Estadual; 3 - SECEX/SRF 9 - Outros."
        ),
    )

    reg_C111_ids_RegistroC110_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c110",
        string="Complemento de Documento",
        required=True,
        ondelete="cascade",
        help=(
            "Complemento de Documento - Informação Complementar da Nota Fiscal"
            " (código 01, 1B, 55)"
        ),
    )


class RegistroC112(models.Model):
    "Complemento de Documento - Documento de Arrecadação Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c112"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_DA = fields.Char(
        string="Código do modelo do documento de arrecadação ",
        help=(
            "Código do modelo do documento de arrecadação : 0 – Documento "
            "estadual de arrecadação 1 – GNRE"
        ),
    )

    UF = fields.Char(string="Unidade federada beneficiária do recolhimento")

    NUM_DA = fields.Char(string="Número do documento de arrecadação")

    COD_AUT = fields.Char(string="Código completo da autenticação bancária")

    VL_DA = fields.Monetary(
        string="Valor do total do documento de arrecadação",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do total do documento de arrecadação (principal, "
            "atualização monetária, juros e multa)"
        ),
    )

    DT_VCTO = fields.Date(string="Data de vencimento do documento de arrecadação")

    DT_PGTO = fields.Date(
        string="Data de pagamento do documento de arrecadação",
        help=(
            "Data de pagamento do documento de arrecadação, ou data do "
            "vencimento, no caso de ICMS antecipado a recolher."
        ),
    )

    reg_C112_ids_RegistroC110_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c110",
        string="Complemento de Documento",
        required=True,
        ondelete="cascade",
        help=(
            "Complemento de Documento - Informação Complementar da Nota Fiscal"
            " (código 01, 1B, 55)"
        ),
    )


class RegistroC113(models.Model):
    "Complemento de Documento - Documento Fiscal Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c113"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    IND_OPER = fields.Char(
        string="Indicador do tipo de operação",
        help=(
            "Indicador do tipo de operação: 0- Entrada/aquisição; 1- " "Saída/prestação"
        ),
    )

    IND_EMIT = fields.Char(
        string="Indicador do emitente do título",
        help=("Indicador do emitente do título: 0- Emissão própria; 1- Terceiros"),
    )

    COD_PART = fields.Char(
        string="Código do participante emitente",
        sped_length=60,
        help=(
            "Código do participante emitente (campo 02 do Registro 0150) do "
            "documento referenciado."
        ),
    )

    COD_MOD = fields.Char(
        string="Código do documento fiscal",
        help="Código do documento fiscal, conforme a Tabela 4.1.1",
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    SUB = fields.Integer(string="Subsérie do documento fiscal", sped_length=3)

    NUM_DOC = fields.Integer(string="Número do documento fiscal", sped_length=9)

    DT_DOC = fields.Date(string="Data da emissão do documento fiscal")

    CHV_DOCe = fields.Integer(string="Chave do Documento Eletrônico")

    reg_C113_ids_RegistroC110_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c110",
        string="Complemento de Documento",
        required=True,
        ondelete="cascade",
        help=(
            "Complemento de Documento - Informação Complementar da Nota Fiscal"
            " (código 01, 1B, 55)"
        ),
    )


class RegistroC114(models.Model):
    "Complemento de Documento - Cupom Fiscal Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c114"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        help=(
            "Código do modelo do documento fiscal, conforme a tabela indicada "
            "no item 4.1.1"
        ),
    )

    ECF_FAB = fields.Char(string="Número de série de fabricação do ECF", sped_length=21)

    ECF_CX = fields.Integer(string="Número do caixa atribuído ao ECF", sped_length=3)

    NUM_DOC = fields.Integer(string="Número do documento fiscal", sped_length=9)

    DT_DOC = fields.Date(string="Data da emissão do documento fiscal")

    reg_C114_ids_RegistroC110_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c110",
        string="Complemento de Documento",
        required=True,
        ondelete="cascade",
        help=(
            "Complemento de Documento - Informação Complementar da Nota Fiscal"
            " (código 01, 1B, 55)"
        ),
    )


class RegistroC115(models.Model):
    "Local de coleta e/ou entrega (CÓDIGOS 01, 1B e 04)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c115"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    IND_CARGA = fields.Integer(
        string="Indicador do tipo de transporte",
        help=(
            "Indicador do tipo de transporte: 0 – Rodoviário; 1 – Ferroviário;"
            " 2 – Rodo-Ferroviário; 3 – Aquaviário; 4 – Dutoviário; 5 – Aéreo;"
            " 9 – Outros."
        ),
    )

    CNPJ_COL = fields.Char(string="Número do CNPJ do contribuinte do local de coleta")

    IE_COL = fields.Char(
        string="Inscrição Estadual do contribuinte do local",
        sped_length=14,
        help="Inscrição Estadual do contribuinte do local de coleta",
    )

    CPF_COL = fields.Char(
        string="CPF do contribuinte do local de coleta",
        help="CPF do contribuinte do local de coleta das mercadorias",
    )

    COD_MUN_COL = fields.Integer(string="Código do Município do local de coleta")

    CNPJ_ENTG = fields.Char(string="Número do CNPJ do contribuinte do local de entrega")

    IE_ENTG = fields.Char(
        string="IE_ENTG",
        sped_length=14,
        help="Inscrição Estadual do contribuinte do local de entrega",
    )

    CPF_ENTG = fields.Char(string="CPF do contribuinte do local de entrega")

    COD_MUN_ENTG = fields.Integer(string="Código do Município do local de entrega")

    reg_C115_ids_RegistroC110_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c110",
        string="Complemento de Documento",
        required=True,
        ondelete="cascade",
        help=(
            "Complemento de Documento - Informação Complementar da Nota Fiscal"
            " (código 01, 1B, 55)"
        ),
    )


class RegistroC116(models.Model):
    "Cupom Fiscal Eletrônico - CF-e referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c116"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        sped_length=2,
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    NR_SAT = fields.Integer(string="Número de Série do equipamento SAT", sped_length=9)

    CHV_CFE = fields.Integer(string="Chave do Cupom Fiscal Eletrônico", sped_length=44)

    NUM_CFE = fields.Integer(string="Número do cupom fiscal eletrônico", sped_length=6)

    DT_DOC = fields.Date(string="Data da emissão do documento fiscal", sped_length=8)

    reg_C116_ids_RegistroC110_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c110",
        string="Complemento de Documento",
        required=True,
        ondelete="cascade",
        help=(
            "Complemento de Documento - Informação Complementar da Nota Fiscal"
            " (código 01, 1B, 55)"
        ),
    )


class RegistroC120(models.Model):
    "Complemento de Documento - Operações de Importação (código 01 e 55)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c120"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_DOC_IMP = fields.Char(
        string="Documento de importação",
        help=(
            "Documento de importação: 0 – Declaração de Importação; 1 – "
            "Declaração Simplificada de Importação."
        ),
    )

    NUM_DOC_IMP = fields.Char(
        string="Número do documento de Importação", sped_length=15
    )

    PIS_IMP = fields.Float(
        string="Valor pago de PIS na importação",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    COFINSIMP = fields.Float(
        string="Valor pago de COFINS na importação",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    NUM_ACDRAW = fields.Char(
        string="Número do Ato Concessório do regime Drawback", sped_length=20
    )

    reg_C120_ids_RegistroC100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c100",
        string="Documento - Nota Fiscal (código 01)",
        required=True,
        ondelete="cascade",
        help=(
            "Documento - Nota Fiscal (código 01), Nota Fiscal Avulsa (código "
            "1B), Nota Fiscal de Produtor (código 04), Nota Fiscal Eletrônica "
            "(código 55) e Nota Fis- cal Eletrônica para Consumidor Final "
            "(código 65)"
        ),
    )


class RegistroC130(models.Model):
    "Complemento de Documento - ISSQN, IRRF e Previdência Social"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c130"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    VL_SERV_NT = fields.Monetary(
        string="Valor dos serviços sob não-incidência",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor dos serviços sob não-incidência ou não-tributados pelo ICMS"),
    )

    VL_BC_ISSQN = fields.Monetary(
        string="Valor da base de cálculo do ISSQN",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ISSQN = fields.Monetary(
        string="Valor do ISSQN", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_BC_IRRF = fields.Monetary(
        string="Valor da base de cálculo do Imposto",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor da base de cálculo do Imposto de Renda Retido na Fonte",
    )

    VL_IRRF = fields.Monetary(
        string="Valor do Imposto de Renda",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor do Imposto de Renda - Retido na Fonte",
    )

    VL_BC_PREV = fields.Monetary(
        string="Valor da base de cálculo de retenção",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor da base de cálculo de retenção da Previdência Social",
    )

    VL_PREV = fields.Monetary(
        string="Valor destacado para retenção",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor destacado para retenção da Previdência Social",
    )

    reg_C130_ids_RegistroC100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c100",
        string="Documento - Nota Fiscal (código 01)",
        required=True,
        ondelete="cascade",
        help=(
            "Documento - Nota Fiscal (código 01), Nota Fiscal Avulsa (código "
            "1B), Nota Fiscal de Produtor (código 04), Nota Fiscal Eletrônica "
            "(código 55) e Nota Fis- cal Eletrônica para Consumidor Final "
            "(código 65)"
        ),
    )


class RegistroC140(models.Model):
    "Complemento de Documento - Fatura (código 01)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c140"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    IND_EMIT = fields.Char(
        string="Indicador do emitente do título: 0",
        help=("Indicador do emitente do título: 0 - Emissão própria; 1 - " "Terceiros"),
    )

    IND_TIT = fields.Char(
        string="Indicador do tipo de título de crédito",
        help=(
            "Indicador do tipo de título de crédito: 00 - Duplicata; 01 - "
            "Cheque; 02 - Promissória; 03 - Recibo; 99 - Outros (descrever)"
        ),
    )

    DESC_TIT = fields.Char(string="Descrição complementar do título de crédito")

    NUM_TIT = fields.Char(
        string="Número ou código identificador do título",
        help="Número ou código identificador do título de crédito",
    )

    QTD_PARC = fields.Integer(
        string="Quantidade de parcelas a receber/pagar", sped_length=2
    )

    VL_TIT = fields.Monetary(
        string="Valor total dos títulos de créditos",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_C140_ids_RegistroC100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c100",
        string="Documento - Nota Fiscal (código 01)",
        required=True,
        ondelete="cascade",
        help=(
            "Documento - Nota Fiscal (código 01), Nota Fiscal Avulsa (código "
            "1B), Nota Fiscal de Produtor (código 04), Nota Fiscal Eletrônica "
            "(código 55) e Nota Fis- cal Eletrônica para Consumidor Final "
            "(código 65)"
        ),
    )

    reg_C141_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c141",
        "reg_C141_ids_RegistroC140_id",
        string="C141 Complemento de Documento",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=("C141 Complemento de Documento - Vencimento da Fatura (código 01)"),
    )


class RegistroC141(models.Model):
    "Complemento de Documento - Vencimento da Fatura (código 01)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c141"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_PARC = fields.Integer(string="Número da parcela a receber/pagar", sped_length=2)

    DT_VCTO = fields.Date(string="Data de vencimento da parcela")

    reg_C141_ids_RegistroC140_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c140",
        string="Complemento de Documento - Fatura",
        required=True,
        ondelete="cascade",
        help="Complemento de Documento - Fatura (código 01)",
    )


class RegistroC160(models.Model):
    """Complemento de Documento - Volumes Transportados (código 01 e 04) Exce-
    to Combustíveis"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c160"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_PART = fields.Char(
        string="Código do participante",
        sped_length=60,
        help=(
            "Código do participante (campo 02 do Registro 0150): - "
            "transportador, se houver"
        ),
    )

    VEIC_ID = fields.Char(
        string="Placa de identificação do veículo automotor", sped_length=7
    )

    QTD_VOL = fields.Integer(string="Quantidade de volumes transportados")

    PESO_BRT = fields.Float(
        string="Peso bruto dos volumes transportados",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Peso bruto dos volumes transportados (em kg)",
    )

    PESO_LIQ = fields.Float(
        string="Peso líquido dos volumes transportados",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Peso líquido dos volumes transportados (em kg)",
    )

    UF_ID = fields.Char(string="Sigla da UF da placa do veículo", sped_length=2)

    reg_C160_ids_RegistroC100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c100",
        string="Documento - Nota Fiscal (código 01)",
        required=True,
        ondelete="cascade",
        help=(
            "Documento - Nota Fiscal (código 01), Nota Fiscal Avulsa (código "
            "1B), Nota Fiscal de Produtor (código 04), Nota Fiscal Eletrônica "
            "(código 55) e Nota Fis- cal Eletrônica para Consumidor Final "
            "(código 65)"
        ),
    )


class RegistroC165(models.Model):
    "Complemento de Documento - Operações com combustíveis (código 01)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c165"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_PART = fields.Char(
        string="Código do participante",
        sped_length=60,
        help=(
            "Código do participante (campo 02 do Registro 0150): - "
            "transportador, se houver"
        ),
    )

    VEIC_ID = fields.Char(string="Placa de identificação do veículo", sped_length=7)

    COD_AUT = fields.Char(
        string="Código da autorização fornecido",
        help="Código da autorização fornecido pela",
    )

    NR_PASSE = fields.Char(string="Número do Passe Fiscal")

    HORA = fields.Integer(string="Hora da saída das mercadorias")

    TEMPER = fields.Float(
        string="Temperatura em graus Celsius utilizada",
        xsd_type="TDec_1601",
        digits=(
            16,
            1,
        ),
        help=(
            "Temperatura em graus Celsius utilizada para quantificação do "
            "volume de combustível"
        ),
    )

    QTD_VOL = fields.Integer(string="Quantidade de volumes transportados")

    PESO_BRT = fields.Float(
        string="Peso bruto dos volumes transportados",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Peso bruto dos volumes transportados (em kg)",
    )

    PESO_LIQ = fields.Float(
        string="Peso líquido dos volumes transportados",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Peso líquido dos volumes transportados (em kg)",
    )

    NOM_MOT = fields.Char(string="Nome do motorista", sped_length=60)

    CPF = fields.Char(string="CPF do motorista")

    UF_ID = fields.Char(string="Sigla da UF da placa do veículo", sped_length=2)

    reg_C165_ids_RegistroC100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c100",
        string="Documento - Nota Fiscal (código 01)",
        required=True,
        ondelete="cascade",
        help=(
            "Documento - Nota Fiscal (código 01), Nota Fiscal Avulsa (código "
            "1B), Nota Fiscal de Produtor (código 04), Nota Fiscal Eletrônica "
            "(código 55) e Nota Fis- cal Eletrônica para Consumidor Final "
            "(código 65)"
        ),
    )


class RegistroC170(models.Model):
    """Complemento de Documento - Itens do Documento (código 01, 1B, 04 e
    55)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c170"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    NUM_ITEM = fields.Integer(
        string="Número sequencial do item no documento fiscal", sped_length=3
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    DESCR_COMPL = fields.Char(
        string="Descrição complementar do item como adotado",
        help=("Descrição complementar do item como adotado no documento fiscal"),
    )

    QTD = fields.Float(
        string="Quantidade do item",
        xsd_type="TDec_1605",
        digits=(
            16,
            5,
        ),
    )

    UNID = fields.Char(
        string="Unidade do item",
        sped_length=6,
        help="Unidade do item (Campo 02 do registro 0190)",
    )

    VL_ITEM = fields.Monetary(
        string="Valor total do item",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor total do item (mercadorias ou serviços)",
    )

    VL_DESC = fields.Monetary(
        string="Valor do desconto comercial",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_MOV = fields.Char(string="Movimentação física do ITEM/PRODUTO")

    CST_ICMS = fields.Integer(
        string="Código da Situação Tributária referente ao ICMS",
        help=(
            "Código da Situação Tributária referente ao ICMS, conforme a "
            "Tabela indicada no item 4.3.1"
        ),
    )

    CFOP = fields.Integer(string="Código Fiscal de Operação e Prestação")

    COD_NAT = fields.Char(
        string="Código da natureza da operação",
        sped_length=10,
        help="Código da natureza da operação (campo 02 do Registro 0400)",
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_ICMS = fields.Float(
        string="Alíquota do ICMS",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_ICMS = fields.Monetary(
        string="Valor do ICMS creditado/debitado",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ICMS_ST = fields.Monetary(
        string="Valor da base de cálculo referente",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor da base de cálculo referente à substituição tributária",
    )

    ALIQ_ST = fields.Float(
        string="Alíquota do ICMS da substituição tributária",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Alíquota do ICMS da substituição tributária na unidade da "
            "federação de destino"
        ),
    )

    VL_ICMS_ST = fields.Monetary(
        string="Valor do ICMS referente à substituição tributária",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_APUR = fields.Char(
        string="Indicador de período de apuração do IPI",
        help=("Indicador de período de apuração do IPI: 0 - Mensal; 1 - " "Decendial"),
    )

    CST_IPI = fields.Char(
        string="Código da Situação Tributária referente ao IPI",
        help=(
            "Código da Situação Tributária referente ao IPI, conforme a Tabela"
            " indicada no item 4.3.2."
        ),
    )

    COD_ENQ = fields.Char(
        string="Código de enquadramento legal do IPI",
        help=(
            "Código de enquadramento legal do IPI, conforme tabela indicada no"
            " item 4.5.3."
        ),
    )

    VL_BC_IPI = fields.Monetary(
        string="Valor da base de cálculo do IPI",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_IPI = fields.Float(
        string="Alíquota do IPI",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_IPI = fields.Monetary(
        string="Valor do IPI creditado/debitado",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_PIS = fields.Integer(string="Código da Situação Tributária referente ao PIS")

    VL_BC_PIS = fields.Integer(
        string="Valor da base de cálculo do PIS", currency_field="brl_currency_id"
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS (em percentual)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    QUANT_BC_PIS = fields.Integer(string="Quantidade – Base de cálculo PIS")

    ALIQ_PIS = fields.Integer(string="Alíquota do PIS (em reais)", sped_length=8)

    VL_PIS = fields.Monetary(
        string="Valor do PIS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente ao COFINS"
    )

    VL_BC_COFINS = fields.Integer(
        string="Valor da base de cálculo da COFINS", currency_field="brl_currency_id"
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota do COFINS (em percentual)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    QUANT_BC_COFINS = fields.Integer(string="Quantidade – Base de cálculo COFINS")

    ALIQ_COFINS = fields.Integer(string="Alíquota da COFINS (em reais)", sped_length=8)

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_CTA = fields.Char(
        string="Código", help="Código da conta analítica contábil debitada/creditada"
    )

    VL_ABAT_NT = fields.Monetary(
        string="Valor do abatimento não tributado e não comercial",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_C170_ids_RegistroC100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c100",
        string="Documento - Nota Fiscal (código 01)",
        required=True,
        ondelete="cascade",
        help=(
            "Documento - Nota Fiscal (código 01), Nota Fiscal Avulsa (código "
            "1B), Nota Fiscal de Produtor (código 04), Nota Fiscal Eletrônica "
            "(código 55) e Nota Fis- cal Eletrônica para Consumidor Final "
            "(código 65)"
        ),
    )

    reg_C172_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c172",
        "reg_C172_ids_RegistroC170_id",
        string="C172 Complemento de Item",
        sped_card="1:1",
        sped_required="UNDEF_REQUIRED",
        help="C172 Complemento de Item - Operações com ISSQN (código 01)",
    )

    reg_C178_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c178",
        "reg_C178_ids_RegistroC170_id",
        string="C178 Complemento de Item",
        sped_card="1:1",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C178 Complemento de Item - Operações com Produtos Sujeitos a "
            "Tributação de IPI por Unidade ou Quantidade de produto"
        ),
    )

    reg_C179_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c179",
        "reg_C179_ids_RegistroC170_id",
        string="C179 Complemento de Item",
        sped_card="1:1",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C179 Complemento de Item - Informações Complementares ST (código " "01)"
        ),
    )

    reg_C180_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c180",
        "reg_C180_ids_RegistroC170_id",
        string="C180 Informações complementares das operações",
        sped_card="1:1",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C180 Informações complementares das operações de en- trada de "
            "mercadorias sujeitas à substituição tribu- tária (código 01, 1B, "
            "04 e 55)"
        ),
    )

    reg_C171_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c171",
        "reg_C171_ids_RegistroC170_id",
        string="C171 Complemento de Item",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C171 Complemento de Item - Armazenamento de Combustíveis (código " "01,55)"
        ),
    )

    reg_C173_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c173",
        "reg_C173_ids_RegistroC170_id",
        string="C173 Complemento de Item",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C173 Complemento de Item - Operações com Medicamentos (código " "01,55)"
        ),
    )

    reg_C174_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c174",
        "reg_C174_ids_RegistroC170_id",
        string="C174 Complemento de Item",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=("C174 Complemento de Item - Operações com Armas de Fogo (código " "01)"),
    )

    reg_C175_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c175",
        "reg_C175_ids_RegistroC170_id",
        string="C175 Complemento de Item",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C175 Complemento de Item - Operações com Veículos Novos (código " "01,55)"
        ),
    )

    reg_C176_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c176",
        "reg_C176_ids_RegistroC170_id",
        string="C176 Complemento de Item -Ressarcimento de ICMS",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C176 Complemento de Item -Ressarcimento de ICMS em operações com "
            "Substitui- ção Tributária (código 01,55)"
        ),
    )

    reg_C177_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c177",
        "reg_C177_ids_RegistroC170_id",
        string="C177 Complemento de Item – Outras informações",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C177 Complemento de Item – Outras informações (Cód. 01, 55) – "
            "(Válido a partir de 01/01/2019)"
        ),
    )

    reg_C181_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c181",
        "reg_C181_ids_RegistroC170_id",
        string="C181 Informações complementares das operações",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C181 Informações complementares das operações de devolução de "
            "saídas de mercadorias sujeitas à substituição tributária (código "
            "01, 1B, 04 e 55)."
        ),
    )


class RegistroC171(models.Model):
    "Complemento de Item - Armazenamento de Combustíveis (código 01,55)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c171"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_TANQUE = fields.Char(
        string="Tanque onde foi armazenado o combustível", sped_length=3
    )

    QTDE = fields.Float(
        string="Quantidade ou volume armazenado",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    reg_C171_ids_RegistroC170_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c170",
        string="Complemento de Documento",
        required=True,
        ondelete="cascade",
        help=(
            "Complemento de Documento - Itens do Documento (código 01, 1B, 04 " "e 55)"
        ),
    )


class RegistroC172(models.Model):
    "Complemento de Item - Operações com ISSQN (código 01)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c172"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    VL_BC_ISSQN = fields.Monetary(
        string="Valor da base de cálculo do ISSQN",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_ISSQN = fields.Float(
        string="Alíquota do ISSQN",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_ISSQN = fields.Monetary(
        string="Valor do ISSQN", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    reg_C172_ids_RegistroC170_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c170",
        string="Complemento de Documento",
        required=True,
        ondelete="cascade",
        help=(
            "Complemento de Documento - Itens do Documento (código 01, 1B, 04 " "e 55)"
        ),
    )


class RegistroC173(models.Model):
    "Complemento de Item - Operações com Medicamentos (código 01,55)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c173"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    LOTE_MED = fields.Char(string="Número do lote de fabricação do medicamento")

    QTD_ITEM = fields.Float(
        string="Quantidade de item por lote",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    DT_FAB = fields.Date(string="Data de fabricação do medicamento")

    DT_VAL = fields.Date(string="Data de expiração da validade do medicamento")

    IND_MED = fields.Char(
        string="Indicador de tipo de referência da base de cálculo",
        help=(
            "Indicador de tipo de referência da base de cálculo do ICMS (ST) "
            "do produto farmacêutico: 0 - Base de cálculo referente ao preço "
            "tabelado ou preço máximo sugerido; 1 - Base cálculo – Margem de "
            "valor agregado; 2 - Base de cálculo referente à Lista Negativa; 3"
            " - Base de cálculo referente à Lista Positiva; 4 - Base de "
            "cálculo referente à Lista Neutra"
        ),
    )

    TP_PROD = fields.Char(
        string="Tipo de produto: 0 - Similar; 1",
        help=("Tipo de produto: 0 - Similar; 1 - Genérico; 2 - Ético ou de " "marca;"),
    )

    VL_TAB_MAX = fields.Monetary(
        string="Valor do preço tabelado ou valor do preço máximo",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_C173_ids_RegistroC170_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c170",
        string="Complemento de Documento",
        required=True,
        ondelete="cascade",
        help=(
            "Complemento de Documento - Itens do Documento (código 01, 1B, 04 " "e 55)"
        ),
    )


class RegistroC174(models.Model):
    "Complemento de Item - Operações com Armas de Fogo (código 01)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c174"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    IND_ARM = fields.Char(
        string="Indicador do tipo da arma de fogo: 0",
        help=(
            "Indicador do tipo da arma de fogo: 0 - Uso permitido; 1 - Uso " "restrito"
        ),
    )

    NUM_ARM = fields.Char(string="Numeração de série de fabricação da arma")

    DESCR_COMPL = fields.Char(
        string="Descrição da arma",
        help=(
            "Descrição da arma, compreendendo: número do cano, calibre, marca,"
            " capacidade de cartuchos, tipo de funcionamento, quantidade de "
            "canos, comprimento, tipo de alma, quantidade e sentido das raias "
            "e demais elementos que permitam sua perfeita identificação"
        ),
    )

    reg_C174_ids_RegistroC170_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c170",
        string="Complemento de Documento",
        required=True,
        ondelete="cascade",
        help=(
            "Complemento de Documento - Itens do Documento (código 01, 1B, 04 " "e 55)"
        ),
    )


class RegistroC175(models.Model):
    "Complemento de Item - Operações com Veículos Novos (código 01,55)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c175"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    IND_VEIC_OPER = fields.Char(
        string="Indicador do tipo de operação com veículo",
        help=(
            "Indicador do tipo de operação com veículo: 0 - Venda para "
            "concessionária; 1 - Faturamento direto; 2 - Venda direta;"
        ),
    )

    CNPJ = fields.Char(string="CNPJ da Concessionária")

    UF = fields.Char(string="Sigla da unidade da federação da Concessionária")

    CHASSI_VEIC = fields.Char(string="Chassi do veículo", sped_length=17)

    reg_C175_ids_RegistroC170_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c170",
        string="Complemento de Documento",
        required=True,
        ondelete="cascade",
        help=(
            "Complemento de Documento - Itens do Documento (código 01, 1B, 04 " "e 55)"
        ),
    )


class RegistroC176(models.Model):
    """Complemento de Item -Ressarcimento de ICMS em operações com Substitui-
    ção Tributária (código 01,55)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c176"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_MOD_ULT_E = fields.Char(
        string="Código do modelo do documento fiscal relativa",
        help=("Código do modelo do documento fiscal relativa a última entrada"),
    )

    NUM_DOC_ULT_E = fields.Integer(
        string="Número do documento fiscal relativa",
        sped_length=9,
        help="Número do documento fiscal relativa a última entrada",
    )

    SER_ULT_E = fields.Char(
        string="Série do documento fiscal relativa",
        sped_length=3,
        help="Série do documento fiscal relativa a última entrada",
    )

    DT_ULT_E = fields.Date(string="Data relativa a última entrada da mercadoria")

    COD_PART_ULT_E = fields.Char(
        string="Código do participante",
        sped_length=60,
        help=(
            "Código do participante (do emitente do documento relativa a "
            "última entrada)"
        ),
    )

    QUANT_ULT_E = fields.Float(
        string="Quantidade do item relativa a última entrada",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    VL_UNIT_ULT_E = fields.Float(
        string="Valor unitário da mercadoria constante",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help=(
            "Valor unitário da mercadoria constante na NF relativa a última "
            "entrada inclusive despesas acessórias."
        ),
    )

    VL_UNIT_BC_ST = fields.Float(
        string="Valor unitário da base de cálculo",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help="Valor unitário da base de cálculo do",
    )

    CHAVE_NFE_ULT_E = fields.Integer(
        string="Número completo da chave da NFe relativo",
        help="Número completo da chave da NFe relativo à última entrada",
    )

    NUM_ITEM_ULT_E = fields.Integer(
        string="Número sequencial do item na NF entrada",
        sped_length=3,
        help=(
            "Número sequencial do item na NF entrada que corresponde à "
            "mercadoria objeto de pedido de ressarcimento"
        ),
    )

    VL_UNIT_BC_ICMS_ULT_E = fields.Monetary(
        string="VL_UNIT_BC_ICMS_ULT_E",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor unitário da base de cálculo da operação própria do "
            "remetente sob o regime comum de tributação"
        ),
    )

    ALIQ_ICMS_ULT_E = fields.Float(
        string="Alíquota do ICMS aplicável à última entrada",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Alíquota do ICMS aplicável à última entrada da mercadoria",
    )

    VL_UNIT_LIMITE_BC_ICMS_ULT_E = fields.Monetary(
        string="Valor unitário da base de cálculo do ICMS relativo",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor unitário da base de cálculo do ICMS relativo à última "
            "entrada da mercadoria, limitado ao valor da BC da retenção "
            "(corresponde ao menor valor entre os campos VL_UNIT_BC_ST e "
            "VL_UNIT_BC_ICMS_ULT_E )"
        ),
    )

    VL_UNIT_ICMS_ULT_E = fields.Float(
        string="Valor unitário do crédito",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help=(
            "Valor unitário do crédito de ICMS sobre operações próprias do "
            "remetente, relativo à última entrada da mercadoria, decorrente da"
            " quebra da ST – equivalente a multiplicação entre os campos 13 e "
            "14"
        ),
    )

    ALIQ_ST_ULT_E = fields.Float(
        string="Alíquota do ICMS ST relativa à última entrada",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Alíquota do ICMS ST relativa à última entrada da mercadoria",
    )

    VL_UNIT_RES = fields.Float(
        string="Valor unitário do ressarcimento",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help=(
            "Valor unitário do ressarcimento (parcial ou completo) de ICMS "
            "decorrente da quebra da ST"
        ),
    )

    COD_RESP_RET = fields.Integer(
        string="Código que indica o responsável pela retenção",
        help=(
            "Código que indica o responsável pela retenção do ICMS ST: 1 - "
            "Remetente Direto Regime Comum 2 - Remetente Indireto 3 - Próprio "
            "Declarante 4 – Remetente Direto Simples Nacional"
        ),
    )

    COD_MOT_RES = fields.Integer(
        string="Código do motivo do ressarcimento: 1",
        help=(
            "Código do motivo do ressarcimento: 1 - Saída para outra UF; 2 "
            "-Saída amparada por isenção ou não incidência; 3 - Perda ou "
            "deterioração; 4 - Furto ou roubo; 5 - Exportação; 6 - Venda "
            "interna para Simples Nacional 9 - Outros"
        ),
    )

    CHAVE_NFE_RET = fields.Integer(
        string="Número completo da chave da NF-e emitida",
        help=(
            "Número completo da chave da NF-e emitida pelo substituto, na qual"
            " consta o valor do ICMS ST retido"
        ),
    )

    COD_PART_NFE_RET = fields.Char(
        string="Código do participante do emitente da NF-e",
        sped_length=60,
        help=(
            "Código do participante do emitente da NF-e em que houve a "
            "retenção do ICMS ST – campo 02 do registro 0150"
        ),
    )

    SER_NFE_RET = fields.Char(
        string="Série da NF-e em que houve a retenção do ICMS ST", sped_length=3
    )

    NUM_NFE_RET = fields.Integer(
        string="Número da NF-e em que houve a retenção do ICMS ST", sped_length=9
    )

    ITEM_NFE_RET = fields.Integer(
        string="Número sequencial do item na NF-e",
        sped_length=3,
        help=(
            "Número sequencial do item na NF-e em que houve a retenção do ICMS"
            " ST, que corresponde à mercadoria objeto de pedido de "
            "ressarcimento"
        ),
    )

    COD_DA = fields.Char(
        string="Código do modelo do documento", help="Código do modelo do documento de"
    )

    NUM_DA = fields.Char(
        string="Número do documento de arrecadação estadual",
        help="Número do documento de arrecadação estadual, se houver",
    )

    VL_UNIT_RES_FCP_ST = fields.Float(
        string="VL_UNIT_RES_FCP_ST",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help=(
            "Valor unitário do ressarcimento (parcial ou completo) de FCP "
            "decorrente da quebra da ST"
        ),
    )

    reg_C176_ids_RegistroC170_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c170",
        string="Complemento de Documento",
        required=True,
        ondelete="cascade",
        help=(
            "Complemento de Documento - Itens do Documento (código 01, 1B, 04 " "e 55)"
        ),
    )


class RegistroC177(models.Model):
    """Complemento de Item – Outras informações (Cód. 01, 55) – (Válido a
    partir de 01/01/2019)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c177"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_SELO_IPI = fields.Char(
        string="Código do selo de controle do IPI",
        help="Código do selo de controle do IPI, conforme Tabela 4.5.2",
    )

    QT_SELO_IPI = fields.Integer(
        string="Quantidade de selo de controle do IPI aplicada", sped_length=12
    )

    reg_C177_ids_RegistroC170_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c170",
        string="Complemento de Documento",
        required=True,
        ondelete="cascade",
        help=(
            "Complemento de Documento - Itens do Documento (código 01, 1B, 04 " "e 55)"
        ),
    )


class RegistroC178(models.Model):
    """Complemento de Item - Operações com Produtos Sujeitos a Tributação de
    IPI por Unidade ou Quantidade de produto"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c178"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    CL_ENQ = fields.Char(
        string="Código da classe de enquadramento do IPI",
        sped_length=5,
        help=("Código da classe de enquadramento do IPI, conforme Tabela 4.5.1."),
    )

    VL_UNID = fields.Monetary(
        string="Valor por unidade padrão de tributação",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    QUANT_PAD = fields.Float(
        string="Quantidade total de produtos na unidade padrão",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help="Quantidade total de produtos na unidade padrão de tributação",
    )

    reg_C178_ids_RegistroC170_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c170",
        string="Complemento de Documento",
        required=True,
        ondelete="cascade",
        help=(
            "Complemento de Documento - Itens do Documento (código 01, 1B, 04 " "e 55)"
        ),
    )


class RegistroC179(models.Model):
    "Complemento de Item - Informações Complementares ST (código 01)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c179"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    BC_ST_ORIG_DEST = fields.Float(
        string="Valor da base de cálculo ST na origem/destino",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Valor da base de cálculo ST na origem/destino em operações "
            "interestaduais."
        ),
    )

    ICMS_ST_REP = fields.Float(
        string="Valor do ICMS ST a repassar/deduzir",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=("Valor do ICMS ST a repassar/deduzir em operações interestaduais"),
    )

    ICMS_ST_COMPL = fields.Float(
        string="Valor do ICMS ST a complementar à UF de destino",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    BC_RET = fields.Float(
        string="Valor da BC de retenção em remessa promovida",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Valor da BC de retenção em remessa promovida por Substituído "
            "intermediário"
        ),
    )

    ICMS_RET = fields.Float(
        string="Valor da parcela do imposto retido",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Valor da parcela do imposto retido em remessa promovida por "
            "substituído intermediário"
        ),
    )

    reg_C179_ids_RegistroC170_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c170",
        string="Complemento de Documento",
        required=True,
        ondelete="cascade",
        help=(
            "Complemento de Documento - Itens do Documento (código 01, 1B, 04 " "e 55)"
        ),
    )


class RegistroC180(models.Model):
    """Informações complementares das operações de en- trada de mercadorias
    sujeitas à substituição tribu- tária (código 01, 1B, 04 e 55)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c180"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_RESP_RET = fields.Integer(
        string="Código que indica o responsável pela retenção",
        help=(
            "Código que indica o responsável pela retenção do ICMS ST: "
            "1-Remetente Direto 2-Remetente Indireto 3-Próprio declarante"
        ),
    )

    QUANT_CONV = fields.Float(
        string="Quantidade do item",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    UNID = fields.Char(
        string="Unidade adotada para informar o campo QUANT_CONV", sped_length=6
    )

    VL_UNIT_CONV = fields.Float(
        string="Valor unitário da mercadoria",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor unitário da mercadoria, considerando a unidade utilizada "
            "para informar o campo “QUANT_CONV”."
        ),
    )

    VL_UNIT_ICMS_OP_CONV = fields.Float(
        string="Valor unitário do ICMS operação própria",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor unitário do ICMS operação própria que o informante teria "
            "direito ao crédito caso a mercadoria estivesse sob o regime comum"
            " de tributação, considerando unidade utilizada para informar o "
            "campo “QUANT_CONV”."
        ),
    )

    VL_UNIT_BC_ICMS_ST_CONV = fields.Float(
        string="Valor unitário da base de cálculo do imposto pago",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor unitário da base de cálculo do imposto pago ou retido "
            "anteriormente por substituição, considerando a unidade utilizada "
            "para informar o campo “QUANT_CONV”, aplicando-se redução, se "
            "houver."
        ),
    )

    VL_UNIT_ICMS_ST_CONV = fields.Float(
        string="Valor unitário do imposto pago",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor unitário do imposto pago ou retido anteriormente por "
            "substituição, inclusive FCP se devido, considerando a unidade "
            "utilizada para informar o campo “QUANT_CONV”."
        ),
    )

    VL_UNIT_FCP_ST_CONV = fields.Float(
        string="Valor unitário do FCP_ST agregado",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor unitário do FCP_ST agregado ao valor informado no campo "
            "“VL_UNIT_ICMS_ST_CONV”"
        ),
    )

    COD_DA = fields.Char(
        string="Código do modelo do documento de arrecadação",
        help=(
            "Código do modelo do documento de arrecadação: 0 – Documento "
            "estadual de arrecadação 1 – GNRE"
        ),
    )

    NUM_DA = fields.Char(
        string="Número do documento de arrecadação",
        help="Número do documento de arrecadação, se houver",
    )

    reg_C180_ids_RegistroC170_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c170",
        string="Complemento de Documento",
        required=True,
        ondelete="cascade",
        help=(
            "Complemento de Documento - Itens do Documento (código 01, 1B, 04 " "e 55)"
        ),
    )


class RegistroC181(models.Model):
    """Informações complementares das operações de devolução de saídas de
    mercadorias sujeitas à substituição tributária (código 01, 1B, 04 e
    55)."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c181"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_MOT_REST_COMPL = fields.Char(
        string="Código do motivo da restituição",
        help=(
            "Código do motivo da restituição ou complementação conforme Tabela" " 5.7"
        ),
    )

    QUANT_CONV = fields.Float(
        string="Quantidade do item",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    UNID = fields.Char(
        string="Unidade adotada para informar o campo QUANT_CONV", sped_length=6
    )

    COD_MOD_SAIDA = fields.Char(
        string="Código do modelo do documento fiscal de saída",
        help=(
            "Código do modelo do documento fiscal de saída, conforme a tabela "
            "indicada no item 4.1.1"
        ),
    )

    SERIE_SAIDA = fields.Char(
        string="Número de série do documento de saída em papel", sped_length=3
    )

    ECF_FAB_SAIDA = fields.Char(
        string="Número de série de fabricação do equipamento ECF", sped_length=21
    )

    NUM_DOC_SAIDA = fields.Integer(
        string="Número do documento fiscal de saída", sped_length=9
    )

    CHV_DFE_SAIDA = fields.Integer(
        string="Chave do documento fiscal eletrônico de saída"
    )

    DT_DOC_SAIDA = fields.Date(string="Data da emissão do documento fiscal de saída")

    NUM_ITEM_SAIDA = fields.Integer(
        string="Número do item em que foi escriturada a saída",
        sped_length=3,
        help=(
            "Número do item em que foi escriturada a saída em um registro "
            "C185, C380, C480 ou C815 quando o contribuinte informar a saída "
            "em um arquivo de perfil A."
        ),
    )

    VL_UNIT_CONV_SAIDA = fields.Float(
        string="Valor unitário da mercadoria",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor unitário da mercadoria, considerando a unidade utilizada "
            "para informar o campo “QUANT_CONV”, correspondente ao valor do "
            "campo VL_UNIT_CONV, preenchido na ocasião da saída"
        ),
    )

    reg_C181_ids_RegistroC170_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c170",
        string="Complemento de Documento",
        required=True,
        ondelete="cascade",
        help=(
            "Complemento de Documento - Itens do Documento (código 01, 1B, 04 " "e 55)"
        ),
    )


class RegistroC185(models.Model):
    """Informações complementares das operações de sa- ída de mercadorias
    sujeitas à substituição tributária (código 01, 1B, 04 e 55)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c185"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    NUM_ITEM = fields.Integer(
        string="Número sequencial do item no documento fiscal", sped_length=3
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    CST_ICMS = fields.Integer(string="Código da Situação Tributária referente ao ICMS")

    CFOP = fields.Integer(string="Código Fiscal de Operação e Prestação")

    COD_MOT_REST_COMPL = fields.Char(
        string="Código do motivo da restituição",
        help=(
            "Código do motivo da restituição ou complementação conforme Tabela" " 5.7"
        ),
    )

    QUANT_CONV = fields.Float(
        string="Quantidade do item",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    UNID = fields.Char(
        string="Unidade adotada para informar o campo QUANT_CONV", sped_length=6
    )

    VL_UNIT_CONV = fields.Float(
        string="Valor unitário da mercadoria",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor unitário da mercadoria, considerando a unidade utilizada "
            "para informar o campo “QUANT_CONV”."
        ),
    )

    VL_UNIT_ICMS_NA_OPERACAO_CONV = fields.Float(
        string="Valor unitário para o ICMS na operação",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor unitário para o ICMS na operação, caso não houvesse a ST, "
            "considerando unidade utilizada para informar o campo "
            "“QUANT_CONV”, considerando redução da base de cálculo do ICMS ST "
            "na tributação, se houver."
        ),
    )

    VL_UNIT_ICMS_OP_CONV = fields.Float(
        string="Valor unitário do ICMS OP calculado conforme",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor unitário do ICMS OP calculado conforme a legislação de cada"
            " UF, considerando a unidade utilizada para informar o campo "
            "“QUANT_CONV”, utilizado para cálculo de ressarcimento/restituição"
            " de ST, no desfazimento da substituição tributária, quando se "
            "utiliza a fórmula descrita nas instruções de preenchimento do "
            "campo 15, no item a1)."
        ),
    )

    VL_UNIT_ICMS_OP_ESTOQUE_CONV = fields.Float(
        string="Valor médio unitário do ICMS",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor médio unitário do ICMS que o contribuinte teria se "
            "creditado referente à operação de entrada das mercadorias em "
            "estoque caso estivesse submetida ao regime comum de tributação, "
            "calculado conforme a legislação de cada UF, considerando a "
            "unidade utilizada para informar o campo “QUANT_CONV”"
        ),
    )

    VL_UNIT_ICMS_ST_ESTOQUE_CONV = fields.Float(
        string="Valor médio unitário do ICMS ST",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor médio unitário do ICMS ST, incluindo FCP ST, das "
            "mercadorias em estoque, considerando a unidade utilizada para "
            "informar o campo “QUANT_CONV”"
        ),
    )

    reg_C185_ids_RegistroC100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c100",
        string="Documento - Nota Fiscal (código 01)",
        required=True,
        ondelete="cascade",
        help=(
            "Documento - Nota Fiscal (código 01), Nota Fiscal Avulsa (código "
            "1B), Nota Fiscal de Produtor (código 04), Nota Fiscal Eletrônica "
            "(código 55) e Nota Fis- cal Eletrônica para Consumidor Final "
            "(código 65)"
        ),
    )


class RegistroC186(models.Model):
    """Informações complementares das operações de devolução de entradas de
    mercadorias sujeitas à substituição tributária (código 01, 1B, 04 e
    55)."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c186"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    NUM_ITEM = fields.Integer(
        string="Número sequencial do item no documento fiscal",
        sped_length=3,
        help="Número sequencial do item no documento fiscal de saída",
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    CST_ICMS = fields.Integer(
        string="Código da Situação Tributária referente ao ICMS",
        help=(
            "Código da Situação Tributária referente ao ICMS no documento "
            "fiscal de saída"
        ),
    )

    CFOP = fields.Integer(
        string="Código Fiscal de Operação e Prestação",
        help=("Código Fiscal de Operação e Prestação no documento fiscal de " "saída"),
    )

    COD_MOT_REST_COMPL = fields.Char(
        string="Código do motivo da restituição",
        help=(
            "Código do motivo da restituição ou complementação conforme Tabela" " 5.7"
        ),
    )

    QUANT_CONV = fields.Float(
        string="Quantidade do item no documento fiscal de saída",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Quantidade do item no documento fiscal de saída de acordo com as "
            "instruções de preenchimento."
        ),
    )

    UNID = fields.Char(
        string="Unidade adotada para informar o campo QUANT_CONV", sped_length=6
    )

    COD_MOD_ENTRADA = fields.Char(
        string="Código do modelo do documento fiscal de entrada",
        help=(
            "Código do modelo do documento fiscal de entrada, conforme a "
            "tabela indicada no item 4.1.1"
        ),
    )

    SERIE_ENTRADA = fields.Char(
        string="Número de série do documento de entrada em papel", sped_length=3
    )

    NUM_DOC_ENTRADA = fields.Integer(
        string="Número do documento fiscal de entrada", sped_length=9
    )

    CHV_DFE_ENTRADA = fields.Integer(
        string="Chave do documento fiscal eletrônico de entrada"
    )

    DT_DOC_ENTRADA = fields.Date(
        string="Data da emissão do documento fiscal de entrada"
    )

    NUM_ITEM_ENTRADA = fields.Integer(
        string="Item do documento fiscal de entrada", sped_length=3
    )

    VL_UNIT_CONV_ENTRADA = fields.Float(
        string="Valor unitário da mercadoria",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor unitário da mercadoria, considerando a unidade utilizada "
            "para informar o campo “QUANT_CONV”, correspondente ao valor do "
            "campo VL_UNIT_CONV, preenchido na ocasião da entrada"
        ),
    )

    VL_UNIT_ICMS_OP_CONV_ENTRADA = fields.Float(
        string="Valor unitário do ICMS correspondente ao valor",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor unitário do ICMS correspondente ao valor do campo "
            "VL_UNIT_ICMS_OP_CONV, preenchido na ocasião da entrada"
        ),
    )

    reg_C186_ids_RegistroC100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c100",
        string="Documento - Nota Fiscal (código 01)",
        required=True,
        ondelete="cascade",
        help=(
            "Documento - Nota Fiscal (código 01), Nota Fiscal Avulsa (código "
            "1B), Nota Fiscal de Produtor (código 04), Nota Fiscal Eletrônica "
            "(código 55) e Nota Fis- cal Eletrônica para Consumidor Final "
            "(código 65)"
        ),
    )


class RegistroC190(models.Model):
    "Registro Analítico do Documento (código 01, 1B, 04, 55 e 65)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c190"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    CST_ICMS = fields.Integer(
        string="Código da Situação Tributária",
        help=(
            "Código da Situação Tributária, conforme a Tabela indicada no item" " 4.3.1"
        ),
    )

    CFOP = fields.Integer(
        string="Código Fiscal de Operação e Prestação",
        help=("Código Fiscal de Operação e Prestação do agrupamento de itens"),
    )

    ALIQ_ICMS = fields.Float(
        string="Alíquota do ICMS",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_OPR = fields.Monetary(
        string="Valor da operação na combinação de CST_ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da operação na combinação de CST_ICMS, CFOP e alíquota do "
            "ICMS, correspondente ao somatório do valor das mercadorias, "
            "despesas acessórias (frete, seguros e outras despesas "
            "acessórias), ICMS_ST, FCP_ST e IPI."
        ),
    )

    VL_BC_ICMS = fields.Monetary(
        string="Parcela correspondente ao 'Valor da base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao 'Valor da base de cálculo do ICMS' "
            "referente à combinação de CST_ICMS, CFOP e alíquota do ICMS."
        ),
    )

    VL_ICMS = fields.Monetary(
        string="Parcela correspondente ao 'Valor do ICMS'",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao 'Valor do ICMS', incluindo o FCP, "
            "quando aplicável, referente à combinação de CST_ICMS, CFOP e "
            "alíquota do ICMS."
        ),
    )

    VL_BC_ICMS_ST = fields.Monetary(
        string="VL_BC_ICMS_ST",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao 'Valor da base de cálculo do ICMS' da "
            "substituição tributária referente à combinação de CST_ICMS, CFOP "
            "e alíquota do ICMS."
        ),
    )

    VL_ICMS_ST = fields.Monetary(
        string="Parcela correspondente ao valor creditado/debitado",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao valor creditado/debitado do ICMS da "
            "substituição tributária, incluindo o FCP_ ST, quando aplicável, "
            "referente à combinação de CST_ICMS, CFOP, e alíquota do ICMS."
        ),
    )

    VL_RED_BC = fields.Monetary(
        string="Valor não tributado em função da redução da base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor não tributado em função da redução da base de cálculo do "
            "ICMS, referente à combinação de CST_ICMS, CFOP e alíquota do "
            "ICMS."
        ),
    )

    VL_IPI = fields.Monetary(
        string="Parcela correspondente ao 'Valor do IPI' referente",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao 'Valor do IPI' referente à combinação "
            "CST_ICMS, CFOP e alíquota do ICMS."
        ),
    )

    COD_OBS = fields.Char(
        string="Código da observação do lançamento fiscal",
        sped_length=6,
        help=(
            "Código da observação do lançamento fiscal (campo 02 do Registro " "0460)"
        ),
    )

    reg_C190_ids_RegistroC100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c100",
        string="Documento - Nota Fiscal (código 01)",
        required=True,
        ondelete="cascade",
        help=(
            "Documento - Nota Fiscal (código 01), Nota Fiscal Avulsa (código "
            "1B), Nota Fiscal de Produtor (código 04), Nota Fiscal Eletrônica "
            "(código 55) e Nota Fis- cal Eletrônica para Consumidor Final "
            "(código 65)"
        ),
    )

    reg_C191_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c191",
        "reg_C191_ids_RegistroC190_id",
        string="C191 Informações do Fundo de Combate",
        sped_card="1:1",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C191 Informações do Fundo de Combate à Pobreza – FCP – na NF-e "
            "(código 55)"
        ),
    )


class RegistroC191(models.Model):
    """Informações do Fundo de Combate à Pobreza – FCP – na NF-e (código 55)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c191"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    VL_FCP_OP = fields.Monetary(
        string="Valor do Fundo de Combate à Pobreza",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do Fundo de Combate à Pobreza (FCP) vinculado à operação "
            "própria, na combinação de CST_ICMS, CFOP e alíquota do ICMS"
        ),
    )

    VL_FCP_ST = fields.Monetary(
        string="Valor do Fundo de Combate à Pobreza (VL_FCP_ST)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do Fundo de Combate à Pobreza (FCP) vinculado à operação de"
            " substituição tributária, na combinação de CST_ICMS, CFOP e "
            "alíquota do ICMS."
        ),
    )

    VL_FCP_RET = fields.Monetary(
        string="Valor relativo ao Fundo de Combate à Pobreza",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor relativo ao Fundo de Combate à Pobreza (FCP) retido "
            "anteriormente nas operações com Substituição Tributárias, na "
            "combinação de CST_ICMS, CFOP e alíquota do ICMS"
        ),
    )

    reg_C191_ids_RegistroC190_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c190",
        string="Registro Analítico do Documento",
        required=True,
        ondelete="cascade",
        help="Registro Analítico do Documento (código 01, 1B, 04, 55 e 65)",
    )


class RegistroC195(models.Model):
    """Complemento do Registro Analítico - Observações do Lançamento Fiscal
    (código 01, 1B, 04 e 55)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c195"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_OBS = fields.Char(
        string="Código da observação do lançamento fiscal",
        sped_length=6,
        help=(
            "Código da observação do lançamento fiscal (campo 02 do Registro " "0460)"
        ),
    )

    TXT_COMPL = fields.Char(string="Descrição complementar do código de observação")

    reg_C195_ids_RegistroC100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c100",
        string="Documento - Nota Fiscal (código 01)",
        required=True,
        ondelete="cascade",
        help=(
            "Documento - Nota Fiscal (código 01), Nota Fiscal Avulsa (código "
            "1B), Nota Fiscal de Produtor (código 04), Nota Fiscal Eletrônica "
            "(código 55) e Nota Fis- cal Eletrônica para Consumidor Final "
            "(código 65)"
        ),
    )

    reg_C197_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c197",
        "reg_C197_ids_RegistroC195_id",
        string="C197 Outras Obrigações Tributárias",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C197 Outras Obrigações Tributárias, Ajustes e Informações "
            "provenientes de Docu- mento Fiscal"
        ),
    )


class RegistroC197(models.Model):
    """Outras Obrigações Tributárias, Ajustes e Informações provenientes de
    Docu- mento Fiscal"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c197"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_AJ = fields.Char(
        string="Código do ajustes/benefício/incentivo",
        help=(
            "Código do ajustes/benefício/incentivo, conforme tabela indicada "
            "no item 5.3."
        ),
    )

    DESCR_COMPL_AJ = fields.Char(
        string="Descrição complementar do ajuste",
        help="Descrição complementar do ajuste do documento fiscal",
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    VL_BC_ICMS = fields.Monetary(
        string="Base de cálculo do ICMS ou do ICMS ST",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_ICMS = fields.Float(
        string="Alíquota do ICMS",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_ICMS = fields.Monetary(
        string="Valor do ICMS ou do ICMS ST",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_OUTROS = fields.Monetary(
        string="Outros valores", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    reg_C197_ids_RegistroC195_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c195",
        string="Complemento do Registro Analítico",
        required=True,
        ondelete="cascade",
        help=(
            "Complemento do Registro Analítico - Observações do Lançamento "
            "Fiscal (código 01, 1B, 04 e 55)"
        ),
    )


class RegistroC300(models.Model):
    """Documento - Resumo Diário das Notas Fiscais de Venda a Consumidor (códi-
    go 02)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c300"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    SUB = fields.Char(string="Subsérie do documento fiscal", sped_length=3)

    NUM_DOC_INI = fields.Integer(
        string="Número do documento fiscal inicial", sped_length=6
    )

    NUM_DOC_FIN = fields.Integer(
        string="Número do documento fiscal final", sped_length=6
    )

    DT_DOC = fields.Date(string="Data da emissão dos documentos fiscais")

    VL_DOC = fields.Monetary(
        string="Valor total dos documentos",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_PIS = fields.Monetary(
        string="Valor total do PIS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_COFINS = fields.Monetary(
        string="Valor total da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_CTA = fields.Char(
        string="Código", help="Código da conta analítica contábil debitada/ creditada"
    )

    reg_C310_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c310",
        "reg_C310_ids_RegistroC300_id",
        string="C310 Documentos Cancelados de Nota Fiscal de Venda",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C310 Documentos Cancelados de Nota Fiscal de Venda a Consumidor "
            "(código 02)"
        ),
    )

    reg_C320_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c320",
        "reg_C320_ids_RegistroC300_id",
        string="C320 Registro Analítico das Notas Fiscais de Venda",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C320 Registro Analítico das Notas Fiscais de Venda a Consumidor "
            "(código 02)"
        ),
    )


class RegistroC310(models.Model):
    """Documentos Cancelados de Nota Fiscal de Venda a Consumidor (código
    02)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c310"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    NUM_DOC_CANC = fields.Integer(string="Número do documento fiscal cancelado")

    reg_C310_ids_RegistroC300_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c300",
        string="Documento",
        required=True,
        ondelete="cascade",
        help=(
            "Documento - Resumo Diário das Notas Fiscais de Venda a Consumidor"
            " (códi- go 02)"
        ),
    )


class RegistroC320(models.Model):
    """Registro Analítico das Notas Fiscais de Venda a Consumidor (código
    02)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c320"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    CST_ICMS = fields.Integer(
        string="Código da Situação Tributária",
        help=(
            "Código da Situação Tributária, conforme a Tabela indicada no item" " 4.3.1"
        ),
    )

    CFOP = fields.Integer(string="Código Fiscal de Operação e Prestação")

    ALIQ_ICMS = fields.Float(
        string="Alíquota do ICMS",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_OPR = fields.Monetary(
        string="Valor total acumulado",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total acumulado das operações correspondentes à combinação "
            "de CST_ICMS, CFOP e alíquota do ICMS, incluídas as despesas "
            "acessórias e acréscimos."
        ),
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor acumulado da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor acumulado da base de cálculo do ICMS, referente à "
            "combinação de CST_ICMS, CFOP, e alíquota do ICMS."
        ),
    )

    VL_ICMS = fields.Monetary(
        string="Valor acumulado do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor acumulado do ICMS, referente à combinação de CST_ICMS, CFOP"
            " e alíquota do ICMS."
        ),
    )

    VL_RED_BC = fields.Monetary(
        string="Valor não tributado em função da redução da base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor não tributado em função da redução da base de cálculo do "
            "ICMS, referente à combinação de CST_ICMS, CFOP, e alíquota do "
            "ICMS."
        ),
    )

    COD_OBS = fields.Char(
        string="Código da observação do lançamento fiscal",
        sped_length=6,
        help=(
            "Código da observação do lançamento fiscal (campo 02 do Registro " "0460)"
        ),
    )

    reg_C320_ids_RegistroC300_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c300",
        string="Documento",
        required=True,
        ondelete="cascade",
        help=(
            "Documento - Resumo Diário das Notas Fiscais de Venda a Consumidor"
            " (códi- go 02)"
        ),
    )

    reg_C321_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c321",
        "reg_C321_ids_RegistroC320_id",
        string="C321 Itens dos Resumos Diários dos Documentos",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help="C321 Itens dos Resumos Diários dos Documentos (código 02)",
    )


class RegistroC321(models.Model):
    "Itens dos Resumos Diários dos Documentos (código 02)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c321"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    QTD = fields.Float(
        string="Quantidade acumulada do item",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    UNID = fields.Char(
        string="Unidade do item",
        sped_length=6,
        help="Unidade do item (Campo 02 do registro 0190)",
    )

    VL_ITEM = fields.Monetary(
        string="Valor acumulado do item",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESC = fields.Monetary(
        string="Valor do desconto acumulado",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor acumulado da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS = fields.Monetary(
        string="Valor acumulado do ICMS debitado",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_PIS = fields.Monetary(
        string="Valor acumulado do PIS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_COFINS = fields.Monetary(
        string="Valor acumulado da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_C321_ids_RegistroC320_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c320",
        string="Registro Analítico das Notas Fiscais de Venda",
        required=True,
        ondelete="cascade",
        help=(
            "Registro Analítico das Notas Fiscais de Venda a Consumidor " "(código 02)"
        ),
    )

    reg_C330_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c330",
        "reg_C330_ids_RegistroC321_id",
        string="C330 Informações complementares das operações",
        sped_card="1:1",
        sped_required="UNDEF_REQUIRED",
        help="C330 Informações complementares das operações de sa-",
    )


class RegistroC330(models.Model):
    "Informações complementares das operações de sa-"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c330"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 5

    COD_MOT_REST_COMPL = fields.Char(
        string="Código do motivo da restituição",
        help=(
            "Código do motivo da restituição ou complementação conforme Tabela" " 5.7"
        ),
    )

    QUANT_CONV = fields.Float(
        string="Quantidade do item",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    UNID = fields.Char(
        string="Unidade adotada para informar o campo QUANT_CONV", sped_length=6
    )

    VL_UNIT_CONV = fields.Float(
        string="Valor unitário da mercadoria",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor unitário da mercadoria, considerando a unidade utilizada "
            "para informar o campo “QUANT_CONV”."
        ),
    )

    VL_UNIT_ICMS_NA_OPERACAO_CONV = fields.Float(
        string="Valor unitário para o ICMS na operação",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor unitário para o ICMS na operação, caso não houvesse a ST, "
            "considerando unidade utilizada para informar o campo "
            "“QUANT_CONV”, aplicando-se a mesma redução da base de cálculo do "
            "ICMS ST na tributação, se houver."
        ),
    )

    VL_UNIT_ICMS_OP_CONV = fields.Float(
        string="Valor unitário do ICMS OP calculado conforme",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor unitário do ICMS OP calculado conforme a legislação de cada"
            " UF, considerando a unidade utilizada para informar o campo "
            "“QUANT_CONV”, utilizado para cálculo de ressarcimento/restituição"
            " de ST, no desfazimento da substituição tributária, quando se "
            "utiliza a fórmula descrita nas instruções de preenchimento do "
            "campo 11, no item a1)."
        ),
    )

    VL_UNIT_ICMS_OP_ESTOQUE_CONV = fields.Float(
        string="Valor médio unitário do ICMS",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor médio unitário do ICMS que o contribuinte teria se "
            "creditado referente à operação de entrada das mercadorias em "
            "estoque caso estivesse submetida ao regime comum de tributação, "
            "calculado conforme a legislação de cada UF, considerando a "
            "unidade utilizada para informar o campo “QUANT_CONV”"
        ),
    )

    VL_UNIT_ICMS_ST_ESTOQUE_CONV = fields.Float(
        string="Valor médio unitário do ICMS ST",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor médio unitário do ICMS ST, incluindo FCP ST, das "
            "mercadorias em estoque, considerando unidade utilizada para "
            "informar o campo “QUANT_CONV”."
        ),
    )

    reg_C330_ids_RegistroC321_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c321",
        string="Itens dos Resumos Diários dos Documentos",
        required=True,
        ondelete="cascade",
        help="Itens dos Resumos Diários dos Documentos (código 02)",
    )


class RegistroC350(models.Model):
    "Nota Fiscal de venda a consumidor (código 02)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c350"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    SER = fields.Char(string="Série do documento fiscal", sped_length=3)

    SUB_SER = fields.Char(string="Subsérie do documento fiscal", sped_length=3)

    NUM_DOC = fields.Integer(string="Número do documento fiscal", sped_length=6)

    DT_DOC = fields.Date(string="Data da emissão do documento fiscal")

    CNPJ_CPF = fields.Char(string="CNPJ ou CPF do destinatário", sped_length=14)

    VL_MERC = fields.Monetary(
        string="Valor das mercadorias constantes",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor das mercadorias constantes no documento fiscal",
    )

    VL_DOC = fields.Monetary(
        string="Valor total do documento fiscal",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESC = fields.Monetary(
        string="Valor total do desconto",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_PIS = fields.Monetary(
        string="Valor total do PIS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_COFINS = fields.Monetary(
        string="Valor total da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_CTA = fields.Char(
        string="Código", help="Código da conta analítica contábil debitada/creditada"
    )

    reg_C370_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c370",
        "reg_C370_ids_RegistroC350_id",
        string="C370 Itens do documento (código 02)",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
    )

    reg_C390_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c390",
        "reg_C390_ids_RegistroC350_id",
        string="C390 Registro Analítico das Notas Fiscais de Venda",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C390 Registro Analítico das Notas Fiscais de Venda a Consumidor "
            "(código 02)"
        ),
    )


class RegistroC370(models.Model):
    "Itens do documento (código 02)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c370"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    NUM_ITEM = fields.Integer(
        string="Número sequencial do item no documento fiscal", sped_length=3
    )

    COD_ITEM = fields.Char(
        string="Código do Item",
        sped_length=60,
        help="Código do Item (campo 02 do registro 0200)",
    )

    QTD = fields.Float(
        string="Quantidade do item",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    UNID = fields.Char(
        string="Unidade do item",
        sped_length=6,
        help="Unidade do item (campo 02 do registro 0190)",
    )

    VL_ITEM = fields.Monetary(
        string="Valor total do item",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESC = fields.Monetary(
        string="Valor total do desconto no item",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_C370_ids_RegistroC350_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c350",
        string="Nota Fiscal de venda a consumidor",
        required=True,
        ondelete="cascade",
        help="Nota Fiscal de venda a consumidor (código 02)",
    )

    reg_C380_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c380",
        "reg_C380_ids_RegistroC370_id",
        string="C380 Informações complementares das operações",
        sped_card="1:1",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C380 Informações complementares das operações de sa- ída de "
            "mercadorias sujeitas à substituição tributária (código 02)"
        ),
    )


class RegistroC380(models.Model):
    """Informações complementares das operações de sa- ída de mercadorias
    sujeitas à substituição tributária (código 02)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c380"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_MOT_REST_COMPL = fields.Char(
        string="Código do motivo da restituição",
        help=(
            "Código do motivo da restituição ou complementação conforme Tabela" " 5.7"
        ),
    )

    QUANT_CONV = fields.Float(
        string="Quantidade do item",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    UNID = fields.Char(
        string="Unidade adotada para informar o campo QUANT_CONV", sped_length=6
    )

    VL_UNIT_CONV = fields.Float(
        string="Valor unitário da mercadoria",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor unitário da mercadoria, considerando a unidade utilizada "
            "para informar o campo “QUANT_CONV”."
        ),
    )

    VL_UNIT_ICMS_NA_OPERACAO_CONV = fields.Float(
        string="Valor unitário para o ICMS na operação",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor unitário para o ICMS na operação, caso não houvesse a ST, "
            "considerando unidade utilizada para informar o campo "
            "“QUANT_CONV”, aplicando-se a mesma redução da base de cálculo do "
            "ICMS ST na tributação, se houver."
        ),
    )

    VL_UNIT_ICMS_OP_CONV = fields.Float(
        string="Valor unitário do ICMS OP calculado conforme",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor unitário do ICMS OP calculado conforme a legislação de cada"
            " UF, considerando a unidade utilizada para informar o campo "
            "“QUANT_CONV”, utilizado para cálculo de ressarcimento/restituição"
            " de ST, no desfazimento da substituição tributária, quando se "
            "utiliza a fórmula descrita nas instruções de preenchimento do "
            "campo 11, no item a1)."
        ),
    )

    VL_UNIT_ICMS_OP_ESTOQUE_CONV = fields.Float(
        string="Valor médio unitário do ICMS",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor médio unitário do ICMS que o contribuinte teria se "
            "creditado referente à operação de entrada das mercadorias em "
            "estoque caso estivesse submetida ao regime comum de tributação, "
            "calculado conforme a legislação de cada UF, considerando a "
            "unidade utilizada para informar o campo “QUANT_CONV”"
        ),
    )

    VL_UNIT_ICMS_ST_ESTOQUE_CONV = fields.Float(
        string="Valor médio unitário do ICMS ST",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor médio unitário do ICMS ST, incluindo FCP ST, das "
            "mercadorias em estoque, considerando unidade utilizada para "
            "informar o campo “QUANT_CONV”."
        ),
    )

    reg_C380_ids_RegistroC370_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c370",
        string="Itens do documento (código 02)",
        required=True,
        ondelete="cascade",
    )


class RegistroC390(models.Model):
    """Registro Analítico das Notas Fiscais de Venda a Consumidor (código
    02)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c390"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    CST_ICMS = fields.Integer(
        string="Código da Situação Tributária",
        help=(
            "Código da Situação Tributária, conforme a Tabela indicada no item" " 4.3.1"
        ),
    )

    CFOP = fields.Integer(string="Código Fiscal de Operação e Prestação")

    ALIQ_ICMS = fields.Float(
        string="Alíquota do ICMS",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_OPR = fields.Monetary(
        string="Valor total acumulado",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total acumulado das operações correspondentes à combinação "
            "de CST_ICMS, CFOP e alíquota do ICMS, incluídas as despesas "
            "acessórias e acréscimos."
        ),
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor acumulado da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor acumulado da base de cálculo do ICMS, referente à "
            "combinação de CST_ICMS, CFOP, e alíquota do ICMS."
        ),
    )

    VL_ICMS = fields.Monetary(
        string="Valor acumulado do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor acumulado do ICMS, referente à combinação de CST_ICMS, CFOP"
            " e alíquota do ICMS."
        ),
    )

    VL_RED_BC = fields.Monetary(
        string="Valor não tributado em função da redução da base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor não tributado em função da redução da base de cálculo do "
            "ICMS, referente à combinação de CST_ICMS, CFOP, e alíquota do "
            "ICMS."
        ),
    )

    COD_OBS = fields.Char(
        string="Código da observação do lançamento fiscal",
        sped_length=6,
        help=(
            "Código da observação do lançamento fiscal (campo 02 do Registro " "0460)"
        ),
    )

    reg_C390_ids_RegistroC350_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c350",
        string="Nota Fiscal de venda a consumidor",
        required=True,
        ondelete="cascade",
        help="Nota Fiscal de venda a consumidor (código 02)",
    )


class RegistroC400(models.Model):
    "Equipamento ECF (código 02, 2D e 60)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c400"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    ECF_MOD = fields.Char(string="Modelo do equipamento", sped_length=20)

    ECF_FAB = fields.Char(string="Número de série de fabricação do ECF", sped_length=21)

    ECF_CX = fields.Integer(string="Número do caixa atribuído ao ECF", sped_length=3)

    reg_C405_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c405",
        "reg_C405_ids_RegistroC400_id",
        string="C405 Redução Z (código 02, 2D e 60)",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
    )


class RegistroC405(models.Model):
    "Redução Z (código 02, 2D e 60)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c405"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    DT_DOC = fields.Date(string="Data do movimento a que se refere a Redução Z")

    CRO = fields.Integer(
        string="Posição do Contador de Reinício de Operação", sped_length=3
    )

    CRZ = fields.Integer(string="Posição do Contador de Redução Z", sped_length=6)

    NUM_COO_FIN = fields.Integer(
        string="Número do Contador de Ordem de Operação",
        sped_length=9,
        help=(
            "Número do Contador de Ordem de Operação do último documento "
            "emitido no dia. (Número do COO na Redução Z)"
        ),
    )

    GT_FIN = fields.Float(
        string="Valor do Grande Total final",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_BRT = fields.Monetary(
        string="Valor da venda bruta",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_C405_ids_RegistroC400_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c400",
        string="Equipamento ECF (código 02, 2D e 60)",
        required=True,
        ondelete="cascade",
    )

    reg_C410_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c410",
        "reg_C410_ids_RegistroC405_id",
        string="C410 PIS e COFINS Totalizados no Dia",
        sped_card="1:1",
        sped_required="UNDEF_REQUIRED",
        help="C410 PIS e COFINS Totalizados no Dia (código 02 e 2D)",
    )

    reg_C420_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c420",
        "reg_C420_ids_RegistroC405_id",
        string="C420 Registro dos Totalizadores Parciais",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C420 Registro dos Totalizadores Parciais da Redução Z (código 02,"
            " 2D e 60)"
        ),
    )

    reg_C460_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c460",
        "reg_C460_ids_RegistroC405_id",
        string="C460 Documento Fiscal Emitido por ECF",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help="C460 Documento Fiscal Emitido por ECF (código 02, 2D e 60)",
    )

    reg_C490_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c490",
        "reg_C490_ids_RegistroC405_id",
        string="C490 Registro Analítico do movimento diário",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=("C490 Registro Analítico do movimento diário (código 02, 2D e 60)"),
    )


class RegistroC410(models.Model):
    "PIS e COFINS Totalizados no Dia (código 02 e 2D)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c410"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    VL_PIS = fields.Monetary(
        string="Valor total do PIS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_COFINS = fields.Monetary(
        string="Valor total da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_C410_ids_RegistroC405_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c405",
        string="Redução Z (código 02, 2D e 60)",
        required=True,
        ondelete="cascade",
    )


class RegistroC420(models.Model):
    """Registro dos Totalizadores Parciais da Redução Z (código 02, 2D e 60)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c420"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_TOT_PAR = fields.Char(
        string="Código do totalizador",
        sped_length=7,
        help="Código do totalizador, conforme Tabela 4.4.6",
    )

    VLR_ACUM_TOT = fields.Float(
        string="Valor acumulado no totalizador",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=("Valor acumulado no totalizador, relativo à respectiva Redução Z."),
    )

    NR_TOT = fields.Integer(
        string="Número do totalizador quando ocorrer",
        sped_length=2,
        help=(
            "Número do totalizador quando ocorrer mais de uma situação com a "
            "mesma carga tributária efetiva."
        ),
    )

    DESCR_NR_TOT = fields.Char(
        string="Descrição da situação tributária relativa",
        help=(
            "Descrição da situação tributária relativa ao totalizador parcial,"
            " quando houver mais de um com a mesma carga tributária efetiva."
        ),
    )

    reg_C420_ids_RegistroC405_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c405",
        string="Redução Z (código 02, 2D e 60)",
        required=True,
        ondelete="cascade",
    )

    reg_C425_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c425",
        "reg_C425_ids_RegistroC420_id",
        string="C425 Resumo de itens do movimento diário",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help="C425 Resumo de itens do movimento diário (código 02 e 2D)",
    )


class RegistroC425(models.Model):
    "Resumo de itens do movimento diário (código 02 e 2D)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c425"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 5

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    QTD = fields.Float(
        string="Quantidade acumulada do item",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    UNID = fields.Char(
        string="Unidade do item",
        sped_length=6,
        help="Unidade do item (Campo 02 do registro 0190)",
    )

    VL_ITEM = fields.Monetary(
        string="Valor acumulado do item",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    reg_C425_ids_RegistroC420_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c420",
        string="Registro dos Totalizadores Parciais da Redução Z",
        required=True,
        ondelete="cascade",
        help=(
            "Registro dos Totalizadores Parciais da Redução Z (código 02, 2D e" " 60)"
        ),
    )

    reg_C430_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c430",
        "reg_C430_ids_RegistroC425_id",
        string="C430 Informações complementares das operações",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C430 Informações complementares das operações de sa- ída de "
            "mercadorias sujeitas à substituição tributária (código 02, 2D e "
            "60)"
        ),
    )


class RegistroC430(models.Model):
    """Informações complementares das operações de sa- ída de mercadorias
    sujeitas à substituição tributária (código 02, 2D e 60)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c430"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 6

    COD_MOT_REST_COMPL = fields.Char(
        string="Código do motivo da restituição",
        help=(
            "Código do motivo da restituição ou complementação conforme Tabela" " 5.7"
        ),
    )

    QUANT_CONV = fields.Float(
        string="Quantidade do item",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    UNID = fields.Char(
        string="Unidade adotada para informar o campo QUANT_CONV", sped_length=6
    )

    VL_UNIT_CONV = fields.Float(
        string="Valor unitário da mercadoria",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor unitário da mercadoria, considerando a unidade utilizada "
            "para informar o campo “QUANT_CONV”."
        ),
    )

    VL_UNIT_ICMS_NA_OPERACAO_CONV = fields.Float(
        string="Valor unitário para o ICMS na operação",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor unitário para o ICMS na operação, caso não houvesse a ST, "
            "considerando unidade utilizada para informar o campo "
            "“QUANT_CONV”, considerando redução da base de cálculo do ICMS ST "
            "na tributação, se houver."
        ),
    )

    VL_UNIT_ICMS_OP_CONV = fields.Float(
        string="Valor unitário do ICMS OP calculado conforme",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor unitário do ICMS OP calculado conforme a legislação de cada"
            " UF, considerando a unidade utilizada para informar o campo "
            "“QUANT_CONV”, utilizado para cálculo de ressarcimento/restituição"
            " de ST, no desfazimento da substituição tributária, quando se "
            "utiliza a fórmula descrita nas instruções de preenchimento do "
            "campo 11, no item a1)."
        ),
    )

    VL_UNIT_ICMS_OP_ESTOQUE_CONV = fields.Float(
        string="Valor médio unitário do ICMS",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor médio unitário do ICMS que o contribuinte teria se "
            "creditado referente à operação de entrada das mercadorias em "
            "estoque caso estivesse submetida ao regime comum de tributação, "
            "calculado conforme a legislação de cada UF, considerando a "
            "unidade utilizada para informar o campo “QUANT_CONV”"
        ),
    )

    VL_UNIT_ICMS_ST_ESTOQUE_CONV = fields.Float(
        string="Valor médio unitário do ICMS ST",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor médio unitário do ICMS ST, incluindo FCP ST, das "
            "mercadorias em estoque, considerando unidade utilizada para "
            "informar o campo “QUANT_CONV”."
        ),
    )

    reg_C430_ids_RegistroC425_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c425",
        string="Resumo de itens do movimento diário",
        required=True,
        ondelete="cascade",
        help="Resumo de itens do movimento diário (código 02 e 2D)",
    )


class RegistroC460(models.Model):
    "Documento Fiscal Emitido por ECF (código 02, 2D e 60)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c460"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    COD_SIT = fields.Integer(
        string="Código da situação do documento fiscal",
        help=("Código da situação do documento fiscal, conforme a Tabela 4.1.2"),
    )

    NUM_DOC = fields.Integer(string="Número do documento fiscal (COO)", sped_length=9)

    DT_DOC = fields.Date(string="Data da emissão do documento fiscal")

    VL_DOC = fields.Monetary(
        string="Valor total do documento fiscal",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    CPF_CNPJ = fields.Char(string="CPF ou CNPJ do adquirente", sped_length=14)

    NOM_ADQ = fields.Char(string="Nome do adquirente", sped_length=60)

    reg_C460_ids_RegistroC405_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c405",
        string="Redução Z (código 02, 2D e 60)",
        required=True,
        ondelete="cascade",
    )

    reg_C465_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c465",
        "reg_C465_ids_RegistroC460_id",
        string="C465 Complemento",
        sped_card="1:1",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C465 Complemento do Cupom Fiscal Eletrônico Emitido por ECF - CF-"
            "e-ECF (código 60)"
        ),
    )

    reg_C470_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c470",
        "reg_C470_ids_RegistroC460_id",
        string="C470 Itens do Documento Fiscal Emitido por ECF",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=("C470 Itens do Documento Fiscal Emitido por ECF (código 02 e 2D)"),
    )


class RegistroC465(models.Model):
    """Complemento do Cupom Fiscal Eletrônico Emitido por ECF - CF-e-ECF
    (código 60)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c465"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 5

    CHV_CFE = fields.Integer(string="Chave do Cupom Fiscal Eletrônico", sped_length=44)

    NUM_CCF = fields.Integer(string="Número do Contador de Cupom Fiscal", sped_length=9)

    reg_C465_ids_RegistroC460_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c460",
        string="Documento Fiscal Emitido por ECF",
        required=True,
        ondelete="cascade",
        help="Documento Fiscal Emitido por ECF (código 02, 2D e 60)",
    )


class RegistroC470(models.Model):
    "Itens do Documento Fiscal Emitido por ECF (código 02 e 2D)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c470"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 5

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    QTD = fields.Float(
        string="Quantidade do item",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    QTD_CANC = fields.Float(
        string="Quantidade cancelada",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help="Quantidade cancelada, no caso de cancelamento",
    )

    UNID = fields.Char(
        string="Unidade do item",
        sped_length=6,
        help="Unidade do item (Campo 02 do registro 0190)",
    )

    VL_ITEM = fields.Monetary(
        string="Valor total do item",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_ICMS = fields.Integer(
        string="Código da Situação Tributária",
        help=(
            "Código da Situação Tributária, conforme a Tabela indicada no item"
            " 4.3.1."
        ),
    )

    CFOP = fields.Integer(string="Código Fiscal de Operação e Prestação")

    ALIQ_ICMS = fields.Float(
        string="Alíquota do ICMS – Carga tributária efetiva",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Alíquota do ICMS – Carga tributária efetiva em percentual",
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    reg_C470_ids_RegistroC460_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c460",
        string="Documento Fiscal Emitido por ECF",
        required=True,
        ondelete="cascade",
        help="Documento Fiscal Emitido por ECF (código 02, 2D e 60)",
    )

    reg_C480_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c480",
        "reg_C480_ids_RegistroC470_id",
        string="C480 Informações complementares das operações",
        sped_card="1:1",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C480 Informações complementares das operações de sa- ída de "
            "mercadorias sujeitas à substituição tributária (código 02, 2D e "
            "60)"
        ),
    )


class RegistroC480(models.Model):
    """Informações complementares das operações de sa- ída de mercadorias
    sujeitas à substituição tributária (código 02, 2D e 60)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c480"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 6

    COD_MOT_REST_COMPL = fields.Char(
        string="Código do motivo da restituição",
        help=(
            "Código do motivo da restituição ou complementação conforme Tabela" " 5.7"
        ),
    )

    QUANT_CONV = fields.Float(
        string="Quantidade do item",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    UNID = fields.Char(
        string="Unidade adotada para informar o campo QUANT_CONV", sped_length=6
    )

    VL_UNIT_CONV = fields.Float(
        string="Valor unitário da mercadoria",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor unitário da mercadoria, considerando a unidade utilizada "
            "para informar o campo “QUANT_CONV”."
        ),
    )

    VL_UNIT_ICMS_NA_OPERACAO_CONV = fields.Float(
        string="Valor unitário para o ICMS na operação",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor unitário para o ICMS na operação, caso não houvesse a ST, "
            "considerando unidade utilizada para informar o campo "
            "“QUANT_CONV”, aplicando-se a mesma redução da base de cálculo do "
            "ICMS ST na tributação, se houver."
        ),
    )

    VL_UNIT_ICMS_OP_CONV = fields.Float(
        string="Valor unitário do ICMS OP calculado conforme",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor unitário do ICMS OP calculado conforme a legislação de cada"
            " UF, considerando a unidade utilizada para informar o campo "
            "“QUANT_CONV”, utilizado para cálculo de ressarcimento/restituição"
            " de ST, no desfazimento da substituição tributária, quando se "
            "utiliza a fórmula descrita nas instruções de preenchimento do "
            "campo 11, no item a1)."
        ),
    )

    VL_UNIT_ICMS_OP_ESTOQUE_CONV = fields.Float(
        string="Valor médio unitário do ICMS",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor médio unitário do ICMS que o contribuinte teria se "
            "creditado referente à operação de entrada das mercadorias em "
            "estoque caso estivesse submetida ao regime comum de tributação, "
            "calculado conforme a legislação de cada UF, considerando a "
            "unidade utilizada para informar o campo “QUANT_CONV”"
        ),
    )

    VL_UNIT_ICMS_ST_ESTOQUE_CONV = fields.Float(
        string="Valor médio unitário do ICMS ST",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor médio unitário do ICMS ST, incluindo FCP ST, das "
            "mercadorias em estoque, considerando unidade utilizada para "
            "informar o campo “QUANT_CONV”."
        ),
    )

    reg_C480_ids_RegistroC470_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c470",
        string="Itens do Documento Fiscal Emitido por ECF",
        required=True,
        ondelete="cascade",
        help="Itens do Documento Fiscal Emitido por ECF (código 02 e 2D)",
    )


class RegistroC490(models.Model):
    "Registro Analítico do movimento diário (código 02, 2D e 60)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c490"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    CST_ICMS = fields.Integer(
        string="Código da Situação Tributária",
        help=(
            "Código da Situação Tributária, conforme a Tabela indicada no item" " 4.3.1"
        ),
    )

    CFOP = fields.Integer(string="Código Fiscal de Operação e Prestação")

    ALIQ_ICMS = fields.Float(
        string="Alíquota do ICMS",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_OPR = fields.Monetary(
        string="Valor da operação correspondente à combinação",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da operação correspondente à combinação de CST_ICMS, CFOP, "
            "e alíquota do ICMS, incluídas as despesas acessórias e acréscimos"
        ),
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor acumulado da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor acumulado da base de cálculo do ICMS, referente à "
            "combinação de CST_ICMS, CFOP, e alíquota do ICMS."
        ),
    )

    VL_ICMS = fields.Monetary(
        string="Valor acumulado do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor acumulado do ICMS, referente à combinação de CST_ICMS, CFOP"
            " e alíquota do ICMS."
        ),
    )

    COD_OBS = fields.Char(
        string="Código da observação do lançamento fiscal",
        sped_length=6,
        help=(
            "Código da observação do lançamento fiscal (campo 02 do Registro " "0460)"
        ),
    )

    reg_C490_ids_RegistroC405_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c405",
        string="Redução Z (código 02, 2D e 60)",
        required=True,
        ondelete="cascade",
    )


class RegistroC495(models.Model):
    """Resumo Mensal de Itens do ECF por Estabelecimento (código 02 e 2D e
    2E)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c495"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    ALIQ_ICMS = fields.Float(
        string="Alíquota do ICMS",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    QTD = fields.Float(
        string="Quantidade acumulada do item",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    QTD_CANC = fields.Float(
        string="Quantidade cancelada acumulada",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help=(
            "Quantidade cancelada acumulada, no caso de cancelamento parcial " "de item"
        ),
    )

    UNID = fields.Char(
        string="Unidade do item",
        sped_length=6,
        help="Unidade do item (Campo 02 do registro 0190)",
    )

    VL_ITEM = fields.Monetary(
        string="Valor acumulado do item",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESC = fields.Monetary(
        string="Valor acumulado dos descontos",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CANC = fields.Monetary(
        string="Valor acumulado dos cancelamentos",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ACMO = fields.Monetary(
        string="Valor acumulado dos acréscimos",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor acumulado da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS = fields.Monetary(
        string="Valor acumulado do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ISEN = fields.Monetary(
        string="Valor das saídas isentas do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_NT = fields.Monetary(
        string="Valor das saídas sob não-incidência",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor das saídas sob não-incidência ou não- tributadas pelo ICMS"),
    )

    VL_ICMS_ST = fields.Monetary(
        string="Valor das saídas de mercadorias adquiridas",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor das saídas de mercadorias adquiridas com substituição "
            "tributária do ICMS"
        ),
    )


class RegistroC500(models.Model):
    """Nota Fiscal/Conta de Energia Elétrica (código 06), Nota Fiscal de
    Energia Elétrica Eletrônica (código 66) , Nota Fiscal/Conta de
    fornecimento dágua ca- nalizada (código 29) e Nota Fiscal/Consumo
    Fornecimento de Gás (Código 28)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c500"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    IND_OPER = fields.Char(
        string="Indicador do tipo de operação: 0",
        help="Indicador do tipo de operação: 0 - Entrada; 1 - Saída",
    )

    IND_EMIT = fields.Char(
        string="Indicador do emitente do documento fiscal",
        help=(
            "Indicador do emitente do documento fiscal: 0 - Emissão própria; 1"
            " - Terceiros"
        ),
    )

    COD_PART = fields.Char(
        string="Código do participante",
        sped_length=60,
        help="Código do participante (campo 02 do Registro 0150):",
    )

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    COD_SIT = fields.Integer(
        string="Código da situação do documento fiscal",
        help=("Código da situação do documento fiscal, conforme a Tabela 4.1.2"),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    SUB = fields.Integer(string="Subsérie do documento fiscal", sped_length=3)

    COD_CONS = fields.Char(
        string="- Código de classe de consumo de energia elétrica",
        help=(
            "- Código de classe de consumo de energia elétrica ou gás: 01 - "
            "Comercial 02 - Consumo Próprio 03 - Iluminação Pública 04 - "
            "Industrial 05 - Poder Público 06 - Residencial 07 - Rural 08 - "
            "Serviço Público. - Código de classe de consumo de Fornecimento "
            "D´água – Tabela 4.4.2."
        ),
    )

    NUM_DOC = fields.Integer(string="Número do documento fiscal", sped_length=9)

    DT_DOC = fields.Date(string="Data da emissão do documento fiscal")

    DT_E_S = fields.Date(string="Data da entrada ou da saída")

    VL_DOC = fields.Monetary(
        string="Valor total do documento fiscal",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESC = fields.Monetary(
        string="Valor total do desconto",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_FORN = fields.Monetary(
        string="Valor total fornecido/consumido",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SERV_NT = fields.Monetary(
        string="Valor total dos serviços não-tributados pelo ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_TERC = fields.Monetary(
        string="Valor total cobrado em nome de terceiros",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DA = fields.Monetary(
        string="Valor total de despesas acessórias indicadas",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor total de despesas acessórias indicadas no documento fiscal"),
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor acumulado da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS = fields.Monetary(
        string="Valor acumulado do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ICMS_ST = fields.Monetary(
        string="Valor acumulado da base de cálculo",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor acumulado da base de cálculo do ICMS substituição " "tributária"),
    )

    VL_ICMS_ST = fields.Monetary(
        string="Valor acumulado do ICMS retido",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor acumulado do ICMS retido por substituição tributária",
    )

    COD_INF = fields.Char(
        string="Código da informação complementar",
        sped_length=6,
        help=(
            "Código da informação complementar do documento fiscal (campo 02 "
            "do Registro 0450)"
        ),
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    TPLIGACAO = fields.Integer(
        string="Código de tipo de Ligação 1",
        help=("Código de tipo de Ligação 1 - Monofásico 2 - Bifásico 3 - " "Trifásico"),
    )

    COD_GRUPO_TENSAO = fields.Char(
        string="Código de grupo de tensão: 01 - A1",
        help=(
            "Código de grupo de tensão: 01 - A1 - Alta Tensão (230kV ou mais) "
            "02 - A2 - Alta Tensão (88 a 138kV) 03 - A3 - Alta Tensão (69kV) "
            "04 - A3a - Alta Tensão (30kV a 44kV) 05 - A4 - Alta Tensão (2,3kV"
            " a 25kV) 06 - AS - Alta Tensão Subterrâneo 06 07 - B1 - "
            "Residencial 07 08 - B1 - Residencial Baixa Renda 08 09 - B2 - "
            "Rural 09"
        ),
    )

    CHV_DOCe = fields.Integer(
        string="Chave da Nota Fiscal",
        help="Chave da Nota Fiscal de Energia Elétrica Eletrônica",
    )

    FIN_DOCe = fields.Integer(
        string="Finalidade da emissão do documento eletrônico",
        help=(
            "Finalidade da emissão do documento eletrônico: 1 – Normal 2 – "
            "Substituição 3 – Normal com ajuste"
        ),
    )

    CHV_DOCe_REF = fields.Integer(string="Chave da nota referenciada")

    IND_DEST = fields.Integer(
        string="Indicador do Destinatário/Acessante",
        help=(
            "Indicador do Destinatário/Acessante: 1 – Contribuinte do ICMS; 2 "
            "– Contribuinte Isento de Inscrição no Cadastro de Contribuintes "
            "do ICMS; 9 – Não Contribuinte."
        ),
    )

    COD_MUN_DEST = fields.Integer(
        string="Código do município do destinatário conforme",
        help=("Código do município do destinatário conforme a tabela do IBGE."),
    )

    COD_CTA = fields.Char(
        string="Código", help="Código da conta analítica contábil debitada/creditada"
    )

    COD_MOD_DOC_REF = fields.Integer(
        string="Código do modelo do documento fiscal referenciado",
        help=(
            "Código do modelo do documento fiscal referenciado, conforme a "
            "Tabela 4.1.1"
        ),
    )

    HASH_DOC_REF = fields.Char(
        string="Código de autenticação digital do registro",
        sped_length=32,
        help=("Código de autenticação digital do registro (Convênio 115/2003)."),
    )

    SER_DOC_REF = fields.Char(
        string="Série do documento fiscal referenciado", sped_length=4
    )

    NUM_DOC_REF = fields.Integer(
        string="Número do documento fiscal referenciado", sped_length=9
    )

    MES_DOC_REF = fields.Integer(
        string="Mês e ano da emissão",
        help="Mês e ano da emissão do documento fiscal referenciado.",
    )

    ENER_INJET = fields.Float(
        string="Energia injetada",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    OUTRAS_DED = fields.Float(
        string="Outras deduções",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    reg_C510_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c510",
        "reg_C510_ids_RegistroC500_id",
        string="C510 Itens do Documento",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C510 Itens do Documento - Nota Fiscal/Conta de Energia Elétrica "
            "(código 06), Nota Fiscal/Conta de fornecimento d'água canalizada "
            "(código 29) e Nota Fiscal/ Conta Fornecimento de Gás (Código 28)"
        ),
    )

    reg_C590_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c590",
        "reg_C590_ids_RegistroC500_id",
        string="C590 Registro Analítico do Documento",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C590 Registro Analítico do Documento - Nota Fiscal/Conta de "
            "Energia Elétrica (código 06), Nota Fiscal de Energia Elétrica "
            "Eletrônica (código 66), Nota Fis- cal/Conta de fornecimento "
            "d'água canalizada (código 29) e Nota Fiscal/Conta Fornecimento de"
            " Gás (Código 28)"
        ),
    )

    reg_C595_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c595",
        "reg_C595_ids_RegistroC500_id",
        string="C595 Observações do Lançamento Fiscal",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=("C595 Observações do Lançamento Fiscal (códigos 06, 28, 29 e 66)"),
    )


class RegistroC510(models.Model):
    """Itens do Documento - Nota Fiscal/Conta de Energia Elétrica (código 06),
    Nota Fiscal/Conta de fornecimento d'água canalizada (código 29) e Nota
    Fiscal/ Conta Fornecimento de Gás (Código 28)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c510"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    NUM_ITEM = fields.Integer(
        string="Número sequencial do item no documento fiscal", sped_length=3
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    COD_CLASS = fields.Integer(
        string="Código de classificação do item",
        help=(
            "Código de classificação do item de energia elétrica, conforme a "
            "Tabela 4.4.1"
        ),
    )

    QTD = fields.Float(
        string="Quantidade do item",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    UNID = fields.Char(
        string="Unidade do item",
        sped_length=6,
        help="Unidade do item (Campo 02 do registro 0190)",
    )

    VL_ITEM = fields.Monetary(
        string="Valor do item", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_DESC = fields.Monetary(
        string="Valor total do desconto",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_ICMS = fields.Integer(
        string="Código da Situação Tributária",
        help=(
            "Código da Situação Tributária, conforme a Tabela indicada no item" " 4.3.1"
        ),
    )

    CFOP = fields.Integer(string="Código Fiscal de Operação e Prestação")

    VL_BC_ICMS = fields.Monetary(
        string="Valor da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_ICMS = fields.Float(
        string="Alíquota do ICMS",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_ICMS = fields.Monetary(
        string="Valor do ICMS creditado/debitado",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ICMS_ST = fields.Monetary(
        string="Valor da base de cálculo referente",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor da base de cálculo referente à substituição tributária",
    )

    ALIQ_ST = fields.Float(
        string="Alíquota do ICMS da substituição tributária",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Alíquota do ICMS da substituição tributária na unidade da "
            "federação de destino"
        ),
    )

    VL_ICMS_ST = fields.Monetary(
        string="Valor do ICMS referente à substituição tributária",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_REC = fields.Char(
        string="Indicador do tipo de receita",
        help=(
            "Indicador do tipo de receita: 0- Receita própria; 1- Receita de "
            "terceiros"
        ),
    )

    COD_PART = fields.Char(
        string="Código do participante receptor da receita",
        sped_length=60,
        help=(
            "Código do participante receptor da receita, terceiro da operação "
            "(campo 02 do Registro 0150)"
        ),
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_CTA = fields.Char(
        string="Código", help="Código da conta analítica contábil debitada/ creditada"
    )

    reg_C510_ids_RegistroC500_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c500",
        string="Nota Fiscal/Conta de Energia Elétrica",
        required=True,
        ondelete="cascade",
        help=(
            "Nota Fiscal/Conta de Energia Elétrica (código 06), Nota Fiscal de"
            " Energia Elétrica Eletrônica (código 66) , Nota Fiscal/Conta de "
            "fornecimento dágua ca- nalizada (código 29) e Nota Fiscal/Consumo"
            " Fornecimento de Gás (Código 28)"
        ),
    )


class RegistroC590(models.Model):
    """Registro Analítico do Documento - Nota Fiscal/Conta de Energia Elétrica
    (código 06), Nota Fiscal de Energia Elétrica Eletrônica (código 66),
    Nota Fis- cal/Conta de fornecimento d'água canalizada (código 29) e
    Nota Fiscal/Conta Fornecimento de Gás (Código 28)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c590"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    CST_ICMS = fields.Integer(
        string="Código da Situação Tributária",
        help=(
            "Código da Situação Tributária, conforme a Tabela indicada no item"
            " 4.3.1."
        ),
    )

    CFOP = fields.Integer(
        string="Código Fiscal de Operação e Prestação",
        help=("Código Fiscal de Operação e Prestação do agrupamento de itens"),
    )

    ALIQ_ICMS = fields.Float(
        string="Alíquota do ICMS",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_OPR = fields.Monetary(
        string="Valor da operação correspondente à combinação",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da operação correspondente à combinação de CST_ICMS, CFOP, "
            "e alíquota do ICMS."
        ),
    )

    VL_BC_ICMS = fields.Monetary(
        string="Parcela correspondente ao 'Valor da base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao 'Valor da base de cálculo do ICMS' "
            "referente à combinação de CST_ICMS, CFOP e alíquota do ICMS."
        ),
    )

    VL_ICMS = fields.Monetary(
        string="Parcela correspondente ao 'Valor",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao 'Valor do ICMS' referente à combinação "
            "de CST_ICMS, CFOP e alíquota do ICMS."
        ),
    )

    VL_BC_ICMS_ST = fields.Monetary(
        string="VL_BC_ICMS_ST",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao 'Valor da base de cálculo do ICMS' da "
            "substituição tributária referente à combinação de CST_ICMS, CFOP "
            "e alíquota do ICMS."
        ),
    )

    VL_ICMS_ST = fields.Monetary(
        string="Parcela correspondente ao valor creditado/debitado",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao valor creditado/debitado do ICMS da "
            "substituição tributária, referente à combinação de CST_ICMS, "
            "CFOP, e alíquota do ICMS."
        ),
    )

    VL_RED_BC = fields.Monetary(
        string="Valor não tributado em função da redução da base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor não tributado em função da redução da base de cálculo do "
            "ICMS, referente à combinação de CST_ICMS, CFOP e alíquota do "
            "ICMS."
        ),
    )

    COD_OBS = fields.Char(
        string="Código da observação do lançamento fiscal",
        sped_length=6,
        help=(
            "Código da observação do lançamento fiscal (campo 02 do Registro " "0460)"
        ),
    )

    reg_C590_ids_RegistroC500_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c500",
        string="Nota Fiscal/Conta de Energia Elétrica",
        required=True,
        ondelete="cascade",
        help=(
            "Nota Fiscal/Conta de Energia Elétrica (código 06), Nota Fiscal de"
            " Energia Elétrica Eletrônica (código 66) , Nota Fiscal/Conta de "
            "fornecimento dágua ca- nalizada (código 29) e Nota Fiscal/Consumo"
            " Fornecimento de Gás (Código 28)"
        ),
    )

    reg_C591_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c591",
        "reg_C591_ids_RegistroC590_id",
        string="C591 Informações do Fundo de Combate",
        sped_card="1:1",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C591 Informações do Fundo de Combate à Pobreza – FCP na NF3e "
            "(código 66)"
        ),
    )


class RegistroC591(models.Model):
    "Informações do Fundo de Combate à Pobreza – FCP na NF3e (código 66)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c591"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    VL_FCP_OP = fields.Monetary(
        string="Valor do Fundo de Combate à Pobreza",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do Fundo de Combate à Pobreza (FCP) vinculado à operação "
            "própria, na combinação de CST_ICMS, CFOP e alíquota do ICMS"
        ),
    )

    VL_FCP_ST = fields.Monetary(
        string="Valor do Fundo de Combate à Pobreza (VL_FCP_ST)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do Fundo de Combate à Pobreza (FCP) vinculado à operação de"
            " substituição tributária, na combinação de CST_ICMS, CFOP e "
            "alíquota do ICMS."
        ),
    )

    reg_C591_ids_RegistroC590_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c590",
        string="Registro Analítico do Documento",
        required=True,
        ondelete="cascade",
        help=(
            "Registro Analítico do Documento - Nota Fiscal/Conta de Energia "
            "Elétrica (código 06), Nota Fiscal de Energia Elétrica Eletrônica "
            "(código 66), Nota Fis- cal/Conta de fornecimento d'água "
            "canalizada (código 29) e Nota Fiscal/Conta Fornecimento de Gás "
            "(Código 28)"
        ),
    )


class RegistroC595(models.Model):
    "Observações do Lançamento Fiscal (códigos 06, 28, 29 e 66)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c595"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_OBS = fields.Char(
        string="Código da observação do lançamento fiscal",
        sped_length=6,
        help=(
            "Código da observação do lançamento fiscal (campo 02 do Registro " "0460)"
        ),
    )

    TXT_COMPL = fields.Char(string="Descrição complementar do código de observação")

    reg_C595_ids_RegistroC500_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c500",
        string="Nota Fiscal/Conta de Energia Elétrica",
        required=True,
        ondelete="cascade",
        help=(
            "Nota Fiscal/Conta de Energia Elétrica (código 06), Nota Fiscal de"
            " Energia Elétrica Eletrônica (código 66) , Nota Fiscal/Conta de "
            "fornecimento dágua ca- nalizada (código 29) e Nota Fiscal/Consumo"
            " Fornecimento de Gás (Código 28)"
        ),
    )

    reg_C597_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c597",
        "reg_C597_ids_RegistroC595_id",
        string="C597 Outras obrigações tributárias",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C597 Outras obrigações tributárias, ajustes e informações de "
            "valores provenientes de documento fiscal."
        ),
    )


class RegistroC597(models.Model):
    """Outras obrigações tributárias, ajustes e informações de valores
    provenientes de documento fiscal."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c597"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_AJ = fields.Char(
        string="Código dos ajustes/benefício/incentivo",
        help=(
            "Código dos ajustes/benefício/incentivo, conforme tabela indicada "
            "no item 5.3."
        ),
    )

    DESCR_COMPL_AJ = fields.Char(
        string="Descrição complementar do ajuste",
        help="Descrição complementar do ajuste do documento fiscal",
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    VL_BC_ICMS = fields.Monetary(
        string="Base de cálculo do ICMS ou do ICMS ST",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_ICMS = fields.Float(
        string="Alíquota do ICMS",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_ICMS = fields.Monetary(
        string="Valor do ICMS ou do ICMS ST",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_OUTROS = fields.Monetary(
        string="Outros valores", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    reg_C597_ids_RegistroC595_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c595",
        string="Observações do Lançamento Fiscal",
        required=True,
        ondelete="cascade",
        help="Observações do Lançamento Fiscal (códigos 06, 28, 29 e 66)",
    )


class RegistroC600(models.Model):
    """Consolidação Diária de Notas Fiscais/Contas de Energia Elétrica (Código
    06), Nota Fiscal/Conta de Fornecimento d´água (código 29) e Nota
    Fiscal/Conta de Fornecimento de Gás (Código 28) - (Empresas não
    obrigadas ao Convênio ICMS 115/03)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c600"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    COD_MUN = fields.Integer(
        string="Código do município dos pontos de consumo",
        help=("Código do município dos pontos de consumo, conforme a tabela IBGE"),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    SUB = fields.Integer(string="Subsérie do documento fiscal", sped_length=3)

    COD_CONS = fields.Char(
        string="- Código de classe de consumo de energia elétrica",
        help=(
            "- Código de classe de consumo de energia elétrica ou gás: 01 - "
            "Comercial 02 - Consumo Próprio 03 - Iluminação Pública 04 - "
            "Industrial 05 - Poder Público 06 - Residencial 07 - Rural 08 "
            "-Serviço Público. - Código de classe de consumo de Fornecimento "
            "D´água – Tabela 4.4.2."
        ),
    )

    QTD_CONS = fields.Integer(
        string="Quantidade", help="Quantidade de documentos consolidados neste registro"
    )

    QTD_CANC = fields.Integer(string="Quantidade de documentos cancelados")

    DT_DOC = fields.Date(string="Data dos documentos consolidados")

    VL_DOC = fields.Monetary(
        string="Valor total dos documentos",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESC = fields.Monetary(
        string="Valor acumulado dos descontos",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CONS = fields.Integer(
        string="Consumo total acumulado",
        help="Consumo total acumulado, em kWh (Código 06)",
    )

    VL_FORN = fields.Monetary(
        string="Valor acumulado do fornecimento",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SERV_NT = fields.Monetary(
        string="Valor acumulado dos serviços não- tributados",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor acumulado dos serviços não- tributados pelo ICMS",
    )

    VL_TERC = fields.Monetary(
        string="Valores cobrados em nome de terceiros",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DA = fields.Monetary(
        string="Valor acumulado das despesas acessórias",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor acumulado da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS = fields.Monetary(
        string="Valor acumulado do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ICMS_ST = fields.Monetary(
        string="Valor acumulado da base de cálculo",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor acumulado da base de cálculo do ICMS substituição " "tributária"),
    )

    VL_ICMS_ST = fields.Monetary(
        string="Valor acumulado do ICMS retido",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor acumulado do ICMS retido por substituição tributária",
    )

    VL_PIS = fields.Monetary(
        string="Valor acumulado do PIS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_COFINS = fields.Monetary(
        string="Valor acumulado COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_C601_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c601",
        "reg_C601_ids_RegistroC600_id",
        string="C601 Documentos cancelados",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C601 Documentos cancelados - Consolidação diária de notas "
            "fiscais/conta de energia elétrica (Código 06), nota fiscal/conta "
            "de fornecimento de água (código 29) e nota fiscal/conta de "
            "fornecimento de gás (código 28)"
        ),
    )

    reg_C610_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c610",
        "reg_C610_ids_RegistroC600_id",
        string="C610 Itens do Documento Consolidado",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C610 Itens do Documento Consolidado - Notas Fiscais/Contas de "
            "Energia Elétrica (Código 06), Nota Fiscal/Conta de Fornecimento "
            "d´água (código 29) e Nota Fiscal/Conta de Fornecimento de Gás "
            "(Código 28) - (Empresas não obrigadas ao Convênio ICMS 115/03)"
        ),
    )

    reg_C690_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c690",
        "reg_C690_ids_RegistroC600_id",
        string="C690 Registro Analítico dos Documentos",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C690 Registro Analítico dos Documentos - Notas Fiscais/Contas de "
            "Energia Elétrica (Código 06), Nota Fiscal/Conta de Fornecimento "
            "d´água (código 29) e Nota Fiscal/Conta de Fornecimento de Gás "
            "(Código 28)"
        ),
    )


class RegistroC601(models.Model):
    """Documentos cancelados - Consolidação diária de notas fiscais/conta de
    energia elétrica (Código 06), nota fiscal/conta de fornecimento de água
    (código 29) e nota fiscal/conta de fornecimento de gás (código 28)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c601"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    NUM_DOC_CANC = fields.Integer(
        string="Número do documento fiscal cancelado", sped_length=9
    )

    reg_C601_ids_RegistroC600_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c600",
        string="Consolidação Diária de Notas Fiscais/Contas",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação Diária de Notas Fiscais/Contas de Energia Elétrica "
            "(Código 06), Nota Fiscal/Conta de Fornecimento d´água (código 29)"
            " e Nota Fiscal/Conta de Fornecimento de Gás (Código 28) - "
            "(Empresas não obrigadas ao Convênio ICMS 115/03)"
        ),
    )


class RegistroC610(models.Model):
    """Itens do Documento Consolidado - Notas Fiscais/Contas de Energia
    Elétrica (Código 06), Nota Fiscal/Conta de Fornecimento d´água (código
    29) e Nota Fiscal/Conta de Fornecimento de Gás (Código 28) - (Empresas
    não obrigadas ao Convênio ICMS 115/03)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c610"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_CLASS = fields.Integer(
        string="Código de classificação do item",
        help=(
            "Código de classificação do item de energia elétrica, conforme "
            "Tabela 4.4.1"
        ),
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    QTD = fields.Float(
        string="Quantidade acumulada do item",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    UNID = fields.Char(
        string="Unidade do item",
        sped_length=6,
        help="Unidade do item (Campo 02 do registro 0190)",
    )

    VL_ITEM = fields.Monetary(
        string="Valor acumulado do item",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESC = fields.Monetary(
        string="Valor acumulado dos descontos",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_ICMS = fields.Integer(
        string="Código da Situação Tributária",
        help=(
            "Código da Situação Tributária, conforme a Tabela indicada no item" " 4.3.1"
        ),
    )

    CFOP = fields.Integer(
        string="Código Fiscal de Operação",
        help=(
            "Código Fiscal de Operação e Prestação conforme tabela indicada no"
            " item 4.2.2."
        ),
    )

    ALIQ_ICMS = fields.Float(
        string="Alíquota do ICMS",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor acumulado da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS = fields.Monetary(
        string="Valor acumulado do ICMS debitado",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ICMS_ST = fields.Monetary(
        string="Valor da base de cálculo",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor da base de cálculo do ICMS substituição tributária",
    )

    VL_ICMS_ST = fields.Monetary(
        string="Valor do ICMS retido por substituição tributária",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_CTA = fields.Char(
        string="Código", help="Código da conta analítica contábil debitada/creditada"
    )

    reg_C610_ids_RegistroC600_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c600",
        string="Consolidação Diária de Notas Fiscais/Contas",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação Diária de Notas Fiscais/Contas de Energia Elétrica "
            "(Código 06), Nota Fiscal/Conta de Fornecimento d´água (código 29)"
            " e Nota Fiscal/Conta de Fornecimento de Gás (Código 28) - "
            "(Empresas não obrigadas ao Convênio ICMS 115/03)"
        ),
    )


class RegistroC690(models.Model):
    """Registro Analítico dos Documentos - Notas Fiscais/Contas de Energia
    Elétrica (Código 06), Nota Fiscal/Conta de Fornecimento d´água (código
    29) e Nota Fiscal/Conta de Fornecimento de Gás (Código 28)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c690"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    CST_ICMS = fields.Integer(
        string="Código da Situação Tributária",
        help=(
            "Código da Situação Tributária, conforme a tabela indicada no item" " 4.3.1"
        ),
    )

    CFOP = fields.Integer(
        string="Código Fiscal de Operação e Prestação",
        help=(
            "Código Fiscal de Operação e Prestação, conforme a tabela indicada"
            " no item 4.2.2"
        ),
    )

    ALIQ_ICMS = fields.Float(
        string="Alíquota do ICMS",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_OPR = fields.Monetary(
        string="Valor da operação correspondente à combinação",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da operação correspondente à combinação de CST_ICMS, CFOP, "
            "e alíquota do ICMS."
        ),
    )

    VL_BC_ICMS = fields.Monetary(
        string="Parcela correspondente ao 'Valor da base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS = fields.Monetary(
        string="Parcela correspondente ao 'Valor",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao 'Valor do ICMS' referente à combinação "
            "CST_ICMS, CFOP e alíquota do ICMS"
        ),
    )

    VL_RED_BC = fields.Monetary(
        string="Valor não tributado em função da redução da base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor não tributado em função da redução da base de cálculo do "
            "ICMS, referente à combinação de CST_ICMS, CFOP e alíquota do "
            "ICMS."
        ),
    )

    VL_BC_ICMS_ST = fields.Monetary(
        string="Valor da base de cálculo",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor da base de cálculo do ICMS substituição tributária",
    )

    VL_ICMS_ST = fields.Monetary(
        string="Valor do ICMS retido por substituição tributária",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_OBS = fields.Char(
        string="Código da observação do lançamento fiscal",
        sped_length=6,
        help=(
            "Código da observação do lançamento fiscal (campo 02 do Registro " "0460)"
        ),
    )

    reg_C690_ids_RegistroC600_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c600",
        string="Consolidação Diária de Notas Fiscais/Contas",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação Diária de Notas Fiscais/Contas de Energia Elétrica "
            "(Código 06), Nota Fiscal/Conta de Fornecimento d´água (código 29)"
            " e Nota Fiscal/Conta de Fornecimento de Gás (Código 28) - "
            "(Empresas não obrigadas ao Convênio ICMS 115/03)"
        ),
    )


class RegistroC700(models.Model):
    """Consolidação dos Documentos Nota Fiscal/Conta Energia Elétrica (código
    06) emitidas em via única - (Empresas obrigadas à entrega do arquivo
    previsto no Convênio ICMS 115/03) e Nota Fiscal/Conta de Fornecimento
    de Gás Canali- zado (Código 28)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c700"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    NRO_ORD_INI = fields.Integer(string="Número de ordem inicial", sped_length=9)

    NRO_ORD_FIN = fields.Integer(string="Número de ordem final", sped_length=9)

    DT_DOC_INI = fields.Date(
        string="Data de emissão inicial",
        help=(
            "Data de emissão inicial dos documentos / Data inicial de "
            "vencimento da fatura"
        ),
    )

    DT_DOC_FIN = fields.Date(
        string="Data de emissão final dos documentos / Data final",
        help=(
            "Data de emissão final dos documentos / Data final do vencimento "
            "da fatura"
        ),
    )

    NOM_MEST = fields.Char(
        string="Nome do arquivo Mestre de Documento Fiscal", sped_length=33
    )

    CHV_COD_DIG = fields.Char(
        string="Chave de codificação digital do arquivo Mestre",
        sped_length=32,
        help=("Chave de codificação digital do arquivo Mestre de Documento " "Fiscal"),
    )

    reg_C790_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c790",
        "reg_C790_ids_RegistroC700_id",
        string="C790 Registro Analítico dos Documentos",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C790 Registro Analítico dos Documentos - Nota Fiscal/Conta "
            "Energia Elétrica (códi- go 06) emitidas em via única"
        ),
    )


class RegistroC790(models.Model):
    """Registro Analítico dos Documentos - Nota Fiscal/Conta Energia Elétrica
    (códi- go 06) emitidas em via única"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c790"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    CST_ICMS = fields.Integer(
        string="Código da Situação Tributária",
        help=(
            "Código da Situação Tributária, conforme a tabela indicada no item" " 4.3.1"
        ),
    )

    CFOP = fields.Integer(
        string="Código Fiscal de Operação e Prestação",
        help=(
            "Código Fiscal de Operação e Prestação, conforme a tabela indicada"
            " no item 4.2.2"
        ),
    )

    ALIQ_ICMS = fields.Float(
        string="Alíquota do ICMS",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_OPR = fields.Monetary(
        string="Valor da operação correspondente à combinação",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da operação correspondente à combinação de CST_ICMS, CFOP, "
            "e alíquota do ICMS."
        ),
    )

    VL_BC_ICMS = fields.Monetary(
        string="Parcela correspondente ao “Valor da base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao “Valor da base de cálculo do ICMS” "
            "referente à combinação CST_ICMS, CFOP, e alíquota do ICMS"
        ),
    )

    VL_ICMS = fields.Monetary(
        string="Parcela correspondente ao “Valor",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao “Valor do ICMS” referente à combinação "
            "CST_ICMS, CFOP e alíquota do ICMS"
        ),
    )

    VL_BC_ICMS_ST = fields.Monetary(
        string="Valor da base de cálculo",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor da base de cálculo do ICMS substituição tributária",
    )

    VL_ICMS_ST = fields.Monetary(
        string="Valor do ICMS retido por substituição tributária",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_RED_BC = fields.Monetary(
        string="Valor não tributado em função da redução da base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor não tributado em função da redução da base de cálculo do "
            "ICMS, referente à combinação de CST_ICMS, CFOP e alíquota do "
            "ICMS.."
        ),
    )

    COD_OBS = fields.Char(
        string="Código da observação do lançamento fiscal",
        sped_length=6,
        help=(
            "Código da observação do lançamento fiscal (campo 02 do Registro " "0460)"
        ),
    )

    reg_C790_ids_RegistroC700_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c700",
        string="Consolidação",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação dos Documentos Nota Fiscal/Conta Energia Elétrica "
            "(código 06) emitidas em via única - (Empresas obrigadas à entrega"
            " do arquivo previsto no Convênio ICMS 115/03) e Nota Fiscal/Conta"
            " de Fornecimento de Gás Canali- zado (Código 28)"
        ),
    )

    reg_C791_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c791",
        "reg_C791_ids_RegistroC790_id",
        string="C791 Registro de Informações de ICMS ST por UF",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
    )


class RegistroC791(models.Model):
    "Registro de Informações de ICMS ST por UF"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c791"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    UF = fields.Char(
        string="Sigla da unidade da federação a que se refere",
        help="Sigla da unidade da federação a que se refere a retenção ST",
    )

    VL_BC_ICMS_ST = fields.Monetary(
        string="Valor da base de cálculo",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor da base de cálculo do ICMS substituição tributária",
    )

    VL_ICMS_ST = fields.Monetary(
        string="Valor do ICMS retido por substituição tributária",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_C791_ids_RegistroC790_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c790",
        string="Registro Analítico dos Documentos",
        required=True,
        ondelete="cascade",
        help=(
            "Registro Analítico dos Documentos - Nota Fiscal/Conta Energia "
            "Elétrica (códi- go 06) emitidas em via única"
        ),
    )


class RegistroC800(models.Model):
    "Registro Cupom Fiscal Eletrônico - CF-e (Código 59)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c800"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        sped_length=2,
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    COD_SIT = fields.Integer(
        string="Código da situação do documento fiscal",
        sped_length=2,
        help=("Código da situação do documento fiscal, conforme a Tabela 4.1.2"),
    )

    NUM_CFE = fields.Integer(string="Número do Cupom Fiscal Eletrônico", sped_length=6)

    DT_DOC = fields.Date(
        string="Data da emissão do Cupom Fiscal Eletrônico", sped_length=8
    )

    VL_CFE = fields.Monetary(
        string="Valor total do Cupom Fiscal Eletrônico",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_PIS = fields.Monetary(
        string="Valor total do PIS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_COFINS = fields.Monetary(
        string="Valor total da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CNPJ_CPF = fields.Char(string="CNPJ ou CPF do destinatário", sped_length=14)

    NR_SAT = fields.Integer(string="Número de Série do equipamento SAT", sped_length=9)

    CHV_CFE = fields.Integer(string="Chave do Cupom Fiscal Eletrônico", sped_length=44)

    VL_DESC = fields.Monetary(
        string="Valor total de descontos",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_MERC = fields.Monetary(
        string="Valor total das mercadorias e serviços",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_OUT_DA = fields.Monetary(
        string="Valor total de outras despesas acessórias",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor total de outras despesas acessórias e acréscimos",
    )

    VL_ICMS = fields.Monetary(
        string="Valor do ICMS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_PIS_ST = fields.Monetary(
        string="Valor total do PIS retido por subst",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor total do PIS retido por subst. trib.",
    )

    VL_COFINS_ST = fields.Monetary(
        string="Valor total da COFINS retido por subst",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor total da COFINS retido por subst. trib.",
    )

    reg_C810_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c810",
        "reg_C810_ids_RegistroC800_id",
        string="C810 Itens do documento",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C810 Itens do documento do cupom fiscal eletrônico – SAT (CF-E-"
            "SAT) (código 59)"
        ),
    )

    reg_C850_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c850",
        "reg_C850_ids_RegistroC800_id",
        string="C850 Registro Analítico do CF-e",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help="C850 Registro Analítico do CF-e (Código 59)",
    )


class RegistroC810(models.Model):
    """Itens do documento do cupom fiscal eletrônico – SAT (CF-E-SAT) (código
    59)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c810"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    NUM_ITEM = fields.Integer(
        string="Número do item no documento fiscal", sped_length=3
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    QTD = fields.Float(
        string="Quantidade do item",
        xsd_type="TDec_1605",
        digits=(
            16,
            5,
        ),
    )

    UNID = fields.Char(
        string="Unidade do item",
        sped_length=6,
        help="Unidade do item (Campo 02 do registro 0190)",
    )

    VL_ITEM = fields.Monetary(
        string="Valor total do item",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor total do item (mercadorias ou serviços)",
    )

    CST_ICMS = fields.Integer(string="Código da Situação Tributária referente ao ICMS")

    CFOP = fields.Integer(string="Código Fiscal de Operação e Prestação")

    reg_C810_ids_RegistroC800_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c800",
        string="Registro Cupom Fiscal Eletrônico",
        required=True,
        ondelete="cascade",
        help="Registro Cupom Fiscal Eletrônico - CF-e (Código 59)",
    )

    reg_C815_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c815",
        "reg_C815_ids_RegistroC810_id",
        string="C815 Informações complementares das operações",
        sped_card="1:1",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C815 Informações complementares das operações de sa- ída de "
            "mercadorias sujeitas à substituição tributária (CF-E-SAT) (código"
            " 59)"
        ),
    )


class RegistroC815(models.Model):
    """Informações complementares das operações de sa- ída de mercadorias
    sujeitas à substituição tributária (CF-E-SAT) (código 59)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c815"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_MOT_REST_COMPL = fields.Char(
        string="Código do motivo da restituição",
        help=(
            "Código do motivo da restituição ou complementação conforme Tabela" " 5.7"
        ),
    )

    QUANT_CONV = fields.Float(
        string="Quantidade do item",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    UNID = fields.Char(
        string="Unidade adotada para informar o campo QUANT_CONV", sped_length=6
    )

    VL_UNIT_CONV = fields.Float(
        string="Valor unitário da mercadoria",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor unitário da mercadoria, considerando a unidade utilizada "
            "para informar o campo “QUANT_CONV”."
        ),
    )

    VL_UNIT_ICMS_NA_OPERACAO_CONV = fields.Float(
        string="Valor unitário para o ICMS na operação",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor unitário para o ICMS na operação, caso não houvesse a ST, "
            "considerando unidade utilizada para informar o campo "
            "“QUANT_CONV”, aplicando-se a mesma redução da base de cálculo do "
            "ICMS ST na tributação, se houver."
        ),
    )

    VL_UNIT_ICMS_OP_CONV = fields.Float(
        string="Valor unitário do ICMS OP calculado conforme",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor unitário do ICMS OP calculado conforme a legislação de cada"
            " UF, considerando a unidade utilizada para informar o campo "
            "“QUANT_CONV”, utilizado para cálculo de ressarcimento/restituição"
            " de ST, no desfazimento da substituição tributária, quando se "
            "utiliza a fórmula descrita nas instruções de preenchimento do "
            "campo 11, no item a1)."
        ),
    )

    VL_UNIT_ICMS_OP_ESTOQUE_CONV = fields.Float(
        string="Valor médio unitário do ICMS",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor médio unitário do ICMS que o contribuinte teria se "
            "creditado referente à operação de entrada das mercadorias em "
            "estoque caso estivesse submetida ao regime comum de tributação, "
            "calculado conforme a legislação de cada UF, considerando a "
            "unidade utilizada para informar o campo “QUANT_CONV”"
        ),
    )

    VL_UNIT_ICMS_ST_ESTOQUE_CONV = fields.Float(
        string="Valor médio unitário do ICMS ST",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Valor médio unitário do ICMS ST, incluindo FCP ST, das "
            "mercadorias em estoque, considerando unidade utilizada para "
            "informar o campo “QUANT_CONV”."
        ),
    )

    reg_C815_ids_RegistroC810_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c810",
        string="Itens do documento",
        required=True,
        ondelete="cascade",
        help=(
            "Itens do documento do cupom fiscal eletrônico – SAT (CF-E-SAT) "
            "(código 59)"
        ),
    )


class RegistroC850(models.Model):
    "Registro Analítico do CF-e (Código 59)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c850"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    CST_ICMS = fields.Integer(
        string="Código da Situação Tributária",
        sped_length=3,
        help=(
            "Código da Situação Tributária, conforme a Tabela indicada no item" " 4.3.1"
        ),
    )

    CFOP = fields.Integer(
        string="Código Fiscal de Operação e Prestação",
        sped_length=4,
        help=("Código Fiscal de Operação e Prestação do agrupamento de itens"),
    )

    ALIQ_ICMS = fields.Float(
        string="Alíquota do ICMS",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_OPR = fields.Monetary(
        string="“Valor total do CF-e” na combinação de CST_ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "“Valor total do CF-e” na combinação de CST_ICMS, CFOP e alíquota "
            "do ICMS, correspondente ao somatório do valor líquido dos itens."
        ),
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor acumulado da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor acumulado da base de cálculo do ICMS, referente à "
            "combinação de CST_ICMS, CFOP, e"
        ),
    )

    VL_ICMS = fields.Monetary(
        string="Parcela correspondente ao “Valor",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao “Valor do ICMS” referente à combinação "
            "de CST_ICMS, CFOP e alíquota do ICMS."
        ),
    )

    COD_OBS = fields.Char(
        string="Código da observação do lançamento fiscal",
        sped_length=6,
        help=(
            "Código da observação do lançamento fiscal (campo 02 do registro " "0460)"
        ),
    )

    reg_C850_ids_RegistroC800_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c800",
        string="Registro Cupom Fiscal Eletrônico",
        required=True,
        ondelete="cascade",
        help="Registro Cupom Fiscal Eletrônico - CF-e (Código 59)",
    )


class RegistroC860(models.Model):
    "Identificação do equipamento SAT-CF-e (Código 59)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c860"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        sped_length=2,
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    NR_SAT = fields.Integer(string="Número de Série do equipamento SAT", sped_length=9)

    DT_DOC = fields.Date(string="Data de emissão dos documentos fiscais", sped_length=8)

    DOC_INI = fields.Integer(string="Número do documento inicial", sped_length=6)

    DOC_FIM = fields.Integer(string="Número do documento final", sped_length=6)

    reg_C870_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c870",
        "reg_C870_ids_RegistroC860_id",
        string="C870 Itens do documento",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C870 Itens do documento do cupom fiscal eletrônico – SAT (CF-E-"
            "SAT) (código 59)"
        ),
    )

    reg_C890_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c890",
        "reg_C890_ids_RegistroC860_id",
        string="C890 Resumo diário de CF-e",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=("C890 Resumo diário de CF-e (Código 59) por equipamento SAT-CF-e"),
    )


class RegistroC870(models.Model):
    """Itens do documento do cupom fiscal eletrônico – SAT (CF-E-SAT) (código
    59)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c870"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    QTD = fields.Float(
        string="Quantidade do item",
        xsd_type="TDec_1605",
        digits=(
            16,
            5,
        ),
    )

    UNID = fields.Char(
        string="Unidade do item",
        sped_length=6,
        help="Unidade do item (Campo 02 do registro 0190)",
    )

    CST_ICMS = fields.Integer(string="Código da Situação Tributária referente ao ICMS")

    CFOP = fields.Integer(string="Código Fiscal de Operação e Prestação")

    reg_C870_ids_RegistroC860_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c860",
        string="Identificação do equipamento SAT-CF-e",
        required=True,
        ondelete="cascade",
        help="Identificação do equipamento SAT-CF-e (Código 59)",
    )

    reg_C880_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.c880",
        "reg_C880_ids_RegistroC870_id",
        string="C880 Informações complementares das operações",
        sped_card="1:1",
        sped_required="UNDEF_REQUIRED",
        help=(
            "C880 Informações complementares das operações de sa- ída de "
            "mercadorias sujeitas à substituição tributária (CF-E-SAT) (código"
            " 59)"
        ),
    )


class RegistroC880(models.Model):
    """Informações complementares das operações de sa- ída de mercadorias
    sujeitas à substituição tributária (CF-E-SAT) (código 59)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c880"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_MOT_REST_COMPL = fields.Char(
        string="Código do motivo da restituição",
        help=(
            "Código do motivo da restituição ou complementação conforme Tabela" " 5.7"
        ),
    )

    QUANT_CONV = fields.Float(
        string="Quantidade do item",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    UNID = fields.Char(
        string="Unidade adotada para informar o campo QUANT_CONV", sped_length=6
    )

    VL_UNIT_CONV = fields.Float(
        string="Valor unitário da mercadoria",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help=(
            "Valor unitário da mercadoria, considerando a unidade utilizada "
            "para informar o campo “QUANT_CONV”."
        ),
    )

    VL_UNIT_ICMS_NA_OPERACAO_CONV = fields.Float(
        string="Valor unitário para o ICMS na operação",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help=(
            "Valor unitário para o ICMS na operação, caso não houvesse a ST, "
            "considerando unidade utilizada para informar o campo "
            "“QUANT_CONV”, aplicando-se a mesma redução da base de cálculo do "
            "ICMS ST na tributação, se houver."
        ),
    )

    VL_UNIT_ICMS_OP_CONV = fields.Float(
        string="Valor unitário do ICMS OP calculado conforme",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help=(
            "Valor unitário do ICMS OP calculado conforme a legislação de cada"
            " UF, considerando a unidade utilizada para informar o campo "
            "“QUANT_CONV”, utilizado para cálculo de ressarcimento/restituição"
            " de ST, no desfazimento da substituição tributária, quando se "
            "utiliza a fórmula descrita nas instruções de preenchimento do "
            "campo 11, no item a1)."
        ),
    )

    VL_UNIT_ICMS_OP_ESTOQUE_CONV = fields.Float(
        string="Valor médio unitário do ICMS",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help=(
            "Valor médio unitário do ICMS que o contribuinte teria se "
            "creditado referente à operação de entrada das mercadorias em "
            "estoque caso estivesse submetida ao regime comum de tributação, "
            "calculado conforme a legislação de cada UF, considerando a "
            "unidade utilizada para informar o campo “QUANT_CONV”"
        ),
    )

    VL_UNIT_ICMS_ST_ESTOQUE_CONV = fields.Float(
        string="Valor médio unitário do ICMS ST",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help=(
            "Valor médio unitário do ICMS ST, incluindo FCP ST, das "
            "mercadorias em estoque, considerando unidade utilizada para "
            "informar o campo “QUANT_CONV”."
        ),
    )

    reg_C880_ids_RegistroC870_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c870",
        string="Itens do documento",
        required=True,
        ondelete="cascade",
        help=(
            "Itens do documento do cupom fiscal eletrônico – SAT (CF-E-SAT) "
            "(código 59)"
        ),
    )


class RegistroC890(models.Model):
    "Resumo diário de CF-e (Código 59) por equipamento SAT-CF-e"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.c890"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    CST_ICMS = fields.Integer(
        string="Código da Situação Tributária",
        sped_length=3,
        help=(
            "Código da Situação Tributária, conforme a Tabela indicada no item" " 4.3.1"
        ),
    )

    CFOP = fields.Integer(
        string="Código Fiscal de Operação e Prestação",
        sped_length=4,
        help=("Código Fiscal de Operação e Prestação do agrupamento de itens"),
    )

    ALIQ_ICMS = fields.Float(
        string="Alíquota do ICMS",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_OPR = fields.Monetary(
        string="“Valor total do CF-e” na combinação de CST_ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "“Valor total do CF-e” na combinação de CST_ICMS, CFOP e ALÍQUOTA "
            "DO ICMS, correspondente ao somatório do valor líquido dos itens."
        ),
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor acumulado da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor acumulado da base de cálculo do ICMS, referente à "
            "combinação de CST_ICMS, CFOP e ALÍQUOTA DO ICMS."
        ),
    )

    VL_ICMS = fields.Monetary(
        string="Parcela correspondente ao 'Valor",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao 'Valor do ICMS' referente à combinação "
            "de CST_ICMS, CFOP e alíquota do ICMS."
        ),
    )

    COD_OBS = fields.Char(
        string="Código da observação do lançamento fiscal",
        sped_length=6,
        help=(
            "Código da observação do lançamento fiscal (campo 02 do registro " "0460)"
        ),
    )

    reg_C890_ids_RegistroC860_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.c860",
        string="Identificação do equipamento SAT-CF-e",
        required=True,
        ondelete="cascade",
        help="Identificação do equipamento SAT-CF-e (Código 59)",
    )


class RegistroD100(models.Model):
    """Nota Fiscal de Serviço de Transporte (código 07), Conhecimentos de
    Transpor- te Rodoviário De Cargas (código 08), Conhecimentos de
    Transporte de Cargas Avulso (código 8b), Aquaviário de Cargas (código
    09), Aéreo (código 10), Fer- roviário de Cargas (código 11), Multimodal
    de Cargas (código 26), Nota Fiscal de Transporte Ferroviário de Carga
    (código 27), Conhecimento de Transporte Eletrônico – CT-e (código 57),
    Conhecimento de Transporte Eletrônico para Outros Serviços - CT-e OS
    (código 67) e Bilhete de Passagem Eletrônico (códi- go 63)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d100"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    IND_OPER = fields.Char(
        string="Indicador do tipo de operação: 0",
        help="Indicador do tipo de operação: 0 - Aquisição; 1 - Prestação",
    )

    IND_EMIT = fields.Char(
        string="Indicador do emitente do documento fiscal",
        help=(
            "Indicador do emitente do documento fiscal: 0 - Emissão própria; 1"
            " - Terceiros"
        ),
    )

    COD_PART = fields.Char(
        string="Código do participante",
        sped_length=60,
        help=(
            "Código do participante (campo 02 do Registro 0150): - do "
            "prestador de serviço, no caso de aquisição de serviço; - do "
            "tomador do serviço, no caso de prestação de serviços."
        ),
    )

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    COD_SIT = fields.Integer(
        string="Código da situação do documento fiscal",
        help=("Código da situação do documento fiscal, conforme a Tabela 4.1.2"),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    SUB = fields.Char(string="Subsérie do documento fiscal", sped_length=3)

    NUM_DOC = fields.Integer(string="Número do documento fiscal", sped_length=9)

    CHV_CTE = fields.Integer(
        string="Chave do Conhecimento de Transporte Eletrônico",
        help=(
            "Chave do Conhecimento de Transporte Eletrônico ou do Bilhete de "
            "Passagem Eletrônico"
        ),
    )

    DT_DOC = fields.Date(string="Data da emissão do documento fiscal")

    DT_A_P = fields.Date(string="Data da aquisição ou da prestação do serviço")

    TP_CT_e = fields.Integer(
        string="Tipo de Conhecimento",
        help=(
            "Tipo de Conhecimento de Transporte Eletrônico conforme definido "
            "no Manual de Integração do CT-e ou do Bilhete de Passagem "
            "Eletrônico conforme definido no Manual de Integração do BP-e"
        ),
    )

    CHV_CTE_REF = fields.Integer(
        string="Chave do Bilhete",
        help="Chave do Bilhete de Passagem Eletrônico substituído",
    )

    VL_DOC = fields.Monetary(
        string="Valor total do documento fiscal",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESC = fields.Monetary(
        string="Valor total do desconto",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_FRT = fields.Char(
        string="Indicador do tipo do frete: 0",
        help=(
            "Indicador do tipo do frete: 0 - Por conta de terceiros; 1 - Por "
            "conta do emitente; 2 - Por conta do destinatário; 9 - Sem "
            "cobrança de frete."
        ),
    )

    VL_SERV = fields.Monetary(
        string="Valor total da prestação de serviço",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS = fields.Monetary(
        string="Valor do ICMS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_NT = fields.Monetary(
        string="Valor não-tributado",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_INF = fields.Char(
        string="Código da informação complementar do documento", sped_length=6
    )

    COD_CTA = fields.Char(
        string="Código", help="Código da conta analítica contábil debitada/creditada"
    )

    COD_MUN_ORIG = fields.Integer(
        string="Código do município de origem do serviço",
        help=(
            "Código do município de origem do serviço, conforme a tabela IBGE "
            "(Preencher com 9999999, se Exterior)"
        ),
    )

    COD_MUN_DEST = fields.Integer(
        string="Código do município de destino",
        help=(
            "Código do município de destino, conforme a tabela IBGE (Preencher"
            " com 9999999, se Exterior)"
        ),
    )

    reg_D101_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d101",
        "reg_D101_ids_RegistroD100_id",
        string="D101 Informação complementar",
        sped_card="1:1",
        sped_required="UNDEF_REQUIRED",
        help=(
            "D101 Informação complementar dos documentos fiscais quando das "
            "prestações interestaduais destinadas a consumidor final não "
            "contribuinte - EC 87/15"
        ),
    )

    reg_D140_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d140",
        "reg_D140_ids_RegistroD100_id",
        string="D140 Complemento do Conhecimento Aquaviário",
        sped_card="1:1",
        sped_required="UNDEF_REQUIRED",
        help=("D140 Complemento do Conhecimento Aquaviário de Cargas (código 09)"),
    )

    reg_D150_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d150",
        "reg_D150_ids_RegistroD100_id",
        string="D150 Complemento do Conhecimento Aéreo de Cargas",
        sped_card="1:1",
        sped_required="UNDEF_REQUIRED",
        help="D150 Complemento do Conhecimento Aéreo de Cargas (código 10)",
    )

    reg_D170_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d170",
        "reg_D170_ids_RegistroD100_id",
        string="D170 Complemento do Conhecimento Multimodal",
        sped_card="1:1",
        sped_required="UNDEF_REQUIRED",
        help=("D170 Complemento do Conhecimento Multimodal de Cargas (código 26)"),
    )

    reg_D110_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d110",
        "reg_D110_ids_RegistroD100_id",
        string="D110 Itens do documento",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "D110 Itens do documento - Nota Fiscal de Serviços de Transporte "
            "(código 07)"
        ),
    )

    reg_D130_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d130",
        "reg_D130_ids_RegistroD100_id",
        string="D130 Complemento do Conhecimento Rodoviário",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "D130 Complemento do Conhecimento Rodoviário de Cargas (código 08)"
            " e Conheci- mento de Transporte de Cargas Avulso (Código 8B)"
        ),
    )

    reg_D160_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d160",
        "reg_D160_ids_RegistroD100_id",
        string="D160 Carga Transportada",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help="D160 Carga Transportada (CÓDIGO 08, 8B, 09, 10, 11, 26 E 27)",
    )

    reg_D180_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d180",
        "reg_D180_ids_RegistroD100_id",
        string="D180 Modais (código 26)",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
    )

    reg_D190_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d190",
        "reg_D190_ids_RegistroD100_id",
        string="D190 Registro Analítico dos Documentos",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "D190 Registro Analítico dos Documentos (CÓDIGO 07, 08, 8B, 09, "
            "10, 11, 26, 27, 57 e 67)"
        ),
    )

    reg_D195_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d195",
        "reg_D195_ids_RegistroD100_id",
        string="D195 Observações do lançamento",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "D195 Observações do lançamento (CÓDIGO 07, 08, 8B, 09, 10, 11, "
            "26, 27, 57 e 67)"
        ),
    )


class RegistroD101(models.Model):
    """Informação complementar dos documentos fiscais quando das prestações
    interestaduais destinadas a consumidor final não contribuinte - EC
    87/15"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d101"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    VL_FCP_UF_DEST = fields.Monetary(
        string="Valor total relativo ao Fundo de Combate à Pobreza",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total relativo ao Fundo de Combate à Pobreza (FCP) da UF de"
            " destino"
        ),
    )

    VL_ICMS_UF_DEST = fields.Monetary(
        string="Valor total do ICMS Interestadual para a UF",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor total do ICMS Interestadual para a UF de destino",
    )

    VL_ICMS_UF_REM = fields.Monetary(
        string="VL_ICMS_UF_REM",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor total do ICMS Interestadual para a UF do remetente",
    )

    reg_D101_ids_RegistroD100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d100",
        string="Nota Fiscal de Serviço de Transporte",
        required=True,
        ondelete="cascade",
        help=(
            "Nota Fiscal de Serviço de Transporte (código 07), Conhecimentos "
            "de Transpor- te Rodoviário De Cargas (código 08), Conhecimentos "
            "de Transporte de Cargas Avulso (código 8b), Aquaviário de Cargas "
            "(código 09), Aéreo (código 10), Fer- roviário de Cargas (código "
            "11), Multimodal de Cargas (código 26), Nota Fiscal de Transporte "
            "Ferroviário de Carga (código 27), Conhecimento de Transporte "
            "Eletrônico – CT-e (código 57), Conhecimento de Transporte "
            "Eletrônico para Outros Serviços - CT-e OS (código 67) e Bilhete "
            "de Passagem Eletrônico (códi- go 63)"
        ),
    )


class RegistroD110(models.Model):
    """Itens do documento - Nota Fiscal de Serviços de Transporte (código
    07)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d110"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    NUM_ITEM = fields.Integer(
        string="Número sequencial do item no documento fiscal", sped_length=3
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    VL_SERV = fields.Monetary(
        string="Valor do serviço",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_OUT = fields.Monetary(
        string="Outros valores", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    reg_D110_ids_RegistroD100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d100",
        string="Nota Fiscal de Serviço de Transporte",
        required=True,
        ondelete="cascade",
        help=(
            "Nota Fiscal de Serviço de Transporte (código 07), Conhecimentos "
            "de Transpor- te Rodoviário De Cargas (código 08), Conhecimentos "
            "de Transporte de Cargas Avulso (código 8b), Aquaviário de Cargas "
            "(código 09), Aéreo (código 10), Fer- roviário de Cargas (código "
            "11), Multimodal de Cargas (código 26), Nota Fiscal de Transporte "
            "Ferroviário de Carga (código 27), Conhecimento de Transporte "
            "Eletrônico – CT-e (código 57), Conhecimento de Transporte "
            "Eletrônico para Outros Serviços - CT-e OS (código 67) e Bilhete "
            "de Passagem Eletrônico (códi- go 63)"
        ),
    )

    reg_D120_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d120",
        "reg_D120_ids_RegistroD110_id",
        string="D120 Complemento da Nota Fiscal de Serviços",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "D120 Complemento da Nota Fiscal de Serviços de Transporte (código" " 07)"
        ),
    )


class RegistroD120(models.Model):
    "Complemento da Nota Fiscal de Serviços de Transporte (código 07)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d120"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_MUN_ORIG = fields.Integer(
        string="Código do município de origem do serviço",
        help=(
            "Código do município de origem do serviço, conforme a tabela "
            "IBGE(Preencher com 9999999, se Exterior)"
        ),
    )

    COD_MUN_DEST = fields.Integer(
        string="Código do município de destino",
        help=(
            "Código do município de destino, conforme a tabela IBGE(Preencher "
            "com 9999999, se Exterior)"
        ),
    )

    VEIC_ID = fields.Char(string="Placa de identificação do veículo", sped_length=7)

    UF_ID = fields.Char(string="Sigla da UF da placa do veículo", sped_length=2)

    reg_D120_ids_RegistroD110_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d110",
        string="Itens do documento",
        required=True,
        ondelete="cascade",
        help=(
            "Itens do documento - Nota Fiscal de Serviços de Transporte " "(código 07)"
        ),
    )


class RegistroD130(models.Model):
    """Complemento do Conhecimento Rodoviário de Cargas (código 08) e Conheci-
    mento de Transporte de Cargas Avulso (Código 8B)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d130"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_PART_CONSG = fields.Char(
        string="Código do participante",
        sped_length=60,
        help=(
            "Código do participante (campo 02 do Registro 0150): - "
            "consignatário, se houver"
        ),
    )

    COD_PART_RED = fields.Char(
        string="Código do participante (COD_PART_RED)",
        sped_length=60,
        help=(
            "Código do participante (campo 02 do Registro 0150): - "
            "redespachado, se houver"
        ),
    )

    IND_FRT_RED = fields.Char(
        string="Indicador do tipo do frete da operação",
        help=(
            "Indicador do tipo do frete da operação de redespacho: 0 – Sem "
            "redespacho; 1 - Por conta do emitente; 2 - Por conta do "
            "destinatário; 9 – Outros."
        ),
    )

    COD_MUN_ORIG = fields.Integer(
        string="Código do município de origem do serviço",
        help=(
            "Código do município de origem do serviço, conforme a tabela "
            "IBGE(Preencher com 9999999, se Exterior)"
        ),
    )

    COD_MUN_DEST = fields.Integer(
        string="Código do município de destino",
        help=(
            "Código do município de destino, conforme a tabela IBGE(Preencher "
            "com 9999999, se Exterior)"
        ),
    )

    VEIC_ID = fields.Char(string="Placa de identificação do veículo", sped_length=7)

    VL_LIQ_FRT = fields.Monetary(
        string="Valor líquido do frete",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SEC_CAT = fields.Monetary(
        string="Soma de valores de Sec/Cat",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Soma de valores de Sec/Cat (serviços de coleta/custo adicional de"
            " transporte)"
        ),
    )

    VL_DESP = fields.Monetary(
        string="Soma de valores de despacho",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_PEDG = fields.Monetary(
        string="Soma dos valores de pedágio",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_OUT = fields.Monetary(
        string="Outros valores", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_FRT = fields.Monetary(
        string="Valor total do frete",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    UF_ID = fields.Char(string="Sigla da UF da placa do veículo", sped_length=2)

    reg_D130_ids_RegistroD100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d100",
        string="Nota Fiscal de Serviço de Transporte",
        required=True,
        ondelete="cascade",
        help=(
            "Nota Fiscal de Serviço de Transporte (código 07), Conhecimentos "
            "de Transpor- te Rodoviário De Cargas (código 08), Conhecimentos "
            "de Transporte de Cargas Avulso (código 8b), Aquaviário de Cargas "
            "(código 09), Aéreo (código 10), Fer- roviário de Cargas (código "
            "11), Multimodal de Cargas (código 26), Nota Fiscal de Transporte "
            "Ferroviário de Carga (código 27), Conhecimento de Transporte "
            "Eletrônico – CT-e (código 57), Conhecimento de Transporte "
            "Eletrônico para Outros Serviços - CT-e OS (código 67) e Bilhete "
            "de Passagem Eletrônico (códi- go 63)"
        ),
    )


class RegistroD140(models.Model):
    "Complemento do Conhecimento Aquaviário de Cargas (código 09)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d140"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_PART_CONSG = fields.Char(
        string="Código do participante",
        sped_length=60,
        help=(
            "Código do participante (campo 02 do Registro 0150): - "
            "consignatário, se houver"
        ),
    )

    COD_MUN_ORIG = fields.Integer(string="Código do município de origem do serviço")

    COD_MUN_DEST = fields.Integer(
        string="Código do município de destino",
        help=(
            "Código do município de destino, conforme a tabela IBGE(Preencher "
            "com 9999999, se Exterior)"
        ),
    )

    IND_VEIC = fields.Char(
        string="Indicador do tipo do veículo transportador",
        help=(
            "Indicador do tipo do veículo transportador: 0- Embarcação; 1- "
            "Empurrador/rebocador"
        ),
    )

    VEIC_ID = fields.Char(
        string="Identificação da embarcação",
        help="Identificação da embarcação (IRIM ou Registro CPP)",
    )

    IND_NAV = fields.Char(
        string="Indicador do tipo da navegação",
        help="Indicador do tipo da navegação: 0- Interior; 1- Cabotagem",
    )

    VIAGEM = fields.Integer(string="Número da viagem")

    VL_FRT_LIQ = fields.Monetary(
        string="Valor líquido do frete",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESP_PORT = fields.Monetary(
        string="Valor das despesas portuárias",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESP_CAR_DESC = fields.Monetary(
        string="Valor das despesas com carga e descarga",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_OUT = fields.Monetary(
        string="Outros valores", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_FRT_BRT = fields.Monetary(
        string="Valor bruto do frete",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_FRT_MM = fields.Monetary(
        string="Valor adicional do frete para renovação",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor adicional do frete para renovação da Marinha Mercante",
    )

    reg_D140_ids_RegistroD100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d100",
        string="Nota Fiscal de Serviço de Transporte",
        required=True,
        ondelete="cascade",
        help=(
            "Nota Fiscal de Serviço de Transporte (código 07), Conhecimentos "
            "de Transpor- te Rodoviário De Cargas (código 08), Conhecimentos "
            "de Transporte de Cargas Avulso (código 8b), Aquaviário de Cargas "
            "(código 09), Aéreo (código 10), Fer- roviário de Cargas (código "
            "11), Multimodal de Cargas (código 26), Nota Fiscal de Transporte "
            "Ferroviário de Carga (código 27), Conhecimento de Transporte "
            "Eletrônico – CT-e (código 57), Conhecimento de Transporte "
            "Eletrônico para Outros Serviços - CT-e OS (código 67) e Bilhete "
            "de Passagem Eletrônico (códi- go 63)"
        ),
    )


class RegistroD150(models.Model):
    "Complemento do Conhecimento Aéreo de Cargas (código 10)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d150"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_MUN_ORIG = fields.Integer(
        string="Código do município de origem do serviço",
        help=(
            "Código do município de origem do serviço, conforme a tabela IBGE "
            "(Preencher com 9999999, se Exterior)"
        ),
    )

    COD_MUN_DEST = fields.Integer(
        string="Código do município de destino",
        help=(
            "Código do município de destino, conforme a tabela IBGE (Preencher"
            " com 9999999, se Exterior)"
        ),
    )

    VEIC_ID = fields.Char(string="Identificação da aeronave (DAC)")

    VIAGEM = fields.Integer(string="Número do vôo")

    IND_TFA = fields.Char(
        string="Indicador do tipo de tarifa aplicada",
        help=(
            "Indicador do tipo de tarifa aplicada: 0- Exp.; 1- Enc.; 2- C.I.; "
            "9- Outra"
        ),
    )

    VL_PESO_TX = fields.Monetary(
        string="Peso taxado", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_TX_TERR = fields.Monetary(
        string="Valor da taxa terrestre",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_TX_RED = fields.Monetary(
        string="Valor da taxa de redespacho",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_OUT = fields.Monetary(
        string="Outros valores", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_TX_ADV = fields.Monetary(
        string="Valor da taxa 'ad valorem'",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_D150_ids_RegistroD100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d100",
        string="Nota Fiscal de Serviço de Transporte",
        required=True,
        ondelete="cascade",
        help=(
            "Nota Fiscal de Serviço de Transporte (código 07), Conhecimentos "
            "de Transpor- te Rodoviário De Cargas (código 08), Conhecimentos "
            "de Transporte de Cargas Avulso (código 8b), Aquaviário de Cargas "
            "(código 09), Aéreo (código 10), Fer- roviário de Cargas (código "
            "11), Multimodal de Cargas (código 26), Nota Fiscal de Transporte "
            "Ferroviário de Carga (código 27), Conhecimento de Transporte "
            "Eletrônico – CT-e (código 57), Conhecimento de Transporte "
            "Eletrônico para Outros Serviços - CT-e OS (código 67) e Bilhete "
            "de Passagem Eletrônico (códi- go 63)"
        ),
    )


class RegistroD160(models.Model):
    "Carga Transportada (CÓDIGO 08, 8B, 09, 10, 11, 26 E 27)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d160"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    DESPACHO = fields.Char(string="Identificação do número do despacho")

    CNPJ_CPF_REM = fields.Char(
        string="CNPJ ou CPF do remetente das mercadorias",
        sped_length=14,
        help=(
            "CNPJ ou CPF do remetente das mercadorias que constam na nota " "fiscal."
        ),
    )

    IE_REM = fields.Char(
        string="Inscrição Estadual do remetente das mercadorias",
        sped_length=14,
        help=(
            "Inscrição Estadual do remetente das mercadorias que constam na "
            "nota fiscal."
        ),
    )

    COD_MUN_ORI = fields.Integer(
        string="Código do Município de origem",
        help=(
            "Código do Município de origem, conforme tabela IBGE(Preencher com"
            " 9999999, se Exterior)"
        ),
    )

    CNPJ_CPF_DEST = fields.Char(
        string="CNPJ ou CPF do destinatário das mercadorias",
        sped_length=14,
        help=(
            "CNPJ ou CPF do destinatário das mercadorias que constam na nota " "fiscal."
        ),
    )

    IE_DEST = fields.Char(
        string="Inscrição Estadual do destinatário das mercadorias",
        sped_length=14,
        help=(
            "Inscrição Estadual do destinatário das mercadorias que constam na"
            " nota fiscal."
        ),
    )

    COD_MUN_DEST = fields.Integer(
        string="Código do Município de destino",
        help=(
            "Código do Município de destino, conforme tabela IBGE(Preencher "
            "com 9999999, se Exterior)"
        ),
    )

    reg_D160_ids_RegistroD100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d100",
        string="Nota Fiscal de Serviço de Transporte",
        required=True,
        ondelete="cascade",
        help=(
            "Nota Fiscal de Serviço de Transporte (código 07), Conhecimentos "
            "de Transpor- te Rodoviário De Cargas (código 08), Conhecimentos "
            "de Transporte de Cargas Avulso (código 8b), Aquaviário de Cargas "
            "(código 09), Aéreo (código 10), Fer- roviário de Cargas (código "
            "11), Multimodal de Cargas (código 26), Nota Fiscal de Transporte "
            "Ferroviário de Carga (código 27), Conhecimento de Transporte "
            "Eletrônico – CT-e (código 57), Conhecimento de Transporte "
            "Eletrônico para Outros Serviços - CT-e OS (código 67) e Bilhete "
            "de Passagem Eletrônico (códi- go 63)"
        ),
    )

    reg_D161_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d161",
        "reg_D161_ids_RegistroD160_id",
        string="D161 Local de Coleta e Entrega",
        sped_card="1:1",
        sped_required="UNDEF_REQUIRED",
        help=("D161 Local de Coleta e Entrega (códigos 08, 8B, 09, 10, 11 e 26)"),
    )

    reg_D162_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d162",
        "reg_D162_ids_RegistroD160_id",
        string="D162 Identificação dos documentos fiscais",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "D162 Identificação dos documentos fiscais (código 08,8B, "
            "09,10,11,26 e 27)"
        ),
    )


class RegistroD161(models.Model):
    "Local de Coleta e Entrega (códigos 08, 8B, 09, 10, 11 e 26)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d161"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    IND_CARGA = fields.Integer(
        string="Indicador do tipo de transporte da carga coletada",
        help=(
            "Indicador do tipo de transporte da carga coletada: 0-Rodoviário "
            "1-Ferroviário 2-Rodo-Ferroviário 3-Aquaviário 4-Dutoviário "
            "5-Aéreo 9-Outros"
        ),
    )

    CNPJ_CPF_COL = fields.Char(
        string="Número do CNPJ ou CPF do local da coleta", sped_length=14
    )

    IE_COL = fields.Char(
        string="Inscrição Estadual do contribuinte do local",
        sped_length=14,
        help="Inscrição Estadual do contribuinte do local de coleta",
    )

    COD_MUN_COL = fields.Integer(
        string="Código do Município do local de coleta",
        help=(
            "Código do Município do local de coleta, conforme tabela "
            "IBGE(Preencher com 9999999, se Exterior)"
        ),
    )

    CNPJ_CPF_ENTG = fields.Char(
        string="Número do CNPJ ou CPF do local da entrega", sped_length=14
    )

    IE_ENTG = fields.Char(
        string="IE_ENTG",
        sped_length=14,
        help="Inscrição Estadual do contribuinte do local de entrega",
    )

    COD_MUN_ENTG = fields.Integer(
        string="Código do Município do local de entrega",
        help=(
            "Código do Município do local de entrega, conforme tabela "
            "IBGE(Preencher com 9999999, se Exterior)"
        ),
    )

    reg_D161_ids_RegistroD160_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d160",
        string="Carga Transportada",
        required=True,
        ondelete="cascade",
        help="Carga Transportada (CÓDIGO 08, 8B, 09, 10, 11, 26 E 27)",
    )


class RegistroD162(models.Model):
    """Identificação dos documentos fiscais (código 08,8B, 09,10,11,26 e 27)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d162"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    NUM_DOC = fields.Integer(string="Número do documento fiscal", sped_length=9)

    DT_DOC = fields.Date(string="Data da emissão do documento fiscal")

    VL_DOC = fields.Monetary(
        string="Valor total do documento fiscal",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_MERC = fields.Monetary(
        string="Valor das mercadorias constantes",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor das mercadorias constantes no documento fiscal",
    )

    QTD_VOL = fields.Integer(string="Quantidade de volumes transportados")

    PESO_BRT = fields.Float(
        string="Peso bruto dos volumes transportados",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Peso bruto dos volumes transportados (em kg)",
    )

    PESO_LIQ = fields.Float(
        string="Peso líquido dos volumes transportados",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Peso líquido dos volumes transportados (em kg)",
    )

    reg_D162_ids_RegistroD160_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d160",
        string="Carga Transportada",
        required=True,
        ondelete="cascade",
        help="Carga Transportada (CÓDIGO 08, 8B, 09, 10, 11, 26 E 27)",
    )


class RegistroD170(models.Model):
    "Complemento do Conhecimento Multimodal de Cargas (código 26)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d170"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_PART_CONSG = fields.Char(
        string="Código do participante",
        sped_length=60,
        help=(
            "Código do participante (campo 02 do Registro 0150): - "
            "consignatário, se houver"
        ),
    )

    COD_PART_RED = fields.Char(
        string="Código do participante (COD_PART_RED)",
        sped_length=60,
        help=(
            "Código do participante (campo 02 do Registro 0150): - "
            "redespachante, se houver"
        ),
    )

    COD_MUN_ORIG = fields.Integer(
        string="Código do município de origem do serviço",
        help=(
            "Código do município de origem do serviço, conforme a tabela "
            "IBGE(Preencher com 9999999, se Exterior)"
        ),
    )

    COD_MUN_DEST = fields.Integer(
        string="Código do município de destino",
        help=(
            "Código do município de destino, conforme a tabela IBGE(Preencher "
            "com 9999999, se Exterior)"
        ),
    )

    OTM = fields.Char(string="Registro do operador de transporte multimodal")

    IND_NAT_FRT = fields.Char(
        string="Indicador da natureza do frete",
        help=("Indicador da natureza do frete: 0- Negociável; 1- Não negociável"),
    )

    VL_LIQ_FRT = fields.Monetary(
        string="Valor líquido do frete",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_GRIS = fields.Monetary(
        string="Valor do gris",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor do gris (gerenciamento de risco)",
    )

    VL_PDG = fields.Monetary(
        string="Somatório dos valores de pedágio",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_OUT = fields.Monetary(
        string="Outros valores", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_FRT = fields.Monetary(
        string="Valor total do frete",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VEIC_ID = fields.Char(string="Placa de identificação do veículo", sped_length=7)

    UF_ID = fields.Char(string="Sigla da UF da placa do veículo", sped_length=2)

    reg_D170_ids_RegistroD100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d100",
        string="Nota Fiscal de Serviço de Transporte",
        required=True,
        ondelete="cascade",
        help=(
            "Nota Fiscal de Serviço de Transporte (código 07), Conhecimentos "
            "de Transpor- te Rodoviário De Cargas (código 08), Conhecimentos "
            "de Transporte de Cargas Avulso (código 8b), Aquaviário de Cargas "
            "(código 09), Aéreo (código 10), Fer- roviário de Cargas (código "
            "11), Multimodal de Cargas (código 26), Nota Fiscal de Transporte "
            "Ferroviário de Carga (código 27), Conhecimento de Transporte "
            "Eletrônico – CT-e (código 57), Conhecimento de Transporte "
            "Eletrônico para Outros Serviços - CT-e OS (código 67) e Bilhete "
            "de Passagem Eletrônico (códi- go 63)"
        ),
    )


class RegistroD180(models.Model):
    "Modais (código 26)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d180"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    NUM_SEQ = fields.Integer(string="Número de ordem sequencial do modal")

    IND_EMIT = fields.Char(
        string="Indicador do emitente do documento fiscal",
        help=(
            "Indicador do emitente do documento fiscal: 0 - Emissão própria; 1"
            " - Terceiros"
        ),
    )

    CNPJ_CPF_EMIT = fields.Char(
        string="CNPJ ou CPF do participante emitente do modal", sped_length=14
    )

    UF_EMIT = fields.Char(
        string="Sigla da unidade da federação",
        help=("Sigla da unidade da federação do participante emitente do modal"),
    )

    IE_EMIT = fields.Char(
        string="Inscrição Estadual do participante emitente",
        sped_length=14,
        help="Inscrição Estadual do participante emitente do modal",
    )

    COD_MUN_ORIG = fields.Integer(
        string="Código do município de origem do serviço",
        help=(
            "Código do município de origem do serviço, conforme a tabela "
            "IBGE(Preencher com 9999999, se Exterior)"
        ),
    )

    CNPJ_CPF_TOM = fields.Char(
        string="CNPJ/CPF do participante tomador do serviço", sped_length=14
    )

    UF_TOM = fields.Char(
        string="Sigla da unidade da federação (UF_TOM)",
        help=("Sigla da unidade da federação do participante tomador do serviço"),
    )

    IE_TOM = fields.Char(
        string="Inscrição Estadual do participante tomador",
        sped_length=14,
        help="Inscrição Estadual do participante tomador do serviço",
    )

    COD_MUN_DEST = fields.Integer(
        string="Código do município de destino",
        help=(
            "Código do município de destino, conforme a tabela IBGE(Preencher "
            "com 9999999, se Exterior)"
        ),
    )

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    SUB = fields.Integer(string="Subsérie do documento fiscal", sped_length=3)

    NUM_DOC = fields.Integer(string="Número do documento fiscal", sped_length=9)

    DT_DOC = fields.Date(string="Data da emissão do documento fiscal")

    VL_DOC = fields.Monetary(
        string="Valor total do documento fiscal",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_D180_ids_RegistroD100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d100",
        string="Nota Fiscal de Serviço de Transporte",
        required=True,
        ondelete="cascade",
        help=(
            "Nota Fiscal de Serviço de Transporte (código 07), Conhecimentos "
            "de Transpor- te Rodoviário De Cargas (código 08), Conhecimentos "
            "de Transporte de Cargas Avulso (código 8b), Aquaviário de Cargas "
            "(código 09), Aéreo (código 10), Fer- roviário de Cargas (código "
            "11), Multimodal de Cargas (código 26), Nota Fiscal de Transporte "
            "Ferroviário de Carga (código 27), Conhecimento de Transporte "
            "Eletrônico – CT-e (código 57), Conhecimento de Transporte "
            "Eletrônico para Outros Serviços - CT-e OS (código 67) e Bilhete "
            "de Passagem Eletrônico (códi- go 63)"
        ),
    )


class RegistroD190(models.Model):
    """Registro Analítico dos Documentos (CÓDIGO 07, 08, 8B, 09, 10, 11, 26,
    27, 57 e 67)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d190"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    CST_ICMS = fields.Integer(
        string="Código da Situação Tributária",
        help=(
            "Código da Situação Tributária, conforme a tabela indicada no item" " 4.3.1"
        ),
    )

    CFOP = fields.Integer(
        string="Código Fiscal de Operação e Prestação",
        help=(
            "Código Fiscal de Operação e Prestação, conforme a tabela indicada"
            " no item 4.2.2"
        ),
    )

    ALIQ_ICMS = fields.Float(
        string="Alíquota do ICMS",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_OPR = fields.Monetary(
        string="Valor da operação correspondente à combinação",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da operação correspondente à combinação de CST_ICMS, CFOP, "
            "e alíquota do ICMS."
        ),
    )

    VL_BC_ICMS = fields.Monetary(
        string="Parcela correspondente ao 'Valor da base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao 'Valor da base de cálculo do ICMS' "
            "referente à combinação CST_ICMS, CFOP, e alíquota do ICMS"
        ),
    )

    VL_ICMS = fields.Monetary(
        string="Parcela correspondente ao 'Valor",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao 'Valor do ICMS' referente à combinação "
            "CST_ICMS, CFOP e alíquota do ICMS"
        ),
    )

    VL_RED_BC = fields.Monetary(
        string="Valor não tributado em função da redução da base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor não tributado em função da redução da base de cálculo do "
            "ICMS, referente à combinação de CST_ICMS, CFOP e alíquota do "
            "ICMS."
        ),
    )

    COD_OBS = fields.Char(
        string="Código da observação do lançamento fiscal",
        sped_length=6,
        help=(
            "Código da observação do lançamento fiscal (campo 02 do Registro " "0460)"
        ),
    )

    reg_D190_ids_RegistroD100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d100",
        string="Nota Fiscal de Serviço de Transporte",
        required=True,
        ondelete="cascade",
        help=(
            "Nota Fiscal de Serviço de Transporte (código 07), Conhecimentos "
            "de Transpor- te Rodoviário De Cargas (código 08), Conhecimentos "
            "de Transporte de Cargas Avulso (código 8b), Aquaviário de Cargas "
            "(código 09), Aéreo (código 10), Fer- roviário de Cargas (código "
            "11), Multimodal de Cargas (código 26), Nota Fiscal de Transporte "
            "Ferroviário de Carga (código 27), Conhecimento de Transporte "
            "Eletrônico – CT-e (código 57), Conhecimento de Transporte "
            "Eletrônico para Outros Serviços - CT-e OS (código 67) e Bilhete "
            "de Passagem Eletrônico (códi- go 63)"
        ),
    )


class RegistroD195(models.Model):
    """Observações do lançamento (CÓDIGO 07, 08, 8B, 09, 10, 11, 26, 27, 57 e
    67)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d195"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_OBS = fields.Char(
        string="Código da observação do lançamento fiscal",
        sped_length=6,
        help=(
            "Código da observação do lançamento fiscal (campo 02 do Registro " "0460)"
        ),
    )

    TXT_COMPL = fields.Char(string="Descrição complementar do código de observação")

    reg_D195_ids_RegistroD100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d100",
        string="Nota Fiscal de Serviço de Transporte",
        required=True,
        ondelete="cascade",
        help=(
            "Nota Fiscal de Serviço de Transporte (código 07), Conhecimentos "
            "de Transpor- te Rodoviário De Cargas (código 08), Conhecimentos "
            "de Transporte de Cargas Avulso (código 8b), Aquaviário de Cargas "
            "(código 09), Aéreo (código 10), Fer- roviário de Cargas (código "
            "11), Multimodal de Cargas (código 26), Nota Fiscal de Transporte "
            "Ferroviário de Carga (código 27), Conhecimento de Transporte "
            "Eletrônico – CT-e (código 57), Conhecimento de Transporte "
            "Eletrônico para Outros Serviços - CT-e OS (código 67) e Bilhete "
            "de Passagem Eletrônico (códi- go 63)"
        ),
    )

    reg_D197_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d197",
        "reg_D197_ids_RegistroD195_id",
        string="D197 Outras obrigações tributárias",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "D197 Outras obrigações tributárias, ajustes e informações de "
            "valores provenientes do documento fiscal."
        ),
    )


class RegistroD197(models.Model):
    """Outras obrigações tributárias, ajustes e informações de valores
    provenientes do documento fiscal."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d197"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_AJ = fields.Char(
        string="Código do ajustes/benefício/incentivo",
        help=(
            "Código do ajustes/benefício/incentivo, conforme tabela indicada "
            "no item 5.3."
        ),
    )

    DESCR_COMPL_AJ = fields.Char(
        string="Descrição complementar do ajuste",
        help="Descrição complementar do ajuste do documento fiscal",
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    VL_BC_ICMS = fields.Monetary(
        string="Base de cálculo do ICMS ou do ICMS ST",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_ICMS = fields.Float(
        string="Alíquota do ICMS",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_ICMS = fields.Monetary(
        string="Valor do ICMS ou do ICMS ST",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_OUTROS = fields.Monetary(
        string="Outros valores", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    reg_D197_ids_RegistroD195_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d195",
        string="Observações do lançamento",
        required=True,
        ondelete="cascade",
        help=(
            "Observações do lançamento (CÓDIGO 07, 08, 8B, 09, 10, 11, 26, 27,"
            " 57 e 67)"
        ),
    )


class RegistroD300(models.Model):
    """Registro Analítico dos bilhetes consolidados de Passagem Rodoviário
    (código 13), de Passagem Aquaviário (código 14), de Passagem e Nota de
    Bagagem (código 15) e de Passagem Ferroviário (código 16)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d300"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    SUB = fields.Integer(string="Subsérie do documento fiscal", sped_length=4)

    NUM_DOC_INI = fields.Integer(
        string="Número do primeiro documento fiscal emitido",
        sped_length=6,
        help=(
            "Número do primeiro documento fiscal emitido (mesmo modelo, série "
            "e subsérie)"
        ),
    )

    NUM_DOC_FIN = fields.Integer(
        string="Número do último documento fiscal emitido",
        help=(
            "Número do último documento fiscal emitido (mesmo modelo, série e "
            "subsérie)"
        ),
    )

    CST_ICMS = fields.Integer(
        string="Código da Situação Tributária",
        help=(
            "Código da Situação Tributária, conforme a Tabela indicada no item" " 4.3.1"
        ),
    )

    CFOP = fields.Integer(
        string="Código Fiscal de Operação",
        help=(
            "Código Fiscal de Operação e Prestação conforme tabela indicada no"
            " item 4.2.2"
        ),
    )

    ALIQ_ICMS = fields.Float(
        string="Alíquota do ICMS",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    DT_DOC = fields.Date(string="Data da emissão dos documentos fiscais")

    VL_OPR = fields.Monetary(
        string="Valor total acumulado",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total acumulado das operações correspondentes à combinação "
            "de CST_ICMS, CFOP e alíquota do ICMS, incluídas as despesas "
            "acessórias e acréscimos."
        ),
    )

    VL_DESC = fields.Monetary(
        string="Valor total dos descontos",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SERV = fields.Monetary(
        string="Valor total da prestação de serviço",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SEG = fields.Monetary(
        string="Valor de seguro", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_OUTDESP = fields.Monetary(
        string="Valor de outras despesas",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor total da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS = fields.Monetary(
        string="Valor total do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_RED_BC = fields.Monetary(
        string="Valor não tributado em função da redução da base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor não tributado em função da redução da base de cálculo do "
            "ICMS, referente à combinação de CST_ICMS, CFOP e alíquota do "
            "ICMS."
        ),
    )

    COD_OBS = fields.Char(
        string="Código da observação do lançamento fiscal",
        sped_length=6,
        help=(
            "Código da observação do lançamento fiscal (campo 02 do Registro " "0460)"
        ),
    )

    COD_CTA = fields.Char(
        string="Código", help="Código da conta analítica contábil debitada/creditada"
    )

    reg_D301_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d301",
        "reg_D301_ids_RegistroD300_id",
        string="D301 Documentos cancelados dos Bilhetes",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "D301 Documentos cancelados dos Bilhetes de Passagem Rodoviário "
            "(código 13), de Passagem Aquaviário (código 14), de Passagem e "
            "Nota de Bagagem (código 15) e de Passagem Ferroviário (código 16)"
        ),
    )

    reg_D310_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d310",
        "reg_D310_ids_RegistroD300_id",
        string="D310 Complemento dos Bilhetes",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "D310 Complemento dos Bilhetes (código 13, código 14, código 15 e "
            "código 16)"
        ),
    )


class RegistroD301(models.Model):
    """Documentos cancelados dos Bilhetes de Passagem Rodoviário (código 13),
    de Passagem Aquaviário (código 14), de Passagem e Nota de Bagagem
    (código 15) e de Passagem Ferroviário (código 16)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d301"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    NUM_DOC_CANC = fields.Integer(string="Número do documento fiscal cancelado")

    reg_D301_ids_RegistroD300_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d300",
        string="Registro Analítico dos bilhetes consolidados",
        required=True,
        ondelete="cascade",
        help=(
            "Registro Analítico dos bilhetes consolidados de Passagem "
            "Rodoviário (código 13), de Passagem Aquaviário (código 14), de "
            "Passagem e Nota de Bagagem (código 15) e de Passagem Ferroviário "
            "(código 16)"
        ),
    )


class RegistroD310(models.Model):
    """Complemento dos Bilhetes (código 13, código 14, código 15 e código
    16)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d310"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_MUN_ORIG = fields.Integer(
        string="Código do município de origem do serviço",
        help=("Código do município de origem do serviço, conforme a tabela IBGE"),
    )

    VL_SERV = fields.Monetary(
        string="Valor total da prestação de serviço",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor total da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS = fields.Monetary(
        string="Valor total do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_D310_ids_RegistroD300_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d300",
        string="Registro Analítico dos bilhetes consolidados",
        required=True,
        ondelete="cascade",
        help=(
            "Registro Analítico dos bilhetes consolidados de Passagem "
            "Rodoviário (código 13), de Passagem Aquaviário (código 14), de "
            "Passagem e Nota de Bagagem (código 15) e de Passagem Ferroviário "
            "(código 16)"
        ),
    )


class RegistroD350(models.Model):
    "Equipamento ECF (Códigos 2E, 13, 14, 15 e 16)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d350"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    ECF_MOD = fields.Char(string="Modelo do equipamento", sped_length=20)

    ECF_FAB = fields.Char(string="Número de série de fabricação do ECF", sped_length=21)

    ECF_CX = fields.Integer(string="Número do caixa atribuído ao ECF", sped_length=3)

    reg_D355_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d355",
        "reg_D355_ids_RegistroD350_id",
        string="D355 Redução Z",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help="D355 Redução Z (Códigos 2E, 13, 14, 15 e 16)",
    )


class RegistroD355(models.Model):
    "Redução Z (Códigos 2E, 13, 14, 15 e 16)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d355"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    DT_DOC = fields.Date(string="Data do movimento a que se refere a Redução Z")

    CRO = fields.Integer(
        string="Posição do Contador de Reinício de Operação", sped_length=3
    )

    CRZ = fields.Integer(string="Posição do Contador de Redução Z", sped_length=6)

    NUM_COO_FIN = fields.Integer(
        string="Número do Contador de Ordem de Operação",
        sped_length=9,
        help=(
            "Número do Contador de Ordem de Operação do último documento "
            "emitido no dia. (Número do COO na Redução Z)"
        ),
    )

    GT_FIN = fields.Float(
        string="Valor do Grande Total final",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_BRT = fields.Monetary(
        string="Valor da venda bruta",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_D355_ids_RegistroD350_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d350",
        string="Equipamento ECF",
        required=True,
        ondelete="cascade",
        help="Equipamento ECF (Códigos 2E, 13, 14, 15 e 16)",
    )

    reg_D360_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d360",
        "reg_D360_ids_RegistroD355_id",
        string="D360 PIS E COFINS totalizados no dia",
        sped_card="1:1",
        sped_required="UNDEF_REQUIRED",
        help=("D360 PIS E COFINS totalizados no dia (Códigos 2E, 13, 14, 15 e " "16)"),
    )

    reg_D365_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d365",
        "reg_D365_ids_RegistroD355_id",
        string="D365 Registro dos Totalizadores Parciais",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "D365 Registro dos Totalizadores Parciais da Redução Z (Códigos "
            "2E, 13, 14, 15 e 16)"
        ),
    )

    reg_D390_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d390",
        "reg_D390_ids_RegistroD355_id",
        string="D390 Registro analítico do movimento diário",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "D390 Registro analítico do movimento diário (Códigos 13, 14, 15, "
            "16 E 2E)"
        ),
    )


class RegistroD360(models.Model):
    "PIS E COFINS totalizados no dia (Códigos 2E, 13, 14, 15 e 16)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d360"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    VL_PIS = fields.Monetary(
        string="Valor total do PIS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_COFINS = fields.Monetary(
        string="Valor total da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_D360_ids_RegistroD355_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d355",
        string="Redução Z",
        required=True,
        ondelete="cascade",
        help="Redução Z (Códigos 2E, 13, 14, 15 e 16)",
    )


class RegistroD365(models.Model):
    """Registro dos Totalizadores Parciais da Redução Z (Códigos 2E, 13, 14, 15
    e 16)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d365"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_TOT_PAR = fields.Char(
        string="Código do totalizador",
        sped_length=7,
        help="Código do totalizador, conforme Tabela 4.4.6",
    )

    VLR_ACUM_TOT = fields.Float(
        string="Valor acumulado no totalizador",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=("Valor acumulado no totalizador, relativo à respectiva Redução Z."),
    )

    NR_TOT = fields.Integer(
        string="Número do totalizador quando ocorrer",
        sped_length=2,
        help=(
            "Número do totalizador quando ocorrer mais de uma situação com a "
            "mesma carga tributária efetiva."
        ),
    )

    DESCR_NR_TOT = fields.Char(
        string="Descrição da situação tributária relativa",
        help=(
            "Descrição da situação tributária relativa ao totalizador parcial,"
            " quando houver mais de um com a mesma carga tributária efetiva."
        ),
    )

    reg_D365_ids_RegistroD355_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d355",
        string="Redução Z",
        required=True,
        ondelete="cascade",
        help="Redução Z (Códigos 2E, 13, 14, 15 e 16)",
    )

    reg_D370_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d370",
        "reg_D370_ids_RegistroD365_id",
        string="D370 Complemento dos documentos informados",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "D370 Complemento dos documentos informados (Códigos 13, 14, 15, "
            "16 E 2E)"
        ),
    )


class RegistroD370(models.Model):
    "Complemento dos documentos informados (Códigos 13, 14, 15, 16 E 2E)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d370"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 5

    COD_MUN_ORIG = fields.Integer(
        string="Código do município de origem do serviço",
        help=("Código do município de origem do serviço, conforme a tabela IBGE"),
    )

    VL_SERV = fields.Monetary(
        string="Valor total da prestação de serviço",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    QTD_BILH = fields.Integer(string="Quantidade de bilhetes emitidos")

    VL_BC_ICMS = fields.Monetary(
        string="Valor total da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS = fields.Monetary(
        string="Valor total do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_D370_ids_RegistroD365_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d365",
        string="Registro dos Totalizadores Parciais da Redução Z",
        required=True,
        ondelete="cascade",
        help=(
            "Registro dos Totalizadores Parciais da Redução Z (Códigos 2E, 13,"
            " 14, 15 e 16)"
        ),
    )


class RegistroD390(models.Model):
    """Registro analítico do movimento diário (Códigos 13, 14, 15, 16 E 2E)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d390"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    CST_ICMS = fields.Integer(
        string="Código da Situação Tributária",
        help=(
            "Código da Situação Tributária, conforme a Tabela indicada no item"
            " 4.3.1."
        ),
    )

    CFOP = fields.Integer(string="Código Fiscal de Operação e Prestação")

    ALIQ_ICMS = fields.Float(
        string="Alíquota do ICMS",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_OPR = fields.Monetary(
        string="Valor da operação correspondente à combinação",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da operação correspondente à combinação de CST_ICMS, CFOP, "
            "e alíquota do ICMS, incluídas as despesas acessórias e acréscimos"
        ),
    )

    VL_BC_ISSQN = fields.Monetary(
        string="Valor da base de cálculo do ISSQN",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_ISSQN = fields.Float(
        string="Alíquota do ISSQN",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_ISSQN = fields.Monetary(
        string="Valor do ISSQN", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_BC_ICMS = fields.Monetary(
        string="Base de cálculo do ICMS acumulada relativa",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Base de cálculo do ICMS acumulada relativa à alíquota informada"),
    )

    VL_ICMS = fields.Monetary(
        string="Valor do ICMS acumulado relativo",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor do ICMS acumulado relativo à alíquota informada",
    )

    COD_OBS = fields.Char(
        string="Código da observação do lançamento fiscal",
        sped_length=6,
        help=(
            "Código da observação do lançamento fiscal (campo 02 do Registro " "0460)"
        ),
    )

    reg_D390_ids_RegistroD355_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d355",
        string="Redução Z",
        required=True,
        ondelete="cascade",
        help="Redução Z (Códigos 2E, 13, 14, 15 e 16)",
    )


class RegistroD400(models.Model):
    "Resumo do Movimento Diário (código 18)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d400"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_PART = fields.Char(
        string="Código do participante",
        sped_length=60,
        help=(
            "Código do participante (campo 02 do Registro 0150): - agência, "
            "filial ou posto"
        ),
    )

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    COD_SIT = fields.Integer(
        string="Código da situação do documento fiscal",
        help=("Código da situação do documento fiscal, conforme a Tabela 4.1.2"),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    SUB = fields.Integer(string="Subsérie do documento fiscal", sped_length=3)

    NUM_DOC = fields.Integer(string="Número do documento fiscal resumo", sped_length=6)

    DT_DOC = fields.Date(string="Data da emissão do documento fiscal")

    VL_DOC = fields.Monetary(
        string="Valor total do documento fiscal",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESC = fields.Monetary(
        string="Valor acumulado dos descontos",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SERV = fields.Monetary(
        string="Valor acumulado da prestação de serviço",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor total da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS = fields.Monetary(
        string="Valor total do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_CTA = fields.Char(
        string="Código", help="Código da conta analítica contábil debitada/creditada"
    )

    reg_D410_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d410",
        "reg_D410_ids_RegistroD400_id",
        string="D410 Documentos Informados",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help="D410 Documentos Informados (Códigos 13, 14, 15 e 16)",
    )

    reg_D420_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d420",
        "reg_D420_ids_RegistroD400_id",
        string="D420 Complemento dos Documentos Informados",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "D420 Complemento dos Documentos Informados (Códigos 13, 14, 15 e " "16)"
        ),
    )


class RegistroD410(models.Model):
    "Documentos Informados (Códigos 13, 14, 15 e 16)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d410"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal ",
        help=("Código do modelo do documento fiscal , conforme a Tabela 4.1.1"),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    SUB = fields.Integer(string="Subsérie do documento fiscal", sped_length=3)

    NUM_DOC_INI = fields.Integer(
        string="Número do documento fiscal inicial",
        sped_length=6,
        help=("Número do documento fiscal inicial (mesmo modelo, série e " "subsérie)"),
    )

    NUM_DOC_FIN = fields.Integer(
        string="Número do documento fiscal final",
        help=("Número do documento fiscal final(mesmo modelo, série e subsérie)"),
    )

    DT_DOC = fields.Date(string="Data da emissão dos documentos fiscais")

    CST_ICMS = fields.Integer(
        string="Código da Situação Tributária",
        help=(
            "Código da Situação Tributária, conforme a Tabela indicada no item" " 4.3.1"
        ),
    )

    CFOP = fields.Integer(string="Código Fiscal de Operação e Prestação")

    ALIQ_ICMS = fields.Float(
        string="Alíquota do ICMS",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_OPR = fields.Monetary(
        string="Valor total acumulado",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total acumulado das operações correspondentes à combinação "
            "de CST_ICMS, CFOP e alíquota do ICMS, incluídas as despesas "
            "acessórias e acréscimos."
        ),
    )

    VL_DESC = fields.Monetary(
        string="Valor acumulado dos descontos",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SERV = fields.Monetary(
        string="Valor acumulado da prestação de serviço",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor acumulado da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS = fields.Monetary(
        string="Valor acumulado do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_D410_ids_RegistroD400_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d400",
        string="Resumo do Movimento Diário",
        required=True,
        ondelete="cascade",
        help="Resumo do Movimento Diário (código 18)",
    )

    reg_D411_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d411",
        "reg_D411_ids_RegistroD410_id",
        string="D411 Documentos Cancelados",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "D411 Documentos Cancelados dos Documentos Informados (Códigos 13,"
            " 14, 15 e 16)"
        ),
    )


class RegistroD411(models.Model):
    """Documentos Cancelados dos Documentos Informados (Códigos 13, 14, 15 e
    16)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d411"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_DOC_CANC = fields.Integer(string="Número do documento fiscal cancelado")

    reg_D411_ids_RegistroD410_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d410",
        string="Documentos Informados",
        required=True,
        ondelete="cascade",
        help="Documentos Informados (Códigos 13, 14, 15 e 16)",
    )


class RegistroD420(models.Model):
    "Complemento dos Documentos Informados (Códigos 13, 14, 15 e 16)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d420"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_MUN_ORIG = fields.Integer(
        string="Código do município de origem do serviço",
        help=("Código do município de origem do serviço, conforme a tabela IBGE"),
    )

    VL_SERV = fields.Monetary(
        string="Valor total da prestação de serviço",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor total da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_D420_ids_RegistroD400_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d400",
        string="Resumo do Movimento Diário",
        required=True,
        ondelete="cascade",
        help="Resumo do Movimento Diário (código 18)",
    )


class RegistroD500(models.Model):
    """Nota Fiscal de Serviço de Comunicação (código 21) e Serviço de
    Telecomuni- cação (código 22)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d500"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    IND_OPER = fields.Char(
        string="Indicador do tipo de operação",
        help="Indicador do tipo de operação: 0- Aquisição; 1- Prestação",
    )

    IND_EMIT = fields.Char(
        string="Indicador do emitente do documento fiscal",
        help=(
            "Indicador do emitente do documento fiscal: 0- Emissão própria; 1-"
            " Terceiros"
        ),
    )

    COD_PART = fields.Char(
        string="Código do participante",
        sped_length=60,
        help=(
            "Código do participante (campo 02 do Registro 0150): - do "
            "prestador do serviço, no caso de aquisição; - do tomador do "
            "serviço, no caso de prestação."
        ),
    )

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    COD_SIT = fields.Integer(
        string="Código da situação do documento fiscal",
        help=("Código da situação do documento fiscal, conforme a Tabela 4.1.2"),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    SUB = fields.Char(string="Subsérie do documento fiscal", sped_length=3)

    NUM_DOC = fields.Integer(string="Número do documento fiscal", sped_length=9)

    DT_DOC = fields.Date(string="Data da emissão do documento fiscal")

    DT_A_P = fields.Date(
        string="Data da entrada",
        help=("Data da entrada (aquisição) ou da saída (prestação do serviço)"),
    )

    VL_DOC = fields.Monetary(
        string="Valor total do documento fiscal",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESC = fields.Monetary(
        string="Valor total do desconto",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SERV = fields.Monetary(
        string="Valor da prestação de serviços",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SERV_NT = fields.Monetary(
        string="Valor total dos serviços não-tributados pelo ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_TERC = fields.Monetary(
        string="Valores cobrados em nome de terceiros",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DA = fields.Monetary(
        string="Valor de outras despesas indicadas",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor de outras despesas indicadas no documento fiscal",
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS = fields.Monetary(
        string="Valor do ICMS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_INF = fields.Char(
        string="Código da informação complementar",
        sped_length=6,
        help=("Código da informação complementar (campo 02 do Registro 0450)"),
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_CTA = fields.Char(
        string="Código", help="Código da conta analítica contábil debitada/creditada"
    )

    TP_ASSINANTE = fields.Integer(
        string="Código do Tipo de Assinante: 1",
        help=(
            "Código do Tipo de Assinante: 1 - Comercial/Industrial 2 - Poder "
            "Público 3 - Residencial/Pessoa física 4 - Público 5 - Semi-"
            "Público 6 - Outros"
        ),
    )

    reg_D510_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d510",
        "reg_D510_ids_RegistroD500_id",
        string="D510 Itens do Documento",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "D510 Itens do Documento - Nota Fiscal de Serviço de Comunicação "
            "(código 21) e Serviço de Telecomunicação (código 22)"
        ),
    )

    reg_D530_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d530",
        "reg_D530_ids_RegistroD500_id",
        string="D530 Terminal Faturado",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
    )

    reg_D590_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d590",
        "reg_D590_ids_RegistroD500_id",
        string="D590 Registro Analítico do Documento",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help="D590 Registro Analítico do Documento (códigos 21 e 22)",
    )


class RegistroD510(models.Model):
    """Itens do Documento - Nota Fiscal de Serviço de Comunicação (código 21) e
    Serviço de Telecomunicação (código 22)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d510"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    NUM_ITEM = fields.Integer(
        string="Número sequencial do item no documento fiscal", sped_length=3
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    COD_CLASS = fields.Integer(
        string="Código de classificação do item do serviço",
        help=(
            "Código de classificação do item do serviço de comunicação ou de "
            "telecomunicação, conforme a Tabela 4.4.1"
        ),
    )

    QTD = fields.Float(
        string="Quantidade do item",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    UNID = fields.Char(
        string="Unidade do item",
        sped_length=6,
        help="Unidade do item (Campo 02 do registro 0190)",
    )

    VL_ITEM = fields.Monetary(
        string="Valor do item", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_DESC = fields.Monetary(
        string="Valor total do desconto",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_ICMS = fields.Integer(
        string="Código da Situação Tributária",
        help=(
            "Código da Situação Tributária, conforme a Tabela indicada no item" " 4.3.1"
        ),
    )

    CFOP = fields.Integer(string="Código Fiscal de Operação e Prestação")

    VL_BC_ICMS = fields.Monetary(
        string="Valor da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_ICMS = fields.Float(
        string="Alíquota do ICMS",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_ICMS = fields.Monetary(
        string="Valor do ICMS creditado/debitado",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ICMS_UF = fields.Monetary(
        string="Valor da base de cálculo do ICMS de outras UFs",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS_UF = fields.Monetary(
        string="Valor do ICMS de outras UFs",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_REC = fields.Char(
        string="Indicador do tipo de receita",
        help=(
            "Indicador do tipo de receita: 0- Receita própria - serviços "
            "prestados; 1- Receita própria - cobrança de débitos; 2- Receita "
            "própria - venda de mercadorias; 3- Receita própria - venda de "
            "serviço pré-pago; 4- Outras receitas próprias; 5- Receitas de "
            "terceiros (co-faturamento); 9- Outras receitas de terceiros"
        ),
    )

    COD_PART = fields.Char(
        string="Código do participante",
        sped_length=60,
        help=(
            "Código do participante (campo 02 do Registro 0150) receptor da "
            "receita, terceiro da operação, se houver."
        ),
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_CTA = fields.Char(string="Código da conta analítica contábil")

    reg_D510_ids_RegistroD500_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d500",
        string="Nota Fiscal de Serviço de Comunicação",
        required=True,
        ondelete="cascade",
        help=(
            "Nota Fiscal de Serviço de Comunicação (código 21) e Serviço de "
            "Telecomuni- cação (código 22)"
        ),
    )


class RegistroD530(models.Model):
    "Terminal Faturado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d530"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    IND_SERV = fields.Char(
        string="Indicador do tipo de serviço prestado",
        help=(
            "Indicador do tipo de serviço prestado: 0 - Telefonia; 1 - "
            "Comunicação de dados; 2 - TV por assinatura; 3 - Provimento de "
            "acesso à Internet; 4 - Multimídia; 9 - Outros"
        ),
    )

    DT_INI_SERV = fields.Date(string="Data em que se iniciou a prestação do serviço")

    DT_FIN_SERV = fields.Date(string="Data em que se encerrou a prestação do serviço")

    PER_FISCAL = fields.Integer(
        string="Período fiscal da prestação do serviço",
        help="Período fiscal da prestação do serviço (MMAAAA)",
    )

    COD_AREA = fields.Char(string="Código de área do terminal faturado")

    TERMINAL = fields.Integer(string="Identificação do terminal faturado")

    reg_D530_ids_RegistroD500_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d500",
        string="Nota Fiscal de Serviço de Comunicação",
        required=True,
        ondelete="cascade",
        help=(
            "Nota Fiscal de Serviço de Comunicação (código 21) e Serviço de "
            "Telecomuni- cação (código 22)"
        ),
    )


class RegistroD590(models.Model):
    "Registro Analítico do Documento (códigos 21 e 22)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d590"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    CST_ICMS = fields.Integer(
        string="Código da Situação Tributária",
        help=(
            "Código da Situação Tributária, conforme a tabela indicada no item" " 4.3.1"
        ),
    )

    CFOP = fields.Integer(
        string="Código Fiscal de Operação e Prestação",
        help=(
            "Código Fiscal de Operação e Prestação, conforme a tabela indicada"
            " no item 4.2.2"
        ),
    )

    ALIQ_ICMS = fields.Float(
        string="Alíquota do ICMS",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_OPR = fields.Monetary(
        string="Valor da operação correspondente à combinação",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da operação correspondente à combinação de CST_ICMS, CFOP, "
            "e alíquota do ICMS, incluídas as despesas acessórias e acréscimos"
        ),
    )

    VL_BC_ICMS = fields.Monetary(
        string="Parcela correspondente ao 'Valor da base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao 'Valor da base de cálculo do ICMS' "
            "referente à combinação CST_ICMS, CFOP, e alíquota do ICMS"
        ),
    )

    VL_ICMS = fields.Monetary(
        string="Parcela correspondente ao 'Valor",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao 'Valor do ICMS' referente à combinação "
            "CST_ICMS, CFOP, e alíquota do ICMS"
        ),
    )

    VL_BC_ICMS_UF = fields.Monetary(
        string="Parcela correspondente ao valor da base de cálculo",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao valor da base de cálculo do ICMS de "
            "outras UFs, referente à combinação de CST_ICMS, CFOP e alíquota "
            "do ICMS."
        ),
    )

    VL_ICMS_UF = fields.Monetary(
        string="Parcela correspondente ao valor do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao valor do ICMS de outras UFs, referente "
            "à combinação de CST_ICMS, CFOP, e alíquota do ICMS."
        ),
    )

    VL_RED_BC = fields.Monetary(
        string="Valor não tributado em função da redução da base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor não tributado em função da redução da base de cálculo do "
            "ICMS, referente à combinação de CST_ICMS, CFOP e alíquota do "
            "ICMS."
        ),
    )

    COD_OBS = fields.Char(
        string="Código da observação",
        sped_length=6,
        help="Código da observação (campo 02 do Registro 0460)",
    )

    reg_D590_ids_RegistroD500_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d500",
        string="Nota Fiscal de Serviço de Comunicação",
        required=True,
        ondelete="cascade",
        help=(
            "Nota Fiscal de Serviço de Comunicação (código 21) e Serviço de "
            "Telecomuni- cação (código 22)"
        ),
    )


class RegistroD600(models.Model):
    """Consolidação da Prestação de Serviços - Notas de Serviço de Comunicação
    (código 21) e de Serviço de Telecomunicação (código 22)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d600"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    COD_MUN = fields.Integer(
        string="Código do município dos terminais faturados",
        help=("Código do município dos terminais faturados, conforme a tabela " "IBGE"),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    SUB = fields.Integer(string="Subsérie do documento fiscal", sped_length=3)

    COD_CONS = fields.Integer(
        string="Código de classe de consumo dos serviços",
        help=(
            "Código de classe de consumo dos serviços de comunicação ou de "
            "telecomunicação, conforme a Tabela 4.4.4"
        ),
    )

    QTD_CONS = fields.Integer(
        string="Quantidade", help="Quantidade de documentos consolidados neste registro"
    )

    DT_DOC = fields.Date(string="Data dos documentos consolidados")

    VL_DOC = fields.Monetary(
        string="Valor total acumulado dos documentos fiscais",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESC = fields.Monetary(
        string="Valor acumulado dos descontos",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SERV = fields.Monetary(
        string="Valor acumulado das prestações",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor acumulado das prestações de serviços tributados pelo ICMS"),
    )

    VL_SERV_NT = fields.Monetary(
        string="Valor acumulado dos serviços não-tributados",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor acumulado dos serviços não-tributados pelo ICMS",
    )

    VL_TERC = fields.Monetary(
        string="Valores cobrados em nome de terceiros",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DA = fields.Monetary(
        string="Valor acumulado das despesas acessórias",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor acumulado da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS = fields.Monetary(
        string="Valor acumulado do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    reg_D610_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d610",
        "reg_D610_ids_RegistroD600_id",
        string="D610 Itens do Documento Consolidado",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help="D610 Itens do Documento Consolidado (códigos 21 e 22)",
    )

    reg_D690_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d690",
        "reg_D690_ids_RegistroD600_id",
        string="D690 Registro Analítico dos Documentos",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help="D690 Registro Analítico dos Documentos (códigos 21 e 22)",
    )


class RegistroD610(models.Model):
    "Itens do Documento Consolidado (códigos 21 e 22)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d610"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_CLASS = fields.Integer(
        string="Código de classificação do item do serviço",
        help=(
            "Código de classificação do item do serviço de comunicação ou de "
            "telecomunicação, conforme a Tabela 4.4.1"
        ),
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    QTD = fields.Float(
        string="Quantidade acumulada do item",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    UNID = fields.Char(
        string="Unidade do item",
        sped_length=6,
        help="Unidade do item (Campo 02 do registro 0190)",
    )

    VL_ITEM = fields.Monetary(
        string="Valor acumulado do item",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESC = fields.Monetary(
        string="Valor acumulado dos descontos",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_ICMS = fields.Integer(
        string="Código da Situação Tributária",
        help=(
            "Código da Situação Tributária, conforme a Tabela indicada no item" " 4.3.1"
        ),
    )

    CFOP = fields.Integer(
        string="Código Fiscal de Operação",
        help=(
            "Código Fiscal de Operação e Prestação conforme tabela indicada no"
            " item 4.2.2."
        ),
    )

    ALIQ_ICMS = fields.Float(
        string="Alíquota do ICMS",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor acumulado da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS = fields.Monetary(
        string="Valor acumulado do ICMS debitado",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ICMS_UF = fields.Monetary(
        string="Valor da base de cálculo do ICMS de outras UFs",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS_UF = fields.Monetary(
        string="Valor do ICMS de outras UFs",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_RED_BC = fields.Monetary(
        string="Valor não tributado em função da redução da base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor não tributado em função da redução da base de cálculo do "
            "ICMS, referente à combinação de CST_ICMS, CFOP e alíquota do "
            "ICMS."
        ),
    )

    VL_PIS = fields.Monetary(
        string="Valor acumulado do PIS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_COFINS = fields.Monetary(
        string="Valor acumulado da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_CTA = fields.Char(
        string="Código", help="Código da conta analítica contábil debitada/creditada"
    )

    reg_D610_ids_RegistroD600_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d600",
        string="Consolidação da Prestação de Serviços",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação da Prestação de Serviços - Notas de Serviço de "
            "Comunicação (código 21) e de Serviço de Telecomunicação (código "
            "22)"
        ),
    )


class RegistroD690(models.Model):
    "Registro Analítico dos Documentos (códigos 21 e 22)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d690"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    CST_ICMS = fields.Integer(
        string="Código da Situação Tributária",
        help=(
            "Código da Situação Tributária, conforme a tabela indicada no item" " 4.3.1"
        ),
    )

    CFOP = fields.Integer(
        string="Código Fiscal de Operação e Prestação",
        help=(
            "Código Fiscal de Operação e Prestação, conforme a tabela indicada"
            " no item 4.2.2"
        ),
    )

    ALIQ_ICMS = fields.Float(
        string="Alíquota do ICMS",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_OPR = fields.Monetary(
        string="Valor da operação correspondente à combinação",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da operação correspondente à combinação de CST_ICMS, CFOP, "
            "e alíquota do ICMS, incluídas as despesas acessórias e acréscimos"
        ),
    )

    VL_BC_ICMS = fields.Monetary(
        string="Parcela correspondente ao “Valor da base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao “Valor da base de cálculo do ICMS” "
            "referente à combinação CST_ICMS, CFOP, e alíquota do ICMS"
        ),
    )

    VL_ICMS = fields.Monetary(
        string="Parcela correspondente ao 'Valor",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao 'Valor do ICMS' referente à combinação "
            "CST_ICMS, CFOP, e alíquota do ICMS"
        ),
    )

    VL_BC_ICMS_UF = fields.Monetary(
        string="Parcela correspondente ao valor da base de cálculo",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao valor da base de cálculo do ICMS de "
            "outras UFs, referente à"
        ),
    )

    VL_ICMS_UF = fields.Monetary(
        string="Parcela correspondente ao valor do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao valor do ICMS de outras UFs, referente "
            "à combinação de CST ICMS, CFOP, e alíquota do ICMS."
        ),
    )

    VL_RED_BC = fields.Monetary(
        string="Valor não tributado em função da redução da base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor não tributado em função da redução da base de cálculo do "
            "ICMS, referente à combinação de CST_ICMS, CFOP e alíquota do "
            "ICMS."
        ),
    )

    reg_D690_ids_RegistroD600_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d600",
        string="Consolidação da Prestação de Serviços",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação da Prestação de Serviços - Notas de Serviço de "
            "Comunicação (código 21) e de Serviço de Telecomunicação (código "
            "22)"
        ),
    )


class RegistroD695(models.Model):
    """Consolidação da Prestação de Serviços - Notas de Serviço de Comunicação
    (código 21) e de Serviço de Telecomunicação (código 22)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d695"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1."),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    NRO_ORD_INI = fields.Integer(string="Número de ordem inicial", sped_length=9)

    NRO_ORD_FIN = fields.Integer(string="Número de ordem final", sped_length=9)

    DT_DOC_INI = fields.Date(
        string="Data de emissão inicial",
        help=(
            "Data de emissão inicial dos documentos / Data inicial de "
            "vencimento da fatura"
        ),
    )

    DT_DOC_FIN = fields.Date(
        string="Data de emissão final dos documentos / Data final",
        help=(
            "Data de emissão final dos documentos / Data final do vencimento "
            "da fatura"
        ),
    )

    NOM_MEST = fields.Char(
        string="Nome do arquivo Mestre de Documento Fiscal", sped_length=33
    )

    CHV_COD_DIG = fields.Char(
        string="Chave de codificação digital do arquivo Mestre",
        sped_length=32,
        help=("Chave de codificação digital do arquivo Mestre de Documento " "Fiscal"),
    )

    reg_D696_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d696",
        "reg_D696_ids_RegistroD695_id",
        string="D696 Registro Analítico dos Documentos",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help="D696 Registro Analítico dos Documentos (códigos 21 e 22)",
    )


class RegistroD696(models.Model):
    "Registro Analítico dos Documentos (códigos 21 e 22)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d696"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    CST_ICMS = fields.Integer(
        string="Código da Situação Tributária",
        help=(
            "Código da Situação Tributária, conforme a tabela indicada no item" " 4.3.1"
        ),
    )

    CFOP = fields.Integer(
        string="Código Fiscal de Operação e Prestação",
        help=(
            "Código Fiscal de Operação e Prestação, conforme a tabela indicada"
            " no item 4.2.2"
        ),
    )

    ALIQ_ICMS = fields.Float(
        string="Alíquota do ICMS",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_OPR = fields.Monetary(
        string="Valor da operação correspondente à combinação",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da operação correspondente à combinação de CST_ICMS, CFOP, "
            "e alíquota do ICMS, incluídas as despesas acessórias e acréscimos"
        ),
    )

    VL_BC_ICMS = fields.Monetary(
        string="Parcela correspondente ao 'Valor da base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao 'Valor da base de cálculo do ICMS' "
            "referente à combinação CST_ICMS, CFOP, e alíquota do ICMS"
        ),
    )

    VL_ICMS = fields.Monetary(
        string="Parcela correspondente ao 'Valor",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao 'Valor do ICMS' referente à combinação "
            "CST_ICMS, CFOP, e alíquota do ICMS"
        ),
    )

    VL_BC_ICMS_UF = fields.Monetary(
        string="Parcela correspondente ao valor da base de cálculo",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao valor da base de cálculo do ICMS de "
            "outras UFs, referente à combinação de CST_ICMS, CFOP e alíquota "
            "do ICMS"
        ),
    )

    VL_ICMS_UF = fields.Monetary(
        string="Parcela correspondente ao valor do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao valor do ICMS de outras UFs, referente "
            "à combinação de CST_ICMS, CFOP, e alíquota do ICMS"
        ),
    )

    VL_RED_BC = fields.Monetary(
        string="Valor não tributado em função da redução da base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor não tributado em função da redução da base de cálculo do "
            "ICMS, referente à combinação de CST_ICMS, CFOP e alíquota do "
            "ICMS."
        ),
    )

    COD_OBS = fields.Char(
        string="Código da observação do lançamento fiscal",
        sped_length=6,
        help=(
            "Código da observação do lançamento fiscal (campo 02 do Registro " "0460)"
        ),
    )

    reg_D696_ids_RegistroD695_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d695",
        string="Consolidação da Prestação de Serviços",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação da Prestação de Serviços - Notas de Serviço de "
            "Comunicação (código 21) e de Serviço de Telecomunicação (código "
            "22)"
        ),
    )

    reg_D697_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.d697",
        "reg_D697_ids_RegistroD696_id",
        string="D697 Registro de informações de outras UFs",
        sped_card="1:N",
        sped_required="UNDEF_REQUIRED",
        help=(
            "D697 Registro de informações de outras UFs, relativamente aos "
            "serviços “não-medi- dos” de televisão por assinatura via satélite"
        ),
    )


class RegistroD697(models.Model):
    """Registro de informações de outras UFs, relativamente aos serviços “não-
    medi- dos” de televisão por assinatura via satélite"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.d697"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    UF = fields.Char(string="Sigla da unidade da federação")

    VL_BC_ICMS = fields.Monetary(
        string="Valor da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS = fields.Monetary(
        string="Valor do ICMS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    reg_D697_ids_RegistroD696_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.d696",
        string="Registro Analítico dos Documentos",
        required=True,
        ondelete="cascade",
        help="Registro Analítico dos Documentos (códigos 21 e 22)",
    )


class RegistroE100(models.Model):
    "Período de Apuração do ICMS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.e100"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    DT_INI = fields.Date(
        string="Data inicial a que a apuração se refere", required=True
    )

    DT_FIN = fields.Date(string="Data final a que a apuração se refere", required=True)

    reg_E110_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.e110",
        "reg_E110_ids_RegistroE100_id",
        string="E110 Apuração do ICMS",
        sped_card="1:1",
        sped_required="O",
        help="E110 Apuração do ICMS - Operações Próprias",
    )


class RegistroE110(models.Model):
    "Apuração do ICMS - Operações Próprias"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.e110"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    VL_TOT_DEBITOS = fields.Monetary(
        string="Valor total dos débitos por 'Saídas e prestações",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total dos débitos por 'Saídas e prestações com débito do " "imposto'"
        ),
    )

    VL_AJ_DEBITOS = fields.Monetary(
        string="Valor total dos ajustes a débito decorrentes",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor total dos ajustes a débito decorrentes do documento fiscal."),
    )

    VL_TOT_AJ_DEBITOS = fields.Monetary(
        string="Valor total de 'Ajustes a débito'",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ESTORNOS_CRED = fields.Monetary(
        string="Valor total de Ajustes “Estornos de créditos”",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_TOT_CREDITOS = fields.Monetary(
        string="Valor total dos créditos por 'Entradas",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor total dos créditos por 'Entradas e aquisições com",
    )

    VL_AJ_CREDITOS = fields.Monetary(
        string="Valor total dos ajustes a crédito decorrentes",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor total dos ajustes a crédito decorrentes do documento " "fiscal."),
    )

    VL_TOT_AJ_CREDITOS = fields.Monetary(
        string="Valor total de 'Ajustes a crédito'",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ESTORNOS_DEB = fields.Monetary(
        string="Valor total de Ajustes “Estornos de Débitos”",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SLD_CREDOR_ANT = fields.Monetary(
        string="Valor total de 'Saldo credor do período anterior'",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SLD_APURADO = fields.Monetary(
        string="Valor do saldo devedor apurado",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_TOT_DED = fields.Monetary(
        string="Valor total de 'Deduções'",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS_RECOLHER = fields.Monetary(
        string="Valor total de 'ICMS a recolher",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor total de 'ICMS a recolher (11-12)",
    )

    VL_SLD_CREDOR_TRANSPORTAR = fields.Monetary(
        string="Valor total de 'Saldo credor a transportar",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor total de 'Saldo credor a transportar para o período " "seguinte”"),
    )

    DEB_ESP = fields.Float(
        string="Valores recolhidos ou a recolher",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Valores recolhidos ou a recolher, extra-apuração.",
    )

    reg_E110_ids_RegistroE100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.e100",
        string="Período de Apuração do ICMS",
        required=True,
        ondelete="cascade",
    )

    reg_E111_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.e111",
        "reg_E111_ids_RegistroE110_id",
        string="E111 Ajuste/Benefício/Incentivo da Apuração",
        sped_card="1:N",
        sped_required="O",
        help="E111 Ajuste/Benefício/Incentivo da Apuração do ICMS",
    )

    reg_E115_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.e115",
        "reg_E115_ids_RegistroE110_id",
        string="E115 Informações Adicionais da Apuração do ICMS",
        sped_card="1:N",
        sped_required="O",
        help=(
            "E115 Informações Adicionais da Apuração do ICMS - Valores " "Declaratórios"
        ),
    )

    reg_E116_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.e116",
        "reg_E116_ids_RegistroE110_id",
        string="E116 Obrigações do ICMS Recolhido ou a Recolher",
        sped_card="1:N",
        sped_required="O",
        help=(
            "E116 Obrigações do ICMS Recolhido ou a Recolher - Obrigações " "Próprias"
        ),
    )


class RegistroE111(models.Model):
    "Ajuste/Benefício/Incentivo da Apuração do ICMS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.e111"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_AJ_APUR = fields.Char(
        string="Código do ajuste da apuração e dedução",
        required=True,
        help=(
            "Código do ajuste da apuração e dedução, conforme a Tabela "
            "indicada no item 5.1.1."
        ),
    )

    DESCR_COMPL_AJ = fields.Char(string="Descrição complementar do ajuste da apuração")

    VL_AJ_APUR = fields.Monetary(
        string="Valor do ajuste da apuração",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_E111_ids_RegistroE110_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.e110",
        string="Apuração do ICMS",
        required=True,
        ondelete="cascade",
        help="Apuração do ICMS - Operações Próprias",
    )

    reg_E112_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.e112",
        "reg_E112_ids_RegistroE111_id",
        string="E112 Informações Adicionais dos Ajustes",
        sped_card="1:N",
        sped_required="O",
        help="E112 Informações Adicionais dos Ajustes da Apuração do ICMS",
    )

    reg_E113_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.e113",
        "reg_E113_ids_RegistroE111_id",
        string="E113 Informações Adicionais dos Ajustes",
        sped_card="1:N",
        sped_required="O",
        help=(
            "E113 Informações Adicionais dos Ajustes da Apuração do ICMS - "
            "Identificação dos documentos fiscais"
        ),
    )


class RegistroE112(models.Model):
    "Informações Adicionais dos Ajustes da Apuração do ICMS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.e112"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 5

    NUM_DA = fields.Char(
        string="Número do documento de arrecadação estadual",
        help="Número do documento de arrecadação estadual, se houver",
    )

    NUM_PROC = fields.Char(
        string="Número do processo ao qual o ajuste está vinculado",
        sped_length=15,
        help=("Número do processo ao qual o ajuste está vinculado, se houver"),
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo",
        help=(
            "Indicador da origem do processo: 0- Sefaz; 1- Justiça Federal; 2-"
            " Justiça Estadual; 9- Outros"
        ),
    )

    PROC = fields.Char(
        string="Descrição resumida do processo que embasou",
        help="Descrição resumida do processo que embasou o lançamento",
    )

    TXT_COMPL = fields.Char(string="Descrição complementar")

    reg_E112_ids_RegistroE111_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.e111",
        string="Ajuste/Benefício/Incentivo da Apuração do ICMS",
        required=True,
        ondelete="cascade",
    )


class RegistroE113(models.Model):
    """Informações Adicionais dos Ajustes da Apuração do ICMS - Identificação
    dos documentos fiscais"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.e113"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 5

    COD_PART = fields.Char(
        string="Código do participante",
        sped_length=60,
        help=(
            "Código do participante (campo 02 do Registro 0150): - do emitente"
            " do documento ou do remetente das mercadorias, no caso de "
            "entradas; - do adquirente, no caso de saídas"
        ),
    )

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        required=True,
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    SUB = fields.Integer(string="Subsérie do documento fiscal", sped_length=3)

    NUM_DOC = fields.Integer(
        string="Número do documento fiscal", required=True, sped_length=9
    )

    DT_DOC = fields.Date(string="Data da emissão do documento fiscal", required=True)

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    VL_AJ_ITEM = fields.Monetary(
        string="Valor do ajuste para a operação/item",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_E113_ids_RegistroE111_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.e111",
        string="Ajuste/Benefício/Incentivo da Apuração do ICMS",
        required=True,
        ondelete="cascade",
    )


class RegistroE115(models.Model):
    "Informações Adicionais da Apuração do ICMS - Valores Declaratórios"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.e115"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_INF_ADIC = fields.Char(
        string="Código da informação adicional conforme tabela",
        required=True,
        help=(
            "Código da informação adicional conforme tabela a ser definida "
            "pelas SEFAZ, conforme tabela definida no item 5.2."
        ),
    )

    VL_INF_ADIC = fields.Monetary(
        string="Valor referente à informação adicional",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    DESCR_COMPL_AJ = fields.Char(string="Descrição complementar do ajuste")

    reg_E115_ids_RegistroE110_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.e110",
        string="Apuração do ICMS",
        required=True,
        ondelete="cascade",
        help="Apuração do ICMS - Operações Próprias",
    )


class RegistroE116(models.Model):
    "Obrigações do ICMS Recolhido ou a Recolher - Obrigações Próprias"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.e116"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_OR = fields.Char(
        string="Código da obrigação a recolher",
        required=True,
        help="Código da obrigação a recolher, conforme a Tabela 5.4",
    )

    VL_OR = fields.Monetary(
        string="Valor da obrigação a recolher",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    DT_VCTO = fields.Date(string="Data de vencimento da obrigação", required=True)

    COD_REC = fields.Char(
        string="Código de receita referente à obrigação",
        required=True,
        help=(
            "Código de receita referente à obrigação, próprio da unidade da "
            "federação, conforme legislação estadual."
        ),
    )

    NUM_PROC = fields.Char(
        string="Número do processo ou auto de infração",
        sped_length=15,
        help=(
            "Número do processo ou auto de infração ao qual a obrigação está "
            "vinculada, se houver."
        ),
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo",
        help=(
            "Indicador da origem do processo: 0- SEFAZ; 1- Justiça Federal; 2-"
            " Justiça Estadual; 9- Outros"
        ),
    )

    PROC = fields.Char(
        string="Descrição resumida do processo que embasou",
        help="Descrição resumida do processo que embasou o lançamento",
    )

    TXT_COMPL = fields.Char(string="Descrição complementar das obrigações a recolher")

    MES_REF = fields.Integer(
        string="Informe o mês de referência no formato “mmaaaa”", required=True
    )

    reg_E116_ids_RegistroE110_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.e110",
        string="Apuração do ICMS",
        required=True,
        ondelete="cascade",
        help="Apuração do ICMS - Operações Próprias",
    )


class RegistroE200(models.Model):
    "Período de Apuração do ICMS - Substituição Tributária"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.e200"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    UF = fields.Char(
        string="Sigla da unidade da federação a que se refere",
        required=True,
        help=("Sigla da unidade da federação a que se refere a apuração do ICMS " "ST"),
    )

    DT_INI = fields.Date(
        string="Data inicial a que a apuração se refere", required=True
    )

    DT_FIN = fields.Date(string="Data final a que a apuração se refere", required=True)

    reg_E210_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.e210",
        "reg_E210_ids_RegistroE200_id",
        string="E210 Apuração do ICMS",
        sped_card="1:1",
        sped_required="O",
        help="E210 Apuração do ICMS - Substituição Tributária",
    )


class RegistroE210(models.Model):
    "Apuração do ICMS - Substituição Tributária"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.e210"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    IND_MOV_ST = fields.Char(
        string="Indicador de movimento",
        required=True,
        sped_length=1,
        help=(
            "Indicador de movimento: 0 – Sem operações com ST 1 – Com "
            "operações de ST"
        ),
    )

    VL_SLD_CRED_ANT_ST = fields.Monetary(
        string="Valor do 'Saldo credor",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do 'Saldo credor de período anterior – Substituição " "Tributária'"
        ),
    )

    VL_DEVOL_ST = fields.Monetary(
        string="Valor total do ICMS ST de devolução de mercadorias",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_RESSARC_ST = fields.Monetary(
        string="Valor total do ICMS ST de ressarcimentos",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_OUT_CRED_ST = fields.Monetary(
        string="Valor total de Ajustes 'Outros créditos ST'",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total de Ajustes 'Outros créditos ST' e “Estorno de débitos" " ST”"
        ),
    )

    VL_AJ_CREDITOS_ST = fields.Monetary(
        string="Valor total dos ajustes a crédito de ICMS ST",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total dos ajustes a crédito de ICMS ST, provenientes de "
            "ajustes do documento fiscal."
        ),
    )

    VL_RETENÇAO_ST = fields.Monetary(
        string="Valor Total do ICMS retido",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor Total do ICMS retido por Substituição Tributária",
    )

    VL_OUT_DEB_ST = fields.Monetary(
        string="Valor Total dos ajustes 'Outros débitos ST' '",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor Total dos ajustes 'Outros débitos ST' ' e “Estorno de "
            "créditos ST”"
        ),
    )

    VL_AJ_DEBITOS_ST = fields.Monetary(
        string="Valor total dos ajustes a débito de ICMS ST",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total dos ajustes a débito de ICMS ST, provenientes de "
            "ajustes do documento fiscal."
        ),
    )

    VL_SLD_DEV_ANT_ST = fields.Monetary(
        string="Valor total de Saldo devedor antes das deduções",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DEDUÇÕES_ST = fields.Monetary(
        string="Valor total dos ajustes 'Deduções ST'",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS_RECOL_ST = fields.Monetary(
        string="Imposto a recolher ST (11-12)",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SLD_CRED_ST_TRANSPORTAR = fields.Monetary(
        string="Saldo credor de ST a transportar",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Saldo credor de ST a transportar para o período seguinte "
            "[(03+04+05+06+07+12) – (08+09+10)]."
        ),
    )

    DEB_ESP_ST = fields.Float(
        string="Valores recolhidos ou a recolher",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Valores recolhidos ou a recolher, extra-apuração.",
    )

    reg_E210_ids_RegistroE200_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.e200",
        string="Período de Apuração do ICMS",
        required=True,
        ondelete="cascade",
        help="Período de Apuração do ICMS - Substituição Tributária",
    )

    reg_E220_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.e220",
        "reg_E220_ids_RegistroE210_id",
        string="E220 Ajuste/Benefício/Incentivo da Apuração",
        sped_card="1:N",
        sped_required="O",
        help=(
            "E220 Ajuste/Benefício/Incentivo da Apuração do ICMS - "
            "Substituição Tributária"
        ),
    )

    reg_E250_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.e250",
        "reg_E250_ids_RegistroE210_id",
        string="E250 Obrigações do ICMS a Recolher",
        sped_card="1:N",
        sped_required="O",
        help="E250 Obrigações do ICMS a Recolher - Substituição Tributária",
    )


class RegistroE220(models.Model):
    """Ajuste/Benefício/Incentivo da Apuração do ICMS - Substituição
    Tributária"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.e220"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_AJ_APUR = fields.Char(
        string="Código do ajuste da apuração e dedução",
        required=True,
        help=(
            "Código do ajuste da apuração e dedução, conforme a Tabela "
            "indicada no item 5.1.1"
        ),
    )

    DESCR_COMPL_AJ = fields.Char(string="Descrição complementar do ajuste da apuração")

    VL_AJ_APUR = fields.Monetary(
        string="Valor do ajuste da apuração",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_E220_ids_RegistroE210_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.e210",
        string="Apuração do ICMS",
        required=True,
        ondelete="cascade",
        help="Apuração do ICMS - Substituição Tributária",
    )

    reg_E230_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.e230",
        "reg_E230_ids_RegistroE220_id",
        string="E230 Informações Adicionais dos Ajustes",
        sped_card="1:N",
        sped_required="O",
        help=(
            "E230 Informações Adicionais dos Ajustes da Apuração do ICMS "
            "Substituição Tributá- ria"
        ),
    )

    reg_E240_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.e240",
        "reg_E240_ids_RegistroE220_id",
        string="E240 Informações Adicionais dos Ajustes",
        sped_card="1:N",
        sped_required="O",
        help=(
            "E240 Informações Adicionais dos Ajustes da Apuração do ICMS "
            "Substituição Tributá- ria - Identificação dos documentos fiscais"
        ),
    )


class RegistroE230(models.Model):
    """Informações Adicionais dos Ajustes da Apuração do ICMS Substituição
    Tributá- ria"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.e230"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 5

    NUM_DA = fields.Char(
        string="Número do documento de arrecadação estadual",
        help="Número do documento de arrecadação estadual, se houver",
    )

    NUM_PROC = fields.Char(
        string="Número do processo ao qual o ajuste está vinculado",
        sped_length=15,
        help=("Número do processo ao qual o ajuste está vinculado, se houver"),
    )

    IND_PROC = fields.Integer(
        string="Indicador da origem do processo: 0",
        help=(
            "Indicador da origem do processo: 0 - Sefaz; 1 - Justiça Federal; "
            "2 - Justiça Estadual; 9 - Outros"
        ),
    )

    PROC = fields.Char(
        string="Descrição resumida do processo que embasou",
        help="Descrição resumida do processo que embasou o lançamento",
    )

    TXT_COMPL = fields.Char(string="Descrição complementar")

    reg_E230_ids_RegistroE220_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.e220",
        string="Ajuste/Benefício/Incentivo da Apuração do ICMS",
        required=True,
        ondelete="cascade",
        help=(
            "Ajuste/Benefício/Incentivo da Apuração do ICMS - Substituição "
            "Tributária"
        ),
    )


class RegistroE240(models.Model):
    """Informações Adicionais dos Ajustes da Apuração do ICMS Substituição
    Tributá- ria - Identificação dos documentos fiscais"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.e240"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 5

    COD_PART = fields.Char(
        string="Código do participante",
        required=True,
        sped_length=60,
        help=(
            "Código do participante (campo 02 do Registro 0150): - do emitente"
            " do documento ou do remetente das mercadorias, no caso de "
            "entradas; - do adquirente, no caso de saídas"
        ),
    )

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        required=True,
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    SUB = fields.Integer(string="Subsérie do documento fiscal", sped_length=3)

    NUM_DOC = fields.Integer(
        string="Número do documento fiscal", required=True, sped_length=9
    )

    DT_DOC = fields.Date(string="Data da emissão do documento fiscal", required=True)

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    VL_AJ_ITEM = fields.Monetary(
        string="Valor do ajuste para a operação/item",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CHV_DOCe = fields.Integer(string="Chave do Documento Eletrônico")

    reg_E240_ids_RegistroE220_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.e220",
        string="Ajuste/Benefício/Incentivo da Apuração do ICMS",
        required=True,
        ondelete="cascade",
        help=(
            "Ajuste/Benefício/Incentivo da Apuração do ICMS - Substituição "
            "Tributária"
        ),
    )


class RegistroE250(models.Model):
    "Obrigações do ICMS a Recolher - Substituição Tributária"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.e250"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_OR = fields.Char(
        string="Código da obrigação a recolher",
        required=True,
        help="Código da obrigação a recolher, conforme a Tabela 5.4",
    )

    VL_OR = fields.Monetary(
        string="Valor da obrigação ICMS ST a recolher",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    DT_VCTO = fields.Date(string="Data de vencimento da obrigação", required=True)

    COD_REC = fields.Char(
        string="Código de receita referente à obrigação",
        required=True,
        help=(
            "Código de receita referente à obrigação, próprio da unidade da "
            "federação do contribuinte substituído."
        ),
    )

    NUM_PROC = fields.Char(
        string="Número do processo ou auto de infração",
        sped_length=15,
        help=(
            "Número do processo ou auto de infração ao qual a obrigação está "
            "vinculada, se houver"
        ),
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo",
        help=(
            "Indicador da origem do processo: 0- SEFAZ; 1- Justiça Federal; 2-"
            " Justiça Estadual; 9- Outros"
        ),
    )

    PROC = fields.Char(
        string="Descrição resumida do processo que embasou",
        help="Descrição resumida do processo que embasou o lançamento",
    )

    TXT_COMPL = fields.Char(string="Descrição complementar das obrigações a recolher")

    MES_REF = fields.Integer(
        string="Informe o mês de referência no formato “mmaaaa”", required=True
    )

    reg_E250_ids_RegistroE210_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.e210",
        string="Apuração do ICMS",
        required=True,
        ondelete="cascade",
        help="Apuração do ICMS - Substituição Tributária",
    )


class RegistroE300(models.Model):
    """Período de Apuração do ICMS Diferencial de Alíquota – UF Origem/Destino
    EC 87/15"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.e300"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    UF = fields.Char(
        string="Sigla da unidade da federação a que se refere",
        required=True,
        sped_length=2,
        help=(
            "Sigla da unidade da federação a que se refere à apuração do FCP e"
            " do ICMS Diferencial de Alíquota da UF de Origem/Destino"
        ),
    )

    DT_INI = fields.Date(
        string="Data inicial a que a apuração se refere", required=True
    )

    DT_FIN = fields.Date(string="Data final a que a apuração se refere", required=True)

    reg_E310_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.e310",
        "reg_E310_ids_RegistroE300_id",
        string="E310 Apuração do ICMS Diferencial",
        sped_card="1:1",
        sped_required="O",
        help=(
            "E310 Apuração do ICMS Diferencial de Alíquota – UF Origem/Destino"
            " EC 87/15"
        ),
    )


class RegistroE310(models.Model):
    """Apuração do ICMS Diferencial de Alíquota – UF Origem/Destino EC 87/15"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.e310"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    IND_MOV_DIFAL = fields.Char(
        string="Indicador de movimento",
        required=True,
        help=(
            "Indicador de movimento: 0 – Sem operações com ICMS Diferencial de"
            " Alíquota da UF de Origem/Destino 1 – Com operações de ICMS "
            "Diferencial de Alíquota da UF de Origem/Destino"
        ),
    )

    VL_SLD_CRED_ANT_DIFAL = fields.Monetary(
        string="Valor do 'Saldo credor",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do 'Saldo credor de período anterior – ICMS Diferencial de "
            "Alíquota da UF de Origem/Destino'"
        ),
    )

    VL_TOT_DEBITOS_DIFAL = fields.Monetary(
        string="Valor total dos débitos por 'Saídas e prestações",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total dos débitos por 'Saídas e prestações com débito do "
            "ICMS referente ao diferencial de alíquota devido à UF do "
            "Remetente/Destinatário'"
        ),
    )

    VL_OUT_DEB_DIFAL = fields.Monetary(
        string="Valor Total",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor Total dos ajustes 'Outros débitos ICMS Diferencial de "
            "Alíquota da UF de Origem/Destino' ' e “Estorno de créditos ICMS "
            "Diferencial de Alíquota da UF de Origem/Destino"
        ),
    )

    VL_TOT_DEB_FCP = fields.Monetary(
        string="Valor total dos débitos FCP por 'Saídas",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor total dos débitos FCP por 'Saídas e prestações”",
    )

    VL_TOT_CREDITOS_DIFAL = fields.Monetary(
        string="Valor total dos créditos do ICMS referente",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total dos créditos do ICMS referente ao diferencial de "
            "alíquota devido à UF dos Remetente/ Destinatário"
        ),
    )

    VL_TOT_CRED_FCP = fields.Monetary(
        string="Valor total dos créditos FCP por Entradas",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_OUT_CRED_DIFAL = fields.Monetary(
        string="Valor total",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total de Ajustes 'Outros créditos ICMS Diferencial de "
            "Alíquota da UF de Origem/Destino' e “Estorno de débitos ICMS "
            "Diferencial de Alíquota da UF de Origem/Destino”"
        ),
    )

    VL_SLD_DEV_ANT_DIFAL = fields.Monetary(
        string="Valor total de Saldo devedor ICMS Diferencial",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total de Saldo devedor ICMS Diferencial de Alíquota da UF "
            "de Origem/Destino antes das deduções"
        ),
    )

    VL_DEDUÇÕES_DIFAL = fields.Monetary(
        string="Valor total dos ajustes 'Deduções ICMS Diferencial",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total dos ajustes 'Deduções ICMS Diferencial de Alíquota da"
            " UF de Origem/Destino'"
        ),
    )

    VL_RECOL = fields.Monetary(
        string="Valor recolhido ou a recolher referente a FCP",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor recolhido ou a recolher referente a FCP e Imposto do "
            "Diferencial de Alíquota da UF de Origem/Destino (10-11)"
        ),
    )

    VL_SLD_CRED_TRANSPOR = fields.Monetary(
        string="Saldo credor a transportar para o período seguinte",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    DEB_ESP_DIFAL = fields.Float(
        string="Valores recolhidos ou a recolher",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Valores recolhidos ou a recolher, extra-apuração.",
    )

    VL_OUT_DEB_FCP = fields.Monetary(
        string="Valor total dos ajustes 'Outros débitos FCP'",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total dos ajustes 'Outros débitos FCP' e “Estorno de "
            "créditos FCP”"
        ),
    )

    VL_TOT_CRED_FCP = fields.Monetary(
        string="VL_TOT_CRED_FCP",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_OUT_CRED_FCP = fields.Monetary(
        string="Valor total de Ajustes 'Outros créditos FCP'",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total de Ajustes 'Outros créditos FCP' e “Estorno de " "débitos FCP”"
        ),
    )

    VL_SLD_DEV_ANT_FCP = fields.Monetary(
        string="Valor total de Saldo devedor FCP antes",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor total de Saldo devedor FCP antes das deduções",
    )

    VL_DEDUÇÕES_FCP = fields.Monetary(
        string="Valor total das deduções 'FCP'",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_RECOL_FCP = fields.Monetary(
        string="Valor recolhido ou a recolher referente ao FCP",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor recolhido ou a recolher referente ao FCP (18– 19)",
    )

    VL_SLD_CRED_TRANSPORTAR_FCP = fields.Monetary(
        string="Saldo credor a transportar",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Saldo credor a transportar para o período seguinte referente ao " "FCP"),
    )

    DEB_ESP_FCP = fields.Float(
        string="Valores recolhidos ou a recolher (DEB_ESP_FCP)",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Valores recolhidos ou a recolher, extra-apuração - FCP.",
    )

    reg_E310_ids_RegistroE300_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.e300",
        string="Período de Apuração do ICMS Diferencial",
        required=True,
        ondelete="cascade",
        help=(
            "Período de Apuração do ICMS Diferencial de Alíquota – UF "
            "Origem/Destino EC 87/15"
        ),
    )

    reg_E311_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.e311",
        "reg_E311_ids_RegistroE310_id",
        string="E311 Ajuste/Benefício/Incentivo da Apuração",
        sped_card="1:N",
        sped_required="O",
        help=(
            "E311 Ajuste/Benefício/Incentivo da Apuração do ICMS Diferencial "
            "de Alíquota – UF Origem/Destino EC 87/15"
        ),
    )

    reg_E316_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.e316",
        "reg_E316_ids_RegistroE310_id",
        string="E316 Obrigações do ICMS recolhido",
        sped_card="1:N",
        sped_required="O",
        help=(
            "E316 Obrigações do ICMS recolhido ou a recolher – Diferencial de "
            "Alíquota – UF Origem/Destino EC 87/15"
        ),
    )


class RegistroE311(models.Model):
    """Ajuste/Benefício/Incentivo da Apuração do ICMS Diferencial de Alíquota –
    UF Origem/Destino EC 87/15"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.e311"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_AJ_APUR = fields.Char(
        string="Código do ajuste da apuração e dedução",
        required=True,
        help=(
            "Código do ajuste da apuração e dedução, conforme a Tabela "
            "indicada no item 5.1.1"
        ),
    )

    DESCR_COMPL_AJ = fields.Char(string="Descrição complementar do ajuste da apuração")

    VL_AJ_APUR = fields.Monetary(
        string="Valor do ajuste da apuração",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_E311_ids_RegistroE310_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.e310",
        string="Apuração do ICMS Diferencial",
        required=True,
        ondelete="cascade",
        help=(
            "Apuração do ICMS Diferencial de Alíquota – UF Origem/Destino EC " "87/15"
        ),
    )

    reg_E312_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.e312",
        "reg_E312_ids_RegistroE311_id",
        string="E312 Informações Adicionais dos Ajustes",
        sped_card="1:N",
        sped_required="O",
        help=(
            "E312 Informações Adicionais dos Ajustes da Apuração do ICMS "
            "Diferencial de Alíquota – UF Origem/Destino EC 87/15"
        ),
    )

    reg_E313_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.e313",
        "reg_E313_ids_RegistroE311_id",
        string="E313 Informações Adicionais da Apuração",
        sped_card="1:N",
        sped_required="O",
        help=(
            "E313 Informações Adicionais da Apuração do ICMS Diferencial de "
            "Alíquota – UF Origem/Destino EC 87/15 Identificação dos "
            "Documentos Fiscais"
        ),
    )


class RegistroE312(models.Model):
    """Informações Adicionais dos Ajustes da Apuração do ICMS Diferencial de
    Alíquota – UF Origem/Destino EC 87/15"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.e312"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 5

    NUM_DA = fields.Char(
        string="Número do documento de arrecadação estadual",
        help="Número do documento de arrecadação estadual, se houver",
    )

    NUM_PROC = fields.Char(
        string="Número do processo ao qual o ajuste está vinculado",
        sped_length=15,
        help=("Número do processo ao qual o ajuste está vinculado, se houver"),
    )

    IND_PROC = fields.Integer(
        string="Indicador da origem do processo",
        help=(
            "Indicador da origem do processo: 0- Sefaz; 1- Justiça Federal; 2-"
            " Justiça Estadual; 9- Outros"
        ),
    )

    PROC = fields.Char(
        string="Descrição resumida do processo que embasou",
        help="Descrição resumida do processo que embasou o lançamento",
    )

    TXT_COMPL = fields.Char(string="Descrição complementar")

    reg_E312_ids_RegistroE311_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.e311",
        string="Ajuste/Benefício/Incentivo da Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Ajuste/Benefício/Incentivo da Apuração do ICMS Diferencial de "
            "Alíquota – UF Origem/Destino EC 87/15"
        ),
    )


class RegistroE313(models.Model):
    """Informações Adicionais da Apuração do ICMS Diferencial de Alíquota – UF
    Origem/Destino EC 87/15 Identificação dos Documentos Fiscais"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.e313"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 5

    COD_PART = fields.Char(
        string="Código do participante",
        sped_length=60,
        help="Código do participante (campo 02 do Registro 0150)",
    )

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        required=True,
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    SUB = fields.Integer(string="Subsérie do documento fiscal", sped_length=3)

    NUM_DOC = fields.Integer(
        string="Número do documento fiscal", required=True, sped_length=9
    )

    CHV_DOCe = fields.Integer(string="Chave do Documento Eletrônico")

    DT_DOC = fields.Date(string="Data da emissão do documento fiscal", required=True)

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    VL_AJ_ITEM = fields.Monetary(
        string="Valor do ajuste para a operação/item",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_E313_ids_RegistroE311_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.e311",
        string="Ajuste/Benefício/Incentivo da Apuração",
        required=True,
        ondelete="cascade",
        help=(
            "Ajuste/Benefício/Incentivo da Apuração do ICMS Diferencial de "
            "Alíquota – UF Origem/Destino EC 87/15"
        ),
    )


class RegistroE316(models.Model):
    """Obrigações do ICMS recolhido ou a recolher – Diferencial de Alíquota –
    UF Origem/Destino EC 87/15"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.e316"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_OR = fields.Char(
        string="Código da obrigação recolhida ou a recolher",
        required=True,
        help=("Código da obrigação recolhida ou a recolher, conforme a Tabela " "5.4"),
    )

    VL_OR = fields.Monetary(
        string="Valor da obrigação recolhida ou a recolher",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    DT_VCTO = fields.Date(string="Data de vencimento da obrigação", required=True)

    COD_REC = fields.Char(
        string="Código de receita referente à obrigação",
        required=True,
        help=(
            "Código de receita referente à obrigação, próprio da unidade da "
            "federação da origem/destino, conforme legislação estadual."
        ),
    )

    NUM_PROC = fields.Char(
        string="Número do processo ou auto de infração",
        sped_length=15,
        help=(
            "Número do processo ou auto de infração ao qual a obrigação está "
            "vinculada, se houver"
        ),
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo",
        help=(
            "Indicador da origem do processo: 0- SEFAZ; 1- Justiça Federal; 2-"
            " Justiça Estadual; 9- Outros"
        ),
    )

    PROC = fields.Char(
        string="Descrição resumida do processo que embasou",
        help="Descrição resumida do processo que embasou o lançamento",
    )

    TXT_COMPL = fields.Char(
        string="Descrição complementar",
        help=("Descrição complementar das obrigações recolhidas ou a recolher"),
    )

    MES_REF = fields.Integer(
        string="Informe o mês de referência no formato “mmaaaa”", required=True
    )

    reg_E316_ids_RegistroE310_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.e310",
        string="Apuração do ICMS Diferencial",
        required=True,
        ondelete="cascade",
        help=(
            "Apuração do ICMS Diferencial de Alíquota – UF Origem/Destino EC " "87/15"
        ),
    )


class RegistroE500(models.Model):
    "Período de Apuração do IPI"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.e500"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    IND_APUR = fields.Char(
        string="Indicador de período de apuração do IPI",
        required=True,
        help=("Indicador de período de apuração do IPI: 0 - Mensal; 1 - " "Decendial"),
    )

    DT_INI = fields.Date(
        string="Data inicial a que a apuração se refere", required=True
    )

    DT_FIN = fields.Date(string="Data final a que a apuração se refere", required=True)

    reg_E520_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.e520",
        "reg_E520_ids_RegistroE500_id",
        string="E520 Apuração do IPI",
        sped_card="1:1",
        sped_required="O",
    )

    reg_E510_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.e510",
        "reg_E510_ids_RegistroE500_id",
        string="E510 Consolidação dos Valores de IPI",
        sped_card="1:N",
        sped_required="O",
    )


class RegistroE510(models.Model):
    "Consolidação dos Valores de IPI"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.e510"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    CFOP = fields.Integer(
        string="Código Fiscal de Operação e Prestação",
        required=True,
        help=("Código Fiscal de Operação e Prestação do agrupamento de itens"),
    )

    CST_IPI = fields.Char(
        string="Código da Situação Tributária referente ao IPI",
        required=True,
        help=(
            "Código da Situação Tributária referente ao IPI, conforme a Tabela"
            " indicada no item 4.3.2."
        ),
    )

    VL_CONT_IPI = fields.Monetary(
        string="Parcela correspondente",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao 'Valor Contábil' referente ao CFOP e ao"
            " Código de Tributação do IPI"
        ),
    )

    VL_BC_IPI = fields.Monetary(
        string="Parcela correspondente ao 'Valor da base",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao 'Valor da base de cálculo do IPI' "
            "referente ao CFOP e ao Código de Tributação do IPI, para "
            "operações tributadas"
        ),
    )

    VL_IPI = fields.Monetary(
        string="Parcela correspondente ao 'Valor do IPI' referente",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela correspondente ao 'Valor do IPI' referente ao CFOP e ao "
            "Código de Tributação do IPI, para operações tributadas"
        ),
    )

    reg_E510_ids_RegistroE500_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.e500",
        string="Período de Apuração do IPI",
        required=True,
        ondelete="cascade",
    )


class RegistroE520(models.Model):
    "Apuração do IPI"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.e520"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    VL_SD_ANT_IPI = fields.Monetary(
        string="Saldo credor do IPI transferido",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Saldo credor do IPI transferido do período anterior",
    )

    VL_DEB_IPI = fields.Monetary(
        string="Valor total dos débitos por 'Saídas com débito",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor total dos débitos por 'Saídas com débito do imposto'",
    )

    VL_CRED_IPI = fields.Monetary(
        string="Valor total dos créditos por 'Entradas",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total dos créditos por 'Entradas e aquisições com crédito "
            "do imposto'"
        ),
    )

    VL_OD_IPI = fields.Monetary(
        string="Valor de 'Outros débitos' do IPI",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor de 'Outros débitos' do IPI (inclusive estornos de crédito)"),
    )

    VL_OC_IPI = fields.Monetary(
        string="Valor de 'Outros créditos' do IPI",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor de 'Outros créditos' do IPI (inclusive estornos de débitos)"),
    )

    VL_SC_IPI = fields.Monetary(
        string="Valor do saldo credor do IPI a transportar",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor do saldo credor do IPI a transportar para o período " "seguinte"),
    )

    VL_SD_IPI = fields.Monetary(
        string="Valor do saldo devedor do IPI a recolher",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_E520_ids_RegistroE500_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.e500",
        string="Período de Apuração do IPI",
        required=True,
        ondelete="cascade",
    )

    reg_E530_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.e530",
        "reg_E530_ids_RegistroE520_id",
        string="E530 Ajustes da Apuração do IPI",
        sped_card="1:N",
        sped_required="O",
    )


class RegistroE530(models.Model):
    "Ajustes da Apuração do IPI"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.e530"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    IND_AJ = fields.Char(
        string="Indicador do tipo de ajuste",
        required=True,
        help=(
            "Indicador do tipo de ajuste: 0- Ajuste a débito; 1- Ajuste a " "crédito"
        ),
    )

    VL_AJ = fields.Monetary(
        string="Valor do ajuste",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_AJ = fields.Char(
        string="Código do ajuste da apuração",
        required=True,
        help=(
            "Código do ajuste da apuração, conforme a Tabela indicada no item " "4.5.4."
        ),
    )

    IND_DOC = fields.Char(
        string="Indicador da origem do documento vinculado",
        required=True,
        help=(
            "Indicador da origem do documento vinculado ao ajuste: 0 - "
            "Processo Judicial; 1 - Processo Administrativo; 2 - PER/DCOMP; 3 "
            "– Documento Fiscal 9 – Outros."
        ),
    )

    NUM_DOC = fields.Char(
        string="Número do documento / processo / declaração",
        help=(
            "Número do documento / processo / declaração ao qual o ajuste está"
            " vinculado, se houver"
        ),
    )

    DESCR_AJ = fields.Char(
        string="Descrição detalhada do ajuste",
        required=True,
        help=("Descrição detalhada do ajuste, com citação dos documentos " "fiscais."),
    )

    reg_E530_ids_RegistroE520_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.e520",
        string="Apuração do IPI",
        required=True,
        ondelete="cascade",
    )

    reg_E531_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.e531",
        "reg_E531_ids_RegistroE530_id",
        string="E531 Informações adicionais dos ajustes",
        sped_card="1:N",
        sped_required="O",
        help=(
            "E531 Informações adicionais dos ajustes da apuração do IPI – "
            "Identificação dos documentos fiscais (01 e 55)"
        ),
    )


class RegistroE531(models.Model):
    """Informações adicionais dos ajustes da apuração do IPI – Identificação
    dos documentos fiscais (01 e 55)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.e531"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 5

    COD_PART = fields.Char(
        string="Código do participante",
        sped_length=60,
        help=(
            "Código do participante (campo 02 do Registro 0150): - do emitente"
            " do documento ou do remetente das mercadorias, no"
        ),
    )

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        required=True,
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    SUB = fields.Integer(string="Subsérie do documento fiscal", sped_length=3)

    NUM_DOC = fields.Integer(
        string="Número do documento fiscal", required=True, sped_length=9
    )

    DT_DOC = fields.Date(string="Data da emissão do documento fiscal", required=True)

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    VL_AJ_ITEM = fields.Monetary(
        string="Valor do ajuste para a operação/item",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CHV_NFE = fields.Integer(
        string="Chave da Nota Fiscal Eletrônica",
        help="Chave da Nota Fiscal Eletrônica (modelo 55)",
    )

    reg_E531_ids_RegistroE530_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.e530",
        string="Ajustes da Apuração do IPI",
        required=True,
        ondelete="cascade",
    )


class RegistroG110(models.Model):
    "ICMS – Ativo Permanente – CIAP"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.g110"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    DT_INI = fields.Date(
        string="Data inicial a que a apuração se refere", required=True
    )

    DT_FIN = fields.Date(string="Data final a que a apuração se refere", required=True)

    SALDO_IN_ICMS = fields.Float(
        string="Saldo inicial de ICMS do CIAP",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Saldo inicial de ICMS do CIAP, composto por ICMS de bens que "
            "entraram anteriormente ao período de apuração"
        ),
    )

    SOM_PARC = fields.Float(
        string="Somatório das parcelas de ICMS passível",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Somatório das parcelas de ICMS passível de apropriação de cada "
            "bem (campo 10 do G125)"
        ),
    )

    VL_TRIB_EXP = fields.Monetary(
        string="Valor do somatório das saídas tributadas e saídas",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor do somatório das saídas tributadas e saídas para exportação"),
    )

    VL_TOTAL = fields.Monetary(
        string="Valor total de saídas",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_PER_SAI = fields.Float(
        string="Índice de participação do valor do somatório",
        required=True,
        xsd_type="TDec_1608",
        digits=(
            16,
            8,
        ),
        help=(
            "Índice de participação do valor do somatório das saídas "
            "tributadas e saídas para exportação no valor total de saídas "
            "(Campo 06 dividido pelo campo 07)"
        ),
    )

    ICMS_APROP = fields.Float(
        string="Valor de ICMS a ser apropriado na apuração do ICMS",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Valor de ICMS a ser apropriado na apuração do ICMS, "
            "correspondente à multiplicação do campo 05 pelo campo 08."
        ),
    )

    SOM_ICMS_OC = fields.Float(
        string="Valor de outros créditos a ser apropriado",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Valor de outros créditos a ser apropriado na Apuração do ICMS, "
            "correspondente ao somatório do campo 09 do registro G126."
        ),
    )

    reg_G125_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.g125",
        "reg_G125_ids_RegistroG110_id",
        string="G125 Movimentação de bem ou componente",
        sped_card="1:N",
        sped_required="O",
        help="G125 Movimentação de bem ou componente do",
    )


class RegistroG125(models.Model):
    "Movimentação de bem ou componente do"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.g125"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_IND_BEM = fields.Char(
        string="Código individualizado do bem",
        required=True,
        sped_length=60,
        help=(
            "Código individualizado do bem ou componente adotado no controle "
            "patrimonial do estabelecimento informante"
        ),
    )

    DT_MOV = fields.Date(
        string="Data da movimentação ou do saldo inicial", required=True
    )

    TIPO_MOV = fields.Char(
        string="Tipo de movimentação do bem ou componente",
        required=True,
        help=(
            "Tipo de movimentação do bem ou componente: SI = Saldo inicial de "
            "bens imobilizados; IM = Imobilização de bem individual; IA = "
            "Imobilização em Andamento - Componente; CI = Conclusão de "
            "Imobilização em Andamento – Bem Resultante; MC = Imobilização "
            "oriunda do Ativo Circulante; BA = Baixa do bem - Fim do período "
            "de apropriação; AT = Alienação ou Transferência; PE = "
            "Perecimento, Extravio ou Deterioração; OT = Outras Saídas do "
            "Imobilizado"
        ),
    )

    VL_IMOB_ICMS_OP = fields.Monetary(
        string="Valor do ICMS da Operação Própria na entrada",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor do ICMS da Operação Própria na entrada do bem ou componente"),
    )

    VL_IMOB_ICMS_ST = fields.Monetary(
        string="Valor do ICMS da Oper. por Sub",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do ICMS da Oper. por Sub. Tributária na entrada do bem ou "
            "componente"
        ),
    )

    VL_IMOB_ICMS_FRT = fields.Monetary(
        string="Valor do ICMS sobre Frete do Conhecimento",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do ICMS sobre Frete do Conhecimento de Transporte na "
            "entrada do bem ou componente"
        ),
    )

    VL_IMOB_ICMS_DIF = fields.Monetary(
        string="Valor do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do ICMS - Diferencial de Alíquota, conforme Doc. de "
            "Arrecadação, na entrada do bem ou componente"
        ),
    )

    NUM_PARC = fields.Integer(string="Número da parcela do ICMS", sped_length=3)

    VL_PARC_PASS = fields.Monetary(
        string="Valor da parcela de ICMS passível de apropriação",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da parcela de ICMS passível de apropriação (antes da "
            "aplicação da participação percentual do valor das saídas "
            "tributadas/exportação sobre as saídas totais)"
        ),
    )

    reg_G125_ids_RegistroG110_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.g110",
        string="ICMS – Ativo Permanente – CIAP",
        required=True,
        ondelete="cascade",
    )

    reg_G126_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.g126",
        "reg_G126_ids_RegistroG125_id",
        string="G126 Outros créditos CIAP",
        sped_card="1:N",
        sped_required="O",
    )

    reg_G130_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.g130",
        "reg_G130_ids_RegistroG125_id",
        string="G130 Identificação do documento fiscal",
        sped_card="1:N",
        sped_required="O",
    )


class RegistroG126(models.Model):
    "Outros créditos CIAP"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.g126"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    DT_INI = fields.Date(string="Data inicial do período de apuração", required=True)

    DT_FIM = fields.Date(string="Data final do período de apuração", required=True)

    NUM_PARC = fields.Integer(
        string="Número da parcela do ICMS", required=True, sped_length=3
    )

    VL_PARC_PASS = fields.Monetary(
        string="Valor da parcela de ICMS passível de apropriação",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da parcela de ICMS passível de apropriação - antes da "
            "aplicação da participação percentual do valor das saídas "
            "tributadas/exportação sobre as saídas totais"
        ),
    )

    VL_TRIB_OC = fields.Monetary(
        string="Valor do somatório das saídas tributadas e saídas",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do somatório das saídas tributadas e saídas para exportação"
            " no período indicado neste registro"
        ),
    )

    VL_TOTAL = fields.Monetary(
        string="Valor total de saídas",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor total de saídas no período indicado neste registro",
    )

    IND_PER_SAI = fields.Float(
        string="Índice de participação do valor do somatório",
        required=True,
        xsd_type="TDec_1608",
        digits=(
            16,
            8,
        ),
        help=(
            "Índice de participação do valor do somatório das saídas "
            "tributadas e saídas para exportação no valor total de saídas "
            "(Campo 06 dividido pelo campo 07)"
        ),
    )

    VL_PARC_APROP = fields.Monetary(
        string="Valor de outros créditos de ICMS a ser apropriado",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor de outros créditos de ICMS a ser apropriado na apuração "
            "(campo 05 vezes o campo 08)"
        ),
    )

    reg_G126_ids_RegistroG125_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.g125",
        string="Movimentação de bem ou componente",
        required=True,
        ondelete="cascade",
        help="Movimentação de bem ou componente do",
    )


class RegistroG130(models.Model):
    "Identificação do documento fiscal"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.g130"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    IND_EMIT = fields.Char(
        string="Indicador do emitente do documento fiscal",
        required=True,
        help=(
            "Indicador do emitente do documento fiscal: 0- Emissão própria; 1-"
            " Terceiros"
        ),
    )

    COD_PART = fields.Char(
        string="Código do participante ",
        required=True,
        sped_length=60,
        help=(
            "Código do participante : - do emitente do documento ou do "
            "remetente das mercadorias, no caso de entradas; - do adquirente, "
            "no caso de saídas"
        ),
    )

    COD_MOD = fields.Char(
        string="Código do modelo de documento fiscal",
        required=True,
        help="Código do modelo de documento fiscal, conforme tabela 4.1.1",
    )

    SERIE = fields.Char(string="Série do documento fiscal", sped_length=3)

    NUM_DOC = fields.Integer(
        string="Número de documento fiscal", required=True, sped_length=9
    )

    CHV_NFE_CTE = fields.Integer(string="Chave do documento fiscal eletrônico")

    DT_DOC = fields.Date(string="Data da emissão do documento fiscal", required=True)

    NUM_DA = fields.Char(
        string="Número do documento de arrecadação estadual",
        help="Número do documento de arrecadação estadual, se houver",
    )

    reg_G130_ids_RegistroG125_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.g125",
        string="Movimentação de bem ou componente",
        required=True,
        ondelete="cascade",
        help="Movimentação de bem ou componente do",
    )

    reg_G140_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.g140",
        "reg_G140_ids_RegistroG130_id",
        string="G140 Identificação do item do documento fiscal",
        sped_card="1:N",
        sped_required="O",
    )


class RegistroG140(models.Model):
    "Identificação do item do documento fiscal"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.g140"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 5

    NUM_ITEM = fields.Integer(
        string="Número sequencial do item no documento fiscal",
        required=True,
        sped_length=3,
    )

    COD_ITEM = fields.Char(
        string="Código correspondente do bem no documento fiscal",
        required=True,
        sped_length=60,
        help=(
            "Código correspondente do bem no documento fiscal (campo 02 do "
            "registro 0200)"
        ),
    )

    QTDE = fields.Float(
        string="Quantidade",
        required=True,
        xsd_type="TDec_1605",
        digits=(
            16,
            5,
        ),
        help=(
            "Quantidade, deste item da nota fiscal, que foi aplicada neste "
            "bem, expressa na mesma unidade constante no documento fiscal de "
            "entrada"
        ),
    )

    UNID = fields.Char(
        string="Unidade do item constante no documento fiscal",
        required=True,
        sped_length=6,
        help="Unidade do item constante no documento fiscal de entrada",
    )

    VL_ICMS_OP_APLICADO = fields.Monetary(
        string="Valor do ICMS da Operação Própria na entrada",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do ICMS da Operação Própria na entrada do item, "
            "proporcional à quantidade aplicada no bem ou componente."
        ),
    )

    VL_ICMS_ST_APLICADO = fields.Monetary(
        string="Valor do ICMS ST na entrada do item",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do ICMS ST na entrada do item, proporcional à quantidade "
            "aplicada no bem ou componente."
        ),
    )

    VL_ICMS_FRT_APLICADO = fields.Monetary(
        string="Valor do ICMS sobre Frete do Conhecimento",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do ICMS sobre Frete do Conhecimento de Transporte na "
            "entrada do item, proporcional à quantidade aplicada no bem ou "
            "componente."
        ),
    )

    VL_ICMS_DIF_APLICADO = fields.Monetary(
        string="Valor do ICMS Diferencial de Alíquota",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do ICMS Diferencial de Alíquota, na entrada do item, "
            "proporcional à quantidade aplicada no bem ou componente."
        ),
    )

    reg_G140_ids_RegistroG130_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.g130",
        string="Identificação do documento fiscal",
        required=True,
        ondelete="cascade",
    )


class RegistroH005(models.Model):
    "Totais do Inventário"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.h005"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    DT_INV = fields.Date(string="Data do inventário", required=True)

    VL_INV = fields.Monetary(
        string="Valor total do estoque",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    MOT_INV = fields.Char(
        string="Informe o motivo do Inventário",
        required=True,
        help=(
            "Informe o motivo do Inventário: 01 – No final no período; 02 – Na"
            " mudança de forma de tributação da mercadoria (ICMS); 03 – Na "
            "solicitação da baixa cadastral, paralisação temporária e outras "
            "situações; 04 – Na alteração de regime de pagamento – condição do"
            " contribuinte; 05 – Por determinação dos fiscos; 06 – Para "
            "controle das mercadorias sujeitas ao regime de substituição "
            "tributária – restituição/ ressarcimento/ complementação."
        ),
    )

    reg_H010_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.h010",
        "reg_H010_ids_RegistroH005_id",
        string="H010 Inventário",
        sped_card="1:N",
        sped_required="O",
    )


class RegistroH010(models.Model):
    "Inventário"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.h010"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_ITEM = fields.Char(
        string="Código do item",
        required=True,
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    UNID = fields.Char(string="Unidade do item", required=True, sped_length=6)

    QTD = fields.Float(
        string="Quantidade do item",
        required=True,
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    VL_UNIT = fields.Float(
        string="Valor unitário do item",
        required=True,
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    VL_ITEM = fields.Monetary(
        string="Valor do item",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_PROP = fields.Char(
        string="Indicador de propriedade/posse do item",
        required=True,
        help=(
            "Indicador de propriedade/posse do item: 0- Item de propriedade do"
            " informante e em seu poder; 1- Item de propriedade do informante "
            "em posse de terceiros; 2- Item de propriedade de terceiros em "
            "posse do informante"
        ),
    )

    COD_PART = fields.Char(
        string="Código do participante",
        sped_length=60,
        help=(
            "Código do participante (campo 02 do Registro 0150): - "
            "proprietário/possuidor que não seja o informante do arquivo"
        ),
    )

    TXT_COMPL = fields.Char(string="Descrição complementar")

    COD_CTA = fields.Char(
        string="Código", help="Código da conta analítica contábil debitada/creditada"
    )

    VL_ITEM_IR = fields.Monetary(
        string="Valor do item para efeitos do Imposto de Renda",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_H010_ids_RegistroH005_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.h005",
        string="Totais do Inventário",
        required=True,
        ondelete="cascade",
    )

    reg_H030_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.h030",
        "reg_H030_ids_RegistroH010_id",
        string="H030 Informações complementares do inventário",
        sped_card="1:1",
        sped_required="O",
        help=(
            "H030 Informações complementares do inventário das mercadorias "
            "sujeitas ao regime de substituição tri- butária"
        ),
    )

    reg_H020_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.h020",
        "reg_H020_ids_RegistroH010_id",
        string="H020 Informação complementar do Inventário",
        sped_card="1:N",
        sped_required="O",
    )


class RegistroH020(models.Model):
    "Informação complementar do Inventário"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.h020"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    CST_ICMS = fields.Integer(
        string="Código da Situação Tributária referente ao ICMS",
        required=True,
        help=(
            "Código da Situação Tributária referente ao ICMS, conforme a "
            "Tabela indicada no item 4.3.1"
        ),
    )

    BC_ICMS = fields.Float(
        string="Informe a base de cálculo do ICMS",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_ICMS = fields.Monetary(
        string="Informe o valor do ICMS a ser debitado",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Informe o valor do ICMS a ser debitado ou creditado",
    )

    reg_H020_ids_RegistroH010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.h010",
        string="Inventário",
        required=True,
        ondelete="cascade",
    )


class RegistroH030(models.Model):
    """Informações complementares do inventário das mercadorias sujeitas ao
    regime de substituição tri- butária"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.h030"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    VL_ICMS_OP = fields.Float(
        string="Valor médio unitário do ICMS OP",
        required=True,
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    VL_BC_ICMS_ST = fields.Float(
        string="Valor médio unitário da base de cálculo do ICMS ST",
        required=True,
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    VL_ICMS_ST = fields.Float(
        string="Valor médio unitário do ICMS ST",
        required=True,
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    VL_FCP = fields.Float(
        string="Valor médio unitário do FCP",
        required=True,
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    reg_H030_ids_RegistroH010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.h010",
        string="Inventário",
        required=True,
        ondelete="cascade",
    )


class RegistroK100(models.Model):
    "Período de Apuração do ICMS/IPI"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.k100"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    DT_INI = fields.Date(
        string="Data inicial a que a apuração se refere", required=True, sped_length=8
    )

    DT_FIN = fields.Date(
        string="Data final a que a apuração se refere", required=True, sped_length=8
    )

    reg_K200_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.k200",
        "reg_K200_ids_RegistroK100_id",
        string="K200 Estoque Escriturado",
        sped_card="1:N",
        sped_required="O",
    )

    reg_K210_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.k210",
        "reg_K210_ids_RegistroK100_id",
        string="K210 Desmontagem de mercadorias – Item de Origem",
        sped_card="1:N",
        sped_required="O",
    )

    reg_K220_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.k220",
        "reg_K220_ids_RegistroK100_id",
        string="K220 Outras Movimentações Internas",
        sped_card="1:N",
        sped_required="O",
        help="K220 Outras Movimentações Internas entre Mercadorias",
    )

    reg_K230_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.k230",
        "reg_K230_ids_RegistroK100_id",
        string="K230 Itens Produzidos",
        sped_card="1:N",
        sped_required="O",
    )

    reg_K250_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.k250",
        "reg_K250_ids_RegistroK100_id",
        string="K250 Industrialização Efetuada",
        sped_card="1:N",
        sped_required="O",
        help=("K250 Industrialização Efetuada por Terceiros – Itens Produzidos"),
    )

    reg_K260_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.k260",
        "reg_K260_ids_RegistroK100_id",
        string="K260 Reprocessamento/Reparo de Produto/Insumo",
        sped_card="1:N",
        sped_required="O",
    )

    reg_K270_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.k270",
        "reg_K270_ids_RegistroK100_id",
        string="K270 Correção de Apontamento dos Registros K210",
        sped_card="1:N",
        sped_required="O",
    )

    reg_K280_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.k280",
        "reg_K280_ids_RegistroK100_id",
        string="K280 Correção de Apontamento – Estoque Escriturado",
        sped_card="1:N",
        sped_required="O",
    )

    reg_K290_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.k290",
        "reg_K290_ids_RegistroK100_id",
        string="K290 Produção Conjunta – Ordem de Produção",
        sped_card="1:N",
        sped_required="O",
    )

    reg_K300_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.k300",
        "reg_K300_ids_RegistroK100_id",
        string="K300 Produção Conjunta – Industrialização efetuada",
        sped_card="1:N",
        sped_required="O",
        help=("K300 Produção Conjunta – Industrialização efetuada por terceiros"),
    )


class RegistroK200(models.Model):
    "Estoque Escriturado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.k200"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    DT_EST = fields.Date(string="Data do estoque final", required=True, sped_length=8)

    COD_ITEM = fields.Char(
        string="Código do item",
        required=True,
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    QTD = fields.Float(
        string="Quantidade em estoque",
        required=True,
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    IND_EST = fields.Char(
        string="Indicador do tipo de estoque: 0",
        required=True,
        sped_length=1,
        help=(
            "Indicador do tipo de estoque: 0 - Estoque de propriedade do "
            "informante e em seu poder; 1 - Estoque de propriedade do "
            "informante e em posse de terceiros; 2 - Estoque de propriedade de"
            " terceiros e em posse do informante"
        ),
    )

    COD_PART = fields.Char(
        string="Código do participante",
        sped_length=60,
        help=(
            "Código do participante (campo 02 do Registro 0150): - "
            "proprietário/possuidor que não seja o informante do arquivo"
        ),
    )

    reg_K200_ids_RegistroK100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.k100",
        string="Período de Apuração do ICMS/IPI",
        required=True,
        ondelete="cascade",
    )


class RegistroK210(models.Model):
    "Desmontagem de mercadorias – Item de Origem"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.k210"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    DT_INI_OS = fields.Date(string="Data de início da ordem de serviço")

    DT_FIN_OS = fields.Date(string="Data de conclusão da ordem de serviço")

    COD_DOC_OS = fields.Char(
        string="Código de identificação da ordem de serviço", sped_length=30
    )

    COD_ITEM_ORI = fields.Char(
        string="Código do item de origem",
        required=True,
        sped_length=60,
        help="Código do item de origem (campo 02 do Registro 0200)",
    )

    QTD_ORI = fields.Float(
        string="Quantidade de origem – saída do estoque",
        required=True,
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    reg_K210_ids_RegistroK100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.k100",
        string="Período de Apuração do ICMS/IPI",
        required=True,
        ondelete="cascade",
    )

    reg_K215_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.k215",
        "reg_K215_ids_RegistroK210_id",
        string="K215 Desmontagem de mercadorias – Item de Destino",
        sped_card="1:N",
        sped_required="O",
    )


class RegistroK215(models.Model):
    "Desmontagem de mercadorias – Item de Destino"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.k215"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_ITEM_DES = fields.Char(
        string="Código do item de destino",
        required=True,
        sped_length=60,
        help="Código do item de destino (campo 02 do Registro 0200)",
    )

    QTD_DES = fields.Float(
        string="Quantidade de destino – entrada em estoque",
        required=True,
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    reg_K215_ids_RegistroK210_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.k210",
        string="Desmontagem de mercadorias – Item de Origem",
        required=True,
        ondelete="cascade",
    )


class RegistroK220(models.Model):
    "Outras Movimentações Internas entre Mercadorias"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.k220"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    DT_MOV = fields.Date(
        string="Data da movimentação interna", required=True, sped_length=8
    )

    COD_ITEM_ORI = fields.Char(
        string="Código do item de origem",
        required=True,
        sped_length=60,
        help="Código do item de origem (campo 02 do Registro 0200)",
    )

    COD_ITEM_DEST = fields.Char(
        string="Código do item de destino",
        required=True,
        sped_length=60,
        help="Código do item de destino (campo 02 do Registro 0200)",
    )

    QTD_ORI = fields.Float(
        string="Quantidade movimentada do item de origem",
        required=True,
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    QTD_DEST = fields.Float(
        string="Quantidade movimentada do item de destino",
        required=True,
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    reg_K220_ids_RegistroK100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.k100",
        string="Período de Apuração do ICMS/IPI",
        required=True,
        ondelete="cascade",
    )


class RegistroK230(models.Model):
    "Itens Produzidos"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.k230"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    DT_INI_OP = fields.Date(string="Data de início da ordem de produção", sped_length=8)

    DT_FIN_OP = fields.Date(
        string="Data de conclusão da ordem de produção", sped_length=8
    )

    COD_DOC_OP = fields.Char(
        string="Código de identificação da ordem de produção", sped_length=30
    )

    COD_ITEM = fields.Char(
        string="Código do item produzido",
        required=True,
        sped_length=60,
        help="Código do item produzido (campo 02 do Registro 0200)",
    )

    QTD_ENC = fields.Float(
        string="Quantidade de produção acabada",
        required=True,
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    reg_K230_ids_RegistroK100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.k100",
        string="Período de Apuração do ICMS/IPI",
        required=True,
        ondelete="cascade",
    )

    reg_K235_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.k235",
        "reg_K235_ids_RegistroK230_id",
        string="K235 Insumos Consumidos",
        sped_card="1:N",
        sped_required="O",
    )


class RegistroK235(models.Model):
    "Insumos Consumidos"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.k235"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    DT_SAÍDA = fields.Date(
        string="Data de saída do estoque para alocação ao produto",
        required=True,
        sped_length=8,
    )

    COD_ITEM = fields.Char(
        string="Código do item componente/insumo",
        required=True,
        sped_length=60,
        help="Código do item componente/insumo (campo 02 do Registro 0200)",
    )

    QTD = fields.Float(
        string="Quantidade consumida do item",
        required=True,
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    COD_INS_SUBST = fields.Char(
        string="Código do insumo que foi substituído",
        sped_length=60,
        help=(
            "Código do insumo que foi substituído, caso ocorra a substituição "
            "(campo 02 do Registro 0210)"
        ),
    )

    reg_K235_ids_RegistroK230_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.k230",
        string="Itens Produzidos",
        required=True,
        ondelete="cascade",
    )


class RegistroK250(models.Model):
    "Industrialização Efetuada por Terceiros – Itens Produzidos"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.k250"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    DT_PROD = fields.Date(
        string="Data do reconhecimento da produção ocorrida",
        required=True,
        sped_length=8,
        help="Data do reconhecimento da produção ocorrida no terceiro",
    )

    COD_ITEM = fields.Char(
        string="Código do item produzido",
        required=True,
        sped_length=60,
        help="Código do item produzido (campo 02 do Registro 0200)",
    )

    QTD = fields.Float(
        string="Quantidade produzida",
        required=True,
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    reg_K250_ids_RegistroK100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.k100",
        string="Período de Apuração do ICMS/IPI",
        required=True,
        ondelete="cascade",
    )

    reg_K255_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.k255",
        "reg_K255_ids_RegistroK250_id",
        string="K255 Industrialização",
        sped_card="1:N",
        sped_required="O",
        help="K255 Industrialização em Terceiros – Insumos Consumidos",
    )


class RegistroK255(models.Model):
    "Industrialização em Terceiros – Insumos Consumidos"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.k255"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    DT_CONS = fields.Date(
        string="Data do reconhecimento do consumo",
        required=True,
        sped_length=8,
        help=(
            "Data do reconhecimento do consumo do insumo referente ao produto "
            "informado no campo 04 do Registro K250"
        ),
    )

    COD_ITEM = fields.Char(
        string="Código do insumo",
        required=True,
        sped_length=60,
        help="Código do insumo (campo 02 do Registro 0200)",
    )

    QTD = fields.Float(
        string="Quantidade de consumo do insumo",
        required=True,
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    COD_INS_SUBST = fields.Char(
        string="Código do insumo que foi substituído",
        sped_length=60,
        help=(
            "Código do insumo que foi substituído, caso ocorra a substituição "
            "(campo 02 do Registro 0210)"
        ),
    )

    reg_K255_ids_RegistroK250_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.k250",
        string="Industrialização Efetuada",
        required=True,
        ondelete="cascade",
        help="Industrialização Efetuada por Terceiros – Itens Produzidos",
    )


class RegistroK260(models.Model):
    "Reprocessamento/Reparo de Produto/Insumo"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.k260"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_OP_OS = fields.Char(
        string="Código de identificação da ordem de produção",
        sped_length=30,
        help=(
            "Código de identificação da ordem de produção, no reprocessamento,"
            " ou da ordem de serviço, no reparo"
        ),
    )

    COD_ITEM = fields.Char(
        string="Código do produto/insumo",
        required=True,
        sped_length=60,
        help=(
            "Código do produto/insumo a ser reprocessado/reparado ou já "
            "reprocessado/reparado (campo 02 do Registro 0200)"
        ),
    )

    DT_SAÍDA = fields.Date(string="Data de saída do estoque", required=True)

    QTD_SAÍDA = fields.Float(
        string="Quantidade de saída do estoque",
        required=True,
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    DT_RET = fields.Date(string="Data de retorno ao estoque (entrada)")

    QTD_RET = fields.Float(
        string="Quantidade de retorno ao estoque",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help="Quantidade de retorno ao estoque (entrada)",
    )

    reg_K260_ids_RegistroK100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.k100",
        string="Período de Apuração do ICMS/IPI",
        required=True,
        ondelete="cascade",
    )

    reg_K265_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.k265",
        "reg_K265_ids_RegistroK260_id",
        string="reg_K265_ids",
        sped_card="1:N",
        sped_required="O",
        help=(
            "K265 Reprocessamento/Reparo – Mercadorias Consumidas e/ou " "Retornadas"
        ),
    )


class RegistroK265(models.Model):
    "Reprocessamento/Reparo – Mercadorias Consumidas e/ou Retornadas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.k265"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_ITEM = fields.Char(
        string="Código da mercadoria",
        required=True,
        sped_length=60,
        help="Código da mercadoria (campo 02 do Registro 0200)",
    )

    QTD_CONS = fields.Float(
        string="Quantidade consumida – saída do estoque",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    QTD_RET = fields.Float(
        string="Quantidade retornada – entrada em estoque",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    reg_K265_ids_RegistroK260_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.k260",
        string="Reprocessamento/Reparo de Produto/Insumo",
        required=True,
        ondelete="cascade",
    )


class RegistroK270(models.Model):
    "Correção de Apontamento dos Registros K210,"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.k270"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    DT_INI_AP = fields.Date(
        string="Data inicial do período de apuração em que ocorreu",
        help=(
            "Data inicial do período de apuração em que ocorreu o apontamento "
            "que está sendo corrigido"
        ),
    )

    DT_FIN_AP = fields.Date(
        string="Data final do período de apuração em que ocorreu",
        help=(
            "Data final do período de apuração em que ocorreu o apontamento "
            "que está sendo corrigido"
        ),
    )

    COD_OP_OS = fields.Char(
        string="Código de identificação da ordem de produção",
        sped_length=30,
        help=(
            "Código de identificação da ordem de produção ou da ordem de "
            "serviço que está sendo corrigida"
        ),
    )

    COD_ITEM = fields.Char(
        string="Código da mercadoria que está sendo corrigido",
        required=True,
        sped_length=60,
        help=(
            "Código da mercadoria que está sendo corrigido (campo 02 do "
            "Registro 0200)"
        ),
    )

    QTD_COR_POS = fields.Float(
        string="Quantidade de correção positiva",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Quantidade de correção positiva de apontamento ocorrido em "
            "período de apuração anterior"
        ),
    )

    QTD_COR_NEG = fields.Float(
        string="Quantidade de correção negativa",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Quantidade de correção negativa de apontamento ocorrido em "
            "período de apuração anterior"
        ),
    )

    ORIGEM = fields.Char(
        string="1 – correção de apontamento",
        required=True,
        sped_length=1,
        help=(
            "1 – correção de apontamento de produção e/ou consumo relativo aos"
            " Registros K230/K235; 2 – correção de apontamento de produção "
            "e/ou consumo relativo aos Registros K250/K255; 3 – correção de "
            "apontamento de desmontagem e/ou consumo relativo aos Registros "
            "K210/K215; 4 – correção de apontamento de reprocessamento/reparo "
            "e/ ou consumo relativo aos Registros K260/K265; 5 – correção de "
            "apontamento de movimentação interna relativo ao Registro K220. 6 "
            "– correção de apontamento de produção relativo ao Registro K291; "
            "7 – correção de apontamento de consumo relativo ao Registro K292;"
            " 8 – correção de apontamento de produção relativo ao Registro "
            "K301; 9 – correção de apontamento de consumo relativo ao Registro"
            " K302."
        ),
    )

    reg_K270_ids_RegistroK100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.k100",
        string="Período de Apuração do ICMS/IPI",
        required=True,
        ondelete="cascade",
    )

    reg_K275_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.k275",
        "reg_K275_ids_RegistroK270_id",
        string="K275 Correção de Apontamento e Retorno de Insumos",
        sped_card="1:N",
        sped_required="O",
        help=(
            "K275 Correção de Apontamento e Retorno de Insumos dos Registros "
            "K215, K220, K235, K255 e K265"
        ),
    )


class RegistroK275(models.Model):
    """Correção de Apontamento e Retorno de Insumos dos Registros K215, K220,
    K235, K255 e K265"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.k275"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_ITEM = fields.Char(
        string="Código da mercadoria",
        required=True,
        sped_length=60,
        help="Código da mercadoria (campo 02 do Registro 0200)",
    )

    QTD_COR_POS = fields.Float(
        string="Quantidade de correção positiva",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Quantidade de correção positiva de apontamento ocorrido em "
            "período de apuração anterior"
        ),
    )

    QTD_COR_NEG = fields.Float(
        string="Quantidade de correção negativa",
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
        help=(
            "Quantidade de correção negativa de apontamento ocorrido em "
            "período de apuração anterior"
        ),
    )

    COD_INS_SUBST = fields.Char(
        string="Código do insumo que foi substituído",
        sped_length=60,
        help=(
            "Código do insumo que foi substituído, caso ocorra a substituição,"
            " relativo aos Registros K235/K255."
        ),
    )

    reg_K275_ids_RegistroK270_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.k270",
        string="Correção de Apontamento dos Registros K210",
        required=True,
        ondelete="cascade",
    )


class RegistroK280(models.Model):
    "Correção de Apontamento – Estoque Escriturado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.k280"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    DT_EST = fields.Date(
        string="Data do estoque final escriturado",
        required=True,
        help="Data do estoque final escriturado que está sendo corrigido",
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        required=True,
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    QTD_COR_POS = fields.Float(
        string="Quantidade de correção positiva",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help=(
            "Quantidade de correção positiva de apontamento ocorrido em "
            "período de apuração anterior"
        ),
    )

    QTD_COR_NEG = fields.Float(
        string="Quantidade de correção negativa",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help=(
            "Quantidade de correção negativa de apontamento ocorrido em "
            "período de apuração anterior"
        ),
    )

    IND_EST = fields.Char(
        string="Indicador do tipo de estoque",
        required=True,
        sped_length=1,
        help=(
            "Indicador do tipo de estoque: 0 = Estoque de propriedade do "
            "informante e em seu poder; 1 = Estoque de propriedade do "
            "informante e em posse de terceiros; 2 = Estoque de propriedade de"
            " terceiros e em posse do informante"
        ),
    )

    COD_PART = fields.Char(
        string="Código do participante",
        sped_length=60,
        help=(
            "Código do participante (campo 02 do Registro 0150): - "
            "proprietário/possuidor que não seja o informante do arquivo"
        ),
    )

    reg_K280_ids_RegistroK100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.k100",
        string="Período de Apuração do ICMS/IPI",
        required=True,
        ondelete="cascade",
    )


class RegistroK290(models.Model):
    "Produção Conjunta – Ordem de Produção"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.k290"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    DT_INI_OP = fields.Date(string="Data de início da ordem de produção", sped_length=8)

    DT_FIN_OP = fields.Date(
        string="Data de conclusão da ordem de produção", sped_length=8
    )

    COD_DOC_OP = fields.Char(
        string="Código de identificação da ordem de produção", sped_length=30
    )

    reg_K290_ids_RegistroK100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.k100",
        string="Período de Apuração do ICMS/IPI",
        required=True,
        ondelete="cascade",
    )

    reg_K291_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.k291",
        "reg_K291_ids_RegistroK290_id",
        string="K291 Produção Conjunta – Itens Produzidos",
        sped_card="1:N",
        sped_required="O",
    )

    reg_K292_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.k292",
        "reg_K292_ids_RegistroK290_id",
        string="K292 Produção Conjunta – insumos Consumidos",
        sped_card="1:N",
        sped_required="O",
    )


class RegistroK291(models.Model):
    "Produção Conjunta – Itens Produzidos"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.k291"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_ITEM = fields.Char(
        string="Código do item produzido",
        required=True,
        sped_length=60,
        help="Código do item produzido (campo 02 do Registro 0200)",
    )

    QTD = fields.Float(
        string="Quantidade de produção acabada",
        required=True,
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    reg_K291_ids_RegistroK290_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.k290",
        string="Produção Conjunta – Ordem de Produção",
        required=True,
        ondelete="cascade",
    )


class RegistroK292(models.Model):
    "Produção Conjunta – insumos Consumidos"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.k292"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_ITEM = fields.Char(
        string="Código do insumo/componente consumido",
        required=True,
        sped_length=60,
        help=("Código do insumo/componente consumido (campo 02 do Registro 0200)"),
    )

    QTD = fields.Float(
        string="Quantidade consumida",
        required=True,
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    reg_K292_ids_RegistroK290_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.k290",
        string="Produção Conjunta – Ordem de Produção",
        required=True,
        ondelete="cascade",
    )


class RegistroK300(models.Model):
    "Produção Conjunta – Industrialização efetuada por terceiros"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.k300"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    DT_PROD = fields.Date(
        string="Data do reconhecimento da produção ocorrida",
        required=True,
        sped_length=8,
        help="Data do reconhecimento da produção ocorrida no terceiro",
    )

    reg_K300_ids_RegistroK100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.k100",
        string="Período de Apuração do ICMS/IPI",
        required=True,
        ondelete="cascade",
    )

    reg_K301_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.k301",
        "reg_K301_ids_RegistroK300_id",
        string="K301 Produção Conjunta – Industrialização efetuada",
        sped_card="1:N",
        sped_required="O",
        help=(
            "K301 Produção Conjunta – Industrialização efetuada por terceiros "
            "– Itens Produzidos"
        ),
    )

    reg_K302_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.k302",
        "reg_K302_ids_RegistroK300_id",
        string="K302 Produção Conjunta – Industrialização efetuada",
        sped_card="1:N",
        sped_required="O",
        help=(
            "K302 Produção Conjunta – Industrialização efetuada por terceiros "
            "– Insumos Consumidos"
        ),
    )


class RegistroK301(models.Model):
    """Produção Conjunta – Industrialização efetuada por terceiros – Itens
    Produzidos"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.k301"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_ITEM = fields.Char(
        string="Código do item produzido",
        required=True,
        sped_length=60,
        help="Código do item produzido (campo 02 do Registro 0200)",
    )

    QTD = fields.Float(
        string="Quantidade produzida",
        required=True,
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    reg_K301_ids_RegistroK300_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.k300",
        string="Produção Conjunta – Industrialização efetuada",
        required=True,
        ondelete="cascade",
        help="Produção Conjunta – Industrialização efetuada por terceiros",
    )


class RegistroK302(models.Model):
    """Produção Conjunta – Industrialização efetuada por terceiros – Insumos
    Consumidos"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.k302"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_ITEM = fields.Char(
        string="Código do insumo",
        required=True,
        sped_length=60,
        help="Código do insumo (campo 02 do Registro 0200)",
    )

    QTD = fields.Float(
        string="Quantidade consumida",
        required=True,
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    reg_K302_ids_RegistroK300_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.k300",
        string="Produção Conjunta – Industrialização efetuada",
        required=True,
        ondelete="cascade",
        help="Produção Conjunta – Industrialização efetuada por terceiros",
    )


class Registro1010(models.Model):
    "Obrigatoriedade de registros do Bloco 1"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1010"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    IND_EXP = fields.Char(
        string="Reg",
        required=True,
        help=(
            "Reg. 1100 - Ocorreu averbação (conclusão) de exportação no "
            "período: S – Sim N - Não"
        ),
    )

    IND_CCRF = fields.Char(
        string="Reg 1200 – Existem informações acerca de créditos",
        required=True,
        help=(
            "Reg 1200 – Existem informações acerca de créditos de ICMS a serem"
            " controlados, definidos pela Sefaz: S – Sim N - Não"
        ),
    )

    IND_COMB = fields.Char(
        string="Reg (IND_COMB)",
        required=True,
        help=(
            "Reg. 1300 – É comércio varejista de combustíveis com movimentação"
            " e/ou estoque no período: S – Sim N - Não"
        ),
    )

    IND_USINA = fields.Char(
        string="Reg (IND_USINA)",
        required=True,
        help=(
            "Reg. 1390 – Usinas de açúcar e/álcool – O estabelecimento é "
            "produtor de açúcar e/ou álcool carburante com movimentação e/ou "
            "estoque no período: S – Sim N - Não"
        ),
    )

    IND_VA = fields.Char(
        string="Reg 1400",
        required=True,
        help="Reg 1400 - Sendo o registro obrigatório em sua Unidade",
    )

    IND_EE = fields.Char(
        string="Reg 1500",
        required=True,
        help=(
            "Reg 1500 - A empresa é distribuidora de energia e ocorreu "
            "fornecimento de energia elétrica para consumidores de outra UF: S"
            " – Sim; N - Não"
        ),
    )

    IND_CART = fields.Char(
        string="Reg 1601",
        required=True,
        help=(
            "Reg 1601 - Realizou vendas com instrumentos eletrônicos de "
            "pagamento: S – Sim; N - Não"
        ),
    )

    IND_FORM = fields.Char(
        string="Reg (IND_FORM)",
        required=True,
        help=(
            "Reg. 1700 - Foram emitidos documentos fiscais em papel no período"
            " em unidade da federação que exija o controle de utilização de "
            "documentos fiscais: S – Sim N - Não"
        ),
    )

    IND_AER = fields.Char(
        string="Reg 1800",
        required=True,
        help=(
            "Reg 1800 - A empresa prestou serviços de transporte aéreo de "
            "cargas e de passageiros: S – Sim N - Não"
        ),
    )

    IND_GIAF1 = fields.Char(
        string="Reg (IND_GIAF1)",
        required=True,
        help="Reg. 1960 - Possui informações GIAF1? S – Sim; N – Não.",
    )

    IND_GIAF3 = fields.Char(
        string="Reg (IND_GIAF3)",
        required=True,
        help="Reg. 1970 - Possui informações GIAF3? S – Sim; N – Não.",
    )

    IND_GIAF4 = fields.Char(
        string="Reg (IND_GIAF4)",
        required=True,
        help="Reg. 1980 - Possui informações GIAF4? S – Sim; N – Não.",
    )

    IND_REST_RESSARC_COMPL_ICMS = fields.Char(
        string="Reg (IND_REST_RESSARC_COMPL_ICMS)",
        required=True,
        help=(
            "Reg. 1250 – Possui informações consolidadas de saldos de "
            "restituição, ressarcimento e complementação do ICMS? S – Sim; N –"
            " Não."
        ),
    )


class Registro1100(models.Model):
    "Registro de Informações sobre Exportação"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1100"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    IND_DOC = fields.Integer(
        string="Informe o tipo de documento",
        required=True,
        help=(
            "Informe o tipo de documento: 0 – Declaração de Exportação; 1 – "
            "Declaração Simplificada de Exportação; 2 – Declaração Única de "
            "Exportação."
        ),
    )

    NRO_DE = fields.Char(string="Número da declaração", required=True, sped_length=14)

    DT_DE = fields.Date(string="Data da declaração (DDMMAAAA)", required=True)

    NAT_EXP = fields.Integer(
        string="Preencher com: 0",
        required=True,
        help="Preencher com: 0 - Exportação Direta 1 - Exportação Indireta",
    )

    NRO_RE = fields.Integer(string="Nº do registro de Exportação", sped_length=12)

    DT_RE = fields.Date(
        string="Data do Registro de Exportação",
        help="Data do Registro de Exportação (DDMMAAAA)",
    )

    CHC_EMB = fields.Char(string="Nº do conhecimento de embarque", sped_length=18)

    DT_CHC = fields.Date(
        string="Data do conhecimento de embarque",
        help="Data do conhecimento de embarque (DDMMAAAA)",
    )

    DT_AVB = fields.Date(
        string="Data da averbação da Declaração de exportação",
        required=True,
        help="Data da averbação da Declaração de exportação (ddmmaaaa)",
    )

    TP_CHC = fields.Integer(
        string="Informação do tipo de conhecimento de embarque",
        required=True,
        help=(
            "Informação do tipo de conhecimento de embarque: 01 – AWB; 02 – "
            "MAWB; 03 – HAWB; 04 – COMAT; 06 – R. EXPRESSAS; 07 – ETIQ. "
            "REXPRESSAS; 08 – HR. EXPRESSAS; 09 – AV7; 10 – BL; 11 – MBL; 12 –"
            " HBL; 13 – CRT; 14 – DSIC; 16 – COMAT BL; 17 – RWB; 18 – HRWB; 19"
            " – TIF/DTA; 20 – CP2; 91 – NÂO IATA; 92 – MNAO IATA; 93 – HNAO "
            "IATA; 99 – OUTROS."
        ),
    )

    PAIS = fields.Integer(
        string="Código do país de destino da mercadoria",
        required=True,
        sped_length=3,
        help=(
            "Código do país de destino da mercadoria (Preencher conforme "
            "tabela do SISCOMEX)"
        ),
    )

    reg_1105_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.1105",
        "reg_1105_ids_Registro1100_id",
        string="1105 Documentos Fiscais de Exportação",
        sped_card="1:N",
        sped_required="O",
    )


class Registro1105(models.Model):
    "Documentos Fiscais de Exportação"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1105"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_MOD = fields.Char(
        string="Código do modelo da NF",
        required=True,
        help="Código do modelo da NF, conforme tabela 4.1.1",
    )

    SERIE = fields.Char(string="Série da Nota Fiscal", sped_length=3)

    NUM_DOC = fields.Integer(
        string="Número de Nota Fiscal de Exportação emitida",
        required=True,
        sped_length=9,
        help="Número de Nota Fiscal de Exportação emitida pelo Exportador",
    )

    CHV_NFE = fields.Integer(string="Chave da Nota Fiscal Eletrônica")

    DT_DOC = fields.Date(string="Data da emissão da NF de exportação", required=True)

    COD_ITEM = fields.Char(
        string="Código do item",
        required=True,
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    reg_1105_ids_Registro1100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.1100",
        string="Registro de Informações sobre Exportação",
        required=True,
        ondelete="cascade",
    )

    reg_1110_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.1110",
        "reg_1110_ids_Registro1105_id",
        string="1110 Operações de Exportação Indireta",
        sped_card="1:N",
        sped_required="O",
        help=("1110 Operações de Exportação Indireta - Mercadorias de terceiros"),
    )


class Registro1110(models.Model):
    "Operações de Exportação Indireta - Mercadorias de terceiros"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1110"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_PART = fields.Char(
        string="Código do participante-Fornecedor",
        required=True,
        sped_length=60,
        help=(
            "Código do participante-Fornecedor da Mercadoria destinada à "
            "exportação (campo 02 do Registro 0150)"
        ),
    )

    COD_MOD = fields.Char(
        string="Código do documento fiscal",
        required=True,
        help="Código do documento fiscal, conforme a Tabela 4.1.1",
    )

    SER = fields.Char(
        string="Série do documento fiscal recebido",
        sped_length=4,
        help=(
            "Série do documento fiscal recebido com fins específicos de " "exportação."
        ),
    )

    NUM_DOC = fields.Integer(
        string="Número do documento fiscal recebido",
        required=True,
        sped_length=9,
        help=(
            "Número do documento fiscal recebido com fins específicos de " "exportação."
        ),
    )

    DT_DOC = fields.Date(
        string="Data da emissão do documento fiscal recebido",
        required=True,
        help=(
            "Data da emissão do documento fiscal recebido com fins específicos"
            " de exportação"
        ),
    )

    CHV_NFE = fields.Integer(string="Chave da Nota Fiscal Eletrônica")

    NR_MEMO = fields.Integer(string="Número do Memorando de Exportação")

    QTD = fields.Float(
        string="Quantidade do item efetivamente exportado",
        required=True,
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    UNID = fields.Char(
        string="Unidade do item",
        required=True,
        sped_length=6,
        help="Unidade do item (Campo 02 do registro 0190)",
    )

    reg_1110_ids_Registro1105_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.1105",
        string="Documentos Fiscais de Exportação",
        required=True,
        ondelete="cascade",
    )


class Registro1200(models.Model):
    "Controle de Créditos Fiscais - ICMS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1200"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_AJ_APUR = fields.Char(
        string="Código de ajuste",
        required=True,
        help=(
            "Código de ajuste, conforme informado na Tabela indicada no item " "5.1.1."
        ),
    )

    SLD_CRED = fields.Float(
        string="Saldo de créditos fiscais de períodos anteriores",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    CRED_APR = fields.Float(
        string="Total de crédito apropriado no mês",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    CRED_RECEB = fields.Float(
        string="Total de créditos recebidos por transferência",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    CRED_UTIL = fields.Float(
        string="Total de créditos utilizados no período",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    SLD_CRED_FIM = fields.Float(
        string="Saldo de crédito fiscal acumulado",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Saldo de crédito fiscal acumulado a transportar para o período " "seguinte"
        ),
    )

    reg_1210_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.1210",
        "reg_1210_ids_Registro1200_id",
        string="1210 Utilização de Créditos Fiscais",
        sped_card="1:N",
        sped_required="O",
        help="1210 Utilização de Créditos Fiscais - ICMS",
    )


class Registro1210(models.Model):
    "Utilização de Créditos Fiscais - ICMS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1210"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    TIPO_UTIL = fields.Char(
        string="Tipo de utilização do crédito",
        required=True,
        help=(
            "Tipo de utilização do crédito, conforme tabela indicada no item " "5.5."
        ),
    )

    NR_DOC = fields.Char(string="Número do documento utilizado na baixa de créditos")

    VL_CRED_UTIL = fields.Monetary(
        string="Total de crédito utilizado",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CHV_DOCe = fields.Integer(string="Chave do Documento Eletrônico")

    reg_1210_ids_Registro1200_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.1200",
        string="Controle de Créditos Fiscais - ICMS",
        required=True,
        ondelete="cascade",
    )


class Registro1250(models.Model):
    """Informações consolidadas de saldos de restituição, ressarcimento e
    complementação do ICMS"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1250"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    VL_CREDITO_ICMS_OP = fields.Monetary(
        string="valor total do ICMS operação própria",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "valor total do ICMS operação própria que o informante tem direito"
            " ao crédito, na forma prevista na legislação, referente às "
            "hipóteses de restituição em que há previsão deste crédito."
        ),
    )

    VL_ICMS_ST_REST = fields.Monetary(
        string="valor total do ICMS ST que o informante",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "valor total do ICMS ST que o informante tem direito ao crédito, "
            "na forma prevista na legislação, referente às hipóteses de "
            "restituição em que há previsão deste crédito."
        ),
    )

    VL_FCP_ST_REST = fields.Monetary(
        string="valor total do FCP_ST agregado ao valor",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "valor total do FCP_ST agregado ao valor do ICMS ST informado no "
            "campo “VL_ICMS_ST_REST”."
        ),
    )

    VL_ICMS_ST_COMPL = fields.Monetary(
        string="valor total do débito referente ao complemento",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "valor total do débito referente ao complemento do imposto, nos "
            "casos previstos na legislação."
        ),
    )

    VL_FCP_ST_COMPL = fields.Monetary(
        string="valor total do FCP_ST agregado ao valor informado",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "valor total do FCP_ST agregado ao valor informado no campo "
            "“VL_ICMS_ST_COMPL”"
        ),
    )

    reg_1255_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.1255",
        "reg_1255_ids_Registro1250_id",
        string="1255 Informações consolidadas de saldos",
        sped_card="1:N",
        sped_required="O",
        help=(
            "1255 Informações consolidadas de saldos de restituição, "
            "ressarcimento e complementação do ICMS por motivo"
        ),
    )


class Registro1255(models.Model):
    """Informações consolidadas de saldos de restituição, ressarcimento e
    complementação do ICMS por motivo"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1255"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_MOT_REST_COMPL = fields.Char(
        string="Código do motivo da restituição",
        required=True,
        help=(
            "Código do motivo da restituição ou complementação conforme Tabela" " 5.7"
        ),
    )

    VL_CREDITO_ICMS_OP_MOT = fields.Monetary(
        string="valor total do ICMS operação própria",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "valor total do ICMS operação própria que o informante tem direito"
            " ao crédito, na forma prevista na legislação, referente às "
            "hipóteses de restituição em que há previsão deste crédito, para o"
            " mesmo “COD_MOT_REST_COMPL”"
        ),
    )

    VL_ICMS_ST_REST_MOT = fields.Monetary(
        string="valor total do ICMS ST que o informante",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "valor total do ICMS ST que o informante tem direito ao crédito, "
            "na forma prevista na legislação, referente às hipóteses de "
            "restituição em que há previsão deste crédito, para o mesmo "
            "“COD_MOT_REST_COMPL”"
        ),
    )

    VL_FCP_ST_REST_MOT = fields.Monetary(
        string="valor total do FCP_ST agregado ao valor",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "valor total do FCP_ST agregado ao valor do ICMS ST informado no "
            "campo “VL_ICMS_ST_REST_MOT”"
        ),
    )

    VL_ICMS_ST_COMPL_MOT = fields.Monetary(
        string="valor total do débito referente ao complemento",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "valor total do débito referente ao complemento do imposto, nos "
            "casos previstos na legislação, para o mesmo “COD_MOT_REST_COMPL”"
        ),
    )

    VL_FCP_ST_COMPL_MOT = fields.Monetary(
        string="valor total do FCP_ST agregado ao valor informado",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "valor total do FCP_ST agregado ao valor informado no campo "
            "“VL_ICMS_ST_COMPL_MOT”"
        ),
    )

    reg_1255_ids_Registro1250_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.1250",
        string="Informações consolidadas de saldos de restituição",
        required=True,
        ondelete="cascade",
        help=(
            "Informações consolidadas de saldos de restituição, ressarcimento "
            "e complementação do ICMS"
        ),
    )


class Registro1300(models.Model):
    "Movimentação diária de combustíveis"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1300"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_ITEM = fields.Char(
        string="Código do Produto",
        required=True,
        sped_length=60,
        help="Código do Produto, constante do registro 0200",
    )

    DT_FECH = fields.Date(string="Data do fechamento da movimentação", required=True)

    ESTQ_ABERT = fields.Float(
        string="Estoque no início do dia, em litros",
        required=True,
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    VOL_ENTR = fields.Float(
        string="Volume Recebido no dia (em litros)",
        required=True,
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    VOL_DISP = fields.Float(
        string="Volume Disponível (04 + 05)",
        required=True,
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help="Volume Disponível (04 + 05), em litros",
    )

    VOL_SAIDAS = fields.Float(
        string="Volume Total das Saídas, em litros",
        required=True,
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    ESTQ_ESCR = fields.Float(
        string="Estoque Escritural (06 – 07), litros",
        required=True,
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    VAL_AJ_PERDA = fields.Float(
        string="Valor da Perda, em litros",
        required=True,
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    VAL_AJ_GANHO = fields.Float(
        string="Valor do ganho, em litros",
        required=True,
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    FECH_FISICO = fields.Float(
        string="Estoque de Fechamento, em litros",
        required=True,
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    reg_1310_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.1310",
        "reg_1310_ids_Registro1300_id",
        string="1310 Movimentação diária de combustíveis",
        sped_card="1:N",
        sped_required="O",
        help="1310 Movimentação diária de combustíveis por tanque",
    )


class Registro1310(models.Model):
    "Movimentação diária de combustíveis por tanque"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1310"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    NUM_TANQUE = fields.Char(
        string="Tanque que armazena o combustível", required=True, sped_length=3
    )

    ESTQ_ABERT = fields.Float(
        string="Estoque no inicio do dia, em litros",
        required=True,
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    VOL_ENTR = fields.Float(
        string="Volume Recebido no dia (em litros)",
        required=True,
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    VOL_DISP = fields.Float(
        string="Volume Disponível (03 + 04)",
        required=True,
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help="Volume Disponível (03 + 04), em litros",
    )

    VOL_SAIDAS = fields.Float(
        string="Volume Total das Saídas, em litros",
        required=True,
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    ESTQ_ESCR = fields.Float(
        string="Estoque Escritural(05 – 06), litros",
        required=True,
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    VAL_AJ_PERDA = fields.Float(
        string="Valor da Perda, em litros",
        required=True,
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    VAL_AJ_GANHO = fields.Float(
        string="Valor do ganho, em litros",
        required=True,
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    FECH_FISICO = fields.Float(
        string="Volume aferido no tanque, em litros",
        required=True,
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help=(
            "Volume aferido no tanque, em litros. Estoque de fechamento físico"
            " do tanque."
        ),
    )

    reg_1310_ids_Registro1300_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.1300",
        string="Movimentação diária de combustíveis",
        required=True,
        ondelete="cascade",
    )

    reg_1320_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.1320",
        "reg_1320_ids_Registro1310_id",
        string="1320 Volume de vendas",
        sped_card="1:N",
        sped_required="O",
    )


class Registro1320(models.Model):
    "Volume de vendas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1320"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_BICO = fields.Integer(string="Bico Ligado à Bomba", required=True)

    NR_INTERV = fields.Integer(string="Número da intervenção")

    MOT_INTERV = fields.Char(string="Motivo da Intervenção", sped_length=50)

    NOM_INTERV = fields.Char(string="Nome do Interventor", sped_length=30)

    CNPJ_INTERV = fields.Char(string="CNPJ da empresa responsável pela intervenção")

    CPF_INTERV = fields.Char(string="CPF do técnico responsável pela intervenção")

    VAL_FECHA = fields.Float(
        string="Valor da leitura final do contador",
        required=True,
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help="Valor da leitura final do contador, no fechamento do bico.",
    )

    VAL_ABERT = fields.Float(
        string="Valor da leitura inicial do contador",
        required=True,
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help="Valor da leitura inicial do contador, na abertura do bico.",
    )

    VOL_AFERI = fields.Float(
        string="Aferições da Bomba, em litros",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    VOL_VENDAS = fields.Float(
        string="Vendas (08 – 09 - 10 ) do bico ",
        required=True,
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help="Vendas (08 – 09 - 10 ) do bico , em litros",
    )

    reg_1320_ids_Registro1310_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.1310",
        string="Movimentação diária de combustíveis por tanque",
        required=True,
        ondelete="cascade",
    )


class Registro1350(models.Model):
    "Bombas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1350"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    SERIE = fields.Char(string="Número de Série da Bomba", required=True)

    FABRICANTE = fields.Char(
        string="Nome do Fabricante da Bomba", required=True, sped_length=60
    )

    MODELO = fields.Char(string="Modelo da Bomba", required=True)

    TIPO_MEDICAO = fields.Char(
        string="Identificador de medição",
        required=True,
        sped_length=1,
        help="Identificador de medição: 0 – analógico 1 – digital",
    )

    reg_1360_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.1360",
        "reg_1360_ids_Registro1350_id",
        string="1360 Lacres das bombas",
        sped_card="1:N",
        sped_required="O",
    )

    reg_1370_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.1370",
        "reg_1370_ids_Registro1350_id",
        string="1370 Bicos da bomba",
        sped_card="1:N",
        sped_required="O",
    )


class Registro1360(models.Model):
    "Lacres das bombas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1360"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    NUM_LACRE = fields.Char(
        string="Número do Lacre associado na Bomba", required=True, sped_length=20
    )

    DT_APLICACAO = fields.Date(string="Data de aplicação do Lacre", required=True)

    reg_1360_ids_Registro1350_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.1350",
        string="Bombas",
        required=True,
        ondelete="cascade",
    )


class Registro1370(models.Model):
    "Bicos da bomba"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1370"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    NUM_BICO = fields.Integer(
        string="Número sequencial do bico ligado a bomba", required=True, sped_length=3
    )

    COD_ITEM = fields.Char(
        string="Código do Produto",
        required=True,
        sped_length=60,
        help="Código do Produto, constante do registro 0200",
    )

    NUM_TANQUE = fields.Char(
        string="Tanque que armazena o combustível", required=True, sped_length=3
    )

    reg_1370_ids_Registro1350_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.1350",
        string="Bombas",
        required=True,
        ondelete="cascade",
    )


class Registro1390(models.Model):
    "Controle de produção de Usina"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1390"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_PROD = fields.Integer(
        string="Código do produto conforme tabela 5",
        required=True,
        help="Código do produto conforme tabela 5.8",
    )

    reg_1391_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.1391",
        "reg_1391_ids_Registro1390_id",
        string="1391 Produção diária da usina",
        sped_card="1:N",
        sped_required="O",
    )


class Registro1391(models.Model):
    "Produção diária da usina"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1391"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    DT_REGISTRO = fields.Date(string="Data de produção (DDMMAAAA)", required=True)

    QTD_MOID = fields.Float(
        string="Quantidade de insumo esmagado",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Quantidade de insumo esmagado (toneladas)",
    )

    ESTQ_INI = fields.Float(
        string="Estoque inicial (litros / kg)",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    QTD_PRODUZ = fields.Float(
        string="Quantidade produzida (litros / kg)",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    ENT_ANID_HID = fields.Float(
        string="Entrada de álcool anidro decorrente",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Entrada de álcool anidro decorrente da transformação do álcool "
            "hidratado ou Entrada de álcool hidratado decorrente da "
            "transformação do álcool anidro (litros)"
        ),
    )

    OUTR_ENTR = fields.Float(
        string="Outras entradas (litros / kg)",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    PERDA = fields.Float(
        string="Evaporação",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Evaporação (litros) ou Quebra de peso (kg)",
    )

    CONS = fields.Float(
        string="Consumo (litros)",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    SAI_ANI_HID = fields.Float(
        string="Saída para transformação (litros)",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    SAÍDAS = fields.Float(
        string="Saídas (litros / kg)",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    ESTQ_FIN = fields.Float(
        string="Estoque final (litros / kg)",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    ESTQ_INI_MEL = fields.Float(
        string="Estoque inicial de mel residual (kg)",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    PROD_DIA_MEL = fields.Float(
        string="Produção de mel residual",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Produção de mel residual (kg) e entradas de mel (kg)",
    )

    UTIL_MEL = fields.Float(
        string="Mel residual utilizado",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Mel residual utilizado (kg) e saídas de mel (kg)",
    )

    PROD_ALC_MEL = fields.Float(
        string="Produção de álcool",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Produção de álcool (litros) ou açúcar (kg) proveniente do mel " "residual."
        ),
    )

    OBS = fields.Char(string="Observações")

    COD_ITEM = fields.Char(
        string="insumo conforme código do item",
        required=True,
        sped_length=60,
        help="insumo conforme código do item (campo 02 do Registro 0200)",
    )

    TP_RESIDUO = fields.Integer(
        string="Tipo de resíduo produzido: 01",
        required=True,
        help=("Tipo de resíduo produzido: 01 - Bagaço de cana 02 - DDG 03 - WDG"),
    )

    QTD_RESIDUO = fields.Float(
        string="Quantidade de resíduo produzido",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Quantidade de resíduo produzido (toneladas)",
    )

    reg_1391_ids_Registro1390_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.1390",
        string="Controle de produção de Usina",
        required=True,
        ondelete="cascade",
    )


class Registro1400(models.Model):
    "Informação sobre Valor Agregado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1400"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_ITEM_IPM = fields.Char(
        string="Código do item",
        required=True,
        sped_length=60,
        help=(
            "Código do item (Tabela própria da unidade da federação (Tabela de"
            " Itens UF Índice de Participação dos Municípios) ou campo 02 do "
            "Registro 0200"
        ),
    )

    MUN = fields.Integer(string="Código do Município de origem/destino", required=True)

    VALOR = fields.Monetary(
        string="Valor mensal correspondente ao município",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )


class Registro1500(models.Model):
    """Nota fiscal/Conta de energia elétrica (código 06) - Operações
    Interestaduais"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1500"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    IND_OPER = fields.Char(
        string="Indicador do tipo de operação",
        required=True,
        help="Indicador do tipo de operação: 1- Saída",
    )

    IND_EMIT = fields.Char(
        string="Indicador do emitente do documento fiscal",
        required=True,
        help=("Indicador do emitente do documento fiscal: 0- Emissão própria;"),
    )

    COD_PART = fields.Char(
        string="Código do participante",
        required=True,
        sped_length=60,
        help=(
            "Código do participante (campo 02 do Registro 0150): - do "
            "adquirente, no caso das saídas."
        ),
    )

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        required=True,
        help="Código do modelo do documento fiscal, conforme a",
    )

    COD_SIT = fields.Integer(
        string="Código da situação do documento fiscal",
        required=True,
        help=("Código da situação do documento fiscal, conforme a Tabela 4.1.2"),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    SUB = fields.Integer(string="Subsérie do documento fiscal", sped_length=3)

    COD_CONS = fields.Char(
        string="Código de classe de consumo de energia elétrica",
        required=True,
        help=(
            "Código de classe de consumo de energia elétrica: 01 - Comercial "
            "02 - Consumo Próprio 03 - Iluminação Pública 04 - Industrial 05 -"
            " Poder Público 06 - Residencial 07 - Rural 08 - Serviço Público"
        ),
    )

    NUM_DOC = fields.Integer(
        string="Número do documento fiscal", required=True, sped_length=9
    )

    DT_DOC = fields.Date(string="Data da emissão do documento fiscal", required=True)

    DT_E_S = fields.Date(string="Data da entrada ou da saída", required=True)

    VL_DOC = fields.Monetary(
        string="Valor total do documento fiscal",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESC = fields.Monetary(
        string="Valor total do desconto",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_FORN = fields.Monetary(
        string="Valor total fornecido/consumido",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SERV_NT = fields.Monetary(
        string="Valor total dos serviços não-tributados pelo ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_TERC = fields.Monetary(
        string="Valor total cobrado em nome de terceiros",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DA = fields.Monetary(
        string="Valor total de despesas acessórias indicadas",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor total de despesas acessórias indicadas no documento fiscal"),
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor acumulado da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS = fields.Monetary(
        string="Valor acumulado do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ICMS_ST = fields.Monetary(
        string="Valor acumulado da base de cálculo",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor acumulado da base de cálculo do ICMS substituição " "tributária"),
    )

    VL_ICMS_ST = fields.Monetary(
        string="Valor acumulado do ICMS retido",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor acumulado do ICMS retido por substituição tributária",
    )

    COD_INF = fields.Char(
        string="Código da informação complementar",
        sped_length=6,
        help=(
            "Código da informação complementar do documento fiscal (campo 02 "
            "do Registro 0450)"
        ),
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    TP_LIGACAO = fields.Integer(
        string="Código de tipo de Ligação 1",
        help=("Código de tipo de Ligação 1 - Monofásico 2 - Bifásico 3 - " "Trifásico"),
    )

    COD_GRUPO_TENSAO = fields.Char(
        string="Código de grupo de tensão: 01 - A1",
        help=(
            "Código de grupo de tensão: 01 - A1 - Alta Tensão (230kV ou mais) "
            "02 - A2 - Alta Tensão (88 a 138kV) 03 - A3 - Alta Tensão (69kV) "
            "04 - A3a - Alta Tensão (30kV a 44kV) 05 - A4 - Alta Tensão (2,3kV"
            " a 25kV) 06 - AS - Alta Tensão Subterrâneo 06 07 - B1 - "
            "Residencial 07 08 - B1 - Residencial Baixa Renda 08 09 - B2 - "
            "Rural 09 10 - B2 - Cooperativa de Eletrificação Rural 11 - B2 - "
            "Serviço Público de Irrigação 12 - B3 - Demais Classes 13 - B4a - "
            "Iluminação Pública - rede de distribuição 14 - B4b - Iluminação "
            "Pública - bulbo de lâmpada"
        ),
    )

    reg_1510_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.1510",
        "reg_1510_ids_Registro1500_id",
        string="1510 Itens do documento Nota fiscal/Conta",
        sped_card="1:N",
        sped_required="O",
        help=(
            "1510 Itens do documento Nota fiscal/Conta de energia elétrica "
            "(código 06)"
        ),
    )


class Registro1510(models.Model):
    """Itens do documento Nota fiscal/Conta de energia elétrica (código 06)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1510"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    NUM_ITEM = fields.Integer(
        string="Número sequencial do item no documento fiscal",
        required=True,
        sped_length=3,
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        required=True,
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    COD_CLASS = fields.Integer(
        string="Código de classificação do item",
        required=True,
        help=(
            "Código de classificação do item de energia elétrica, conforme a "
            "Tabela 4.4.1"
        ),
    )

    QTD = fields.Float(
        string="Quantidade do item",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    UNID = fields.Char(
        string="Unidade do item",
        sped_length=6,
        help="Unidade do item (Campo 02 do registro 0190)",
    )

    VL_ITEM = fields.Monetary(
        string="Valor do item",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESC = fields.Monetary(
        string="Valor total do desconto",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_ICMS = fields.Integer(
        string="Código da Situação Tributária",
        required=True,
        help="Código da Situação Tributária, conforme a Tabela indicada no",
    )

    CFOP = fields.Integer(string="Código Fiscal de Operação e Prestação", required=True)

    VL_BC_ICMS = fields.Monetary(
        string="Valor da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_ICMS = fields.Float(
        string="Alíquota do ICMS",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_ICMS = fields.Monetary(
        string="Valor do ICMS creditado/debitado",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ICMS_ST = fields.Monetary(
        string="Valor da base de cálculo referente",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor da base de cálculo referente à substituição tributária",
    )

    ALIQ_ST = fields.Float(
        string="Alíquota do ICMS da substituição tributária",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Alíquota do ICMS da substituição tributária na unidade da "
            "federação de destino"
        ),
    )

    VL_ICMS_ST = fields.Monetary(
        string="Valor do ICMS referente à substituição tributária",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_REC = fields.Char(
        string="Indicador do tipo de receita",
        required=True,
        help=(
            "Indicador do tipo de receita: 0- Receita própria; 1- Receita de "
            "terceiros"
        ),
    )

    COD_PART = fields.Char(
        string="Código do participante receptor da receita",
        sped_length=60,
        help=(
            "Código do participante receptor da receita, terceiro da operação "
            "(campo 02 do Registro 0150)"
        ),
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_CTA = fields.Char(
        string="Código", help="Código da conta analítica contábil debitada/creditada"
    )

    reg_1510_ids_Registro1500_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.1500",
        string="Nota fiscal/Conta de energia elétrica",
        required=True,
        ondelete="cascade",
        help=(
            "Nota fiscal/Conta de energia elétrica (código 06) - Operações "
            "Interestaduais"
        ),
    )


class Registro1600(models.Model):
    "Total das operações com cartão de crédito e/ou débito"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1600"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_PART = fields.Char(
        string="Código do participante",
        required=True,
        sped_length=60,
        help=(
            "Código do participante (campo 02 do Registro 0150): identificação"
            " da instituição financeira e/ou de pagamento"
        ),
    )

    TOT_CREDITO = fields.Float(
        string="Valor total das operações de crédito realizadas",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Valor total das operações de crédito realizadas no período",
    )

    TOT_DEBITO = fields.Float(
        string="Valor total das operações de débito realizadas",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Valor total das operações de débito realizadas no período",
    )


class Registro1601(models.Model):
    "Operações com instrumentos de pagamentos eletrônicos"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1601"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_PART_IP = fields.Char(
        string="Código do participante",
        required=True,
        sped_length=60,
        help=(
            "Código do participante (campo 02 do Registro 0150): identificação"
            " da instituição que efetuou o pagamento"
        ),
    )

    COD_PART_IT = fields.Char(
        string="Código do participante (COD_PART_IT)",
        sped_length=60,
        help=(
            "Código do participante (campo 02 do Registro 0150): identificação"
            " do intermediador da transação"
        ),
    )

    TOT_VS = fields.Float(
        string="Valor total bruto das vendas e/ou prestações",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Valor total bruto das vendas e/ou prestações de serviços no campo"
            " de incidência do ICMS, incluindo operações com imunidade do "
            "imposto."
        ),
    )

    TOT_ISS = fields.Float(
        string="Valor total bruto das prestações de serviços",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Valor total bruto das prestações de serviços no campo de "
            "incidência do ISS"
        ),
    )

    TOT_OUTROS = fields.Float(
        string="Valor total de operações deduzido dos valores",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Valor total de operações deduzido dos valores dos campos TOT_VS e"
            " TOT_ISS."
        ),
    )


class Registro1700(models.Model):
    "Documentos fiscais utilizados"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1700"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_DISP = fields.Char(
        string="Código dispositivo autorizado: 00",
        required=True,
        help=(
            "Código dispositivo autorizado: 00 - Formulário de Segurança – "
            "impressor autônomo 01 - FS-DA – Formulário de Segurança para "
            "Impressão de DANFE 02 – Formulário de segurança - NF-e 03 - "
            "Formulário Contínuo 04 – Blocos 05 - Jogos Soltos"
        ),
    )

    COD_MOD = fields.Char(
        string="Código do modelo do dispositivo autorizado",
        required=True,
        help=("Código do modelo do dispositivo autorizado, conforme a Tabela " "4.1.1"),
    )

    SER = fields.Char(string="Série do dispositivo autorizado", sped_length=4)

    SUB = fields.Char(string="Subsérie do dispositivo autorizado", sped_length=3)

    NUM_DOC_INI = fields.Integer(
        string="Número do dispositivo autorizado",
        required=True,
        sped_length=12,
        help="Número do dispositivo autorizado (utilizado) inicial",
    )

    NUM_DOC_FIN = fields.Integer(
        string="Número do dispositivo autorizado (NUM_DOC_FIN)",
        required=True,
        sped_length=12,
        help="Número do dispositivo autorizado (utilizado) final",
    )

    NUM_AUT = fields.Integer(
        string="Número da autorização",
        required=True,
        sped_length=60,
        help="Número da autorização, conforme dispositivo autorizado",
    )

    reg_1710_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.1710",
        "reg_1710_ids_Registro1700_id",
        string="1710 Documentos fiscais cancelados/inutilizados",
        sped_card="1:N",
        sped_required="O",
    )


class Registro1710(models.Model):
    "Documentos fiscais cancelados/inutilizados"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1710"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    NUM_DOC_INI = fields.Integer(
        string="Número do dispositivo autorizado",
        required=True,
        sped_length=12,
        help="Número do dispositivo autorizado (inutilizado) inicial",
    )

    NUM_DOC_FIN = fields.Integer(
        string="Número do dispositivo autorizado (NUM_DOC_FIN)",
        required=True,
        sped_length=12,
        help="Número do dispositivo autorizado (inutilizado) final",
    )

    reg_1710_ids_Registro1700_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.1700",
        string="Documentos fiscais utilizados",
        required=True,
        ondelete="cascade",
    )


class Registro1800(models.Model):
    "DCTA - Demonstrativo de crédito do ICMS sobre transporte aéreo"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1800"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    VL_CARGA = fields.Monetary(
        string="Valor das prestações cargas",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor das prestações cargas (Tributado)",
    )

    VL_PASS = fields.Monetary(
        string="Valor das prestações passageiros/cargas",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor das prestações passageiros/cargas (Não Tributado)",
    )

    VL_FAT = fields.Monetary(
        string="Valor total do faturamento (2+3)",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_RAT = fields.Float(
        string="Índice para rateio(2 / 4)",
        required=True,
        sped_length=8,
        xsd_type="TDec_1606",
        digits=(
            16,
            6,
        ),
    )

    VL_ICMS_ANT = fields.Monetary(
        string="Valor total dos créditos do ICMS",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor da base de cálculo do ICMS",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS_APUR = fields.Monetary(
        string="Valor do ICMS apurado no cálculo",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor do ICMS apurado no cálculo (5 x 6)",
    )

    VL_BC_ICMS_APUR = fields.Monetary(
        string="Valor da base de cálculo do ICMS apurada",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor da base de cálculo do ICMS apurada (5 x 7)",
    )

    VL_DIF = fields.Monetary(
        string="Valor da diferença a ser levada a estorno",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor da diferença a ser levada a estorno de crédito na",
    )


class Registro1900(models.Model):
    "Indicador de Sub-apuração do ICMS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1900"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    IND_APUR_ICMS = fields.Char(
        string="Indicador de outra apuração do ICMS",
        required=True,
        help=(
            "Indicador de outra apuração do ICMS: 3 – APURAÇÃO 1; 4 – APURAÇÃO"
            " 2; 5 – APURAÇÃO 3; 6 – APURAÇÃO 4; 7 – APURAÇÃO 5; 8 – APURAÇÃO "
            "6."
        ),
    )

    DESCR_COMPL_OUT_APUR = fields.Char(
        string="Descrição complementar de Outra Apuração do ICMS", required=True
    )

    reg_1910_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.1910",
        "reg_1910_ids_Registro1900_id",
        string="1910 Período da Sub-apuração do ICMS",
        sped_card="1:N",
        sped_required="O",
    )


class Registro1910(models.Model):
    "Período da Sub-apuração do ICMS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1910"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    DT_INI = fields.Date(string="Data inicial da sub-apuração", required=True)

    DT_FIN = fields.Date(string="Data final da sub-apuração", required=True)

    reg_1910_ids_Registro1900_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.1900",
        string="Indicador de Sub-apuração do ICMS",
        required=True,
        ondelete="cascade",
    )

    reg_1920_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.1920",
        "reg_1920_ids_Registro1910_id",
        string="1920 Sub-apuração do ICMS",
        sped_card="1:1",
        sped_required="O",
    )


class Registro1920(models.Model):
    "Sub-apuração do ICMS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1920"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    VL_TOT_TRANSF_DEBITOS_OA = fields.Monetary(
        string="Valor total dos débitos por “Saídas e prestações",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total dos débitos por “Saídas e prestações com débito do " "imposto”"
        ),
    )

    VL_TOT_AJ_DEBITOS_OA = fields.Monetary(
        string="Valor total de “Ajustes a débito”",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ESTORNOS_CRED_OA = fields.Monetary(
        string="Valor total de Ajustes “Estornos de créditos”",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_TOT_TRANSF_CREDITOS_OA = fields.Monetary(
        string="Valor total dos créditos por “Entradas",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total dos créditos por “Entradas e aquisições com crédito "
            "do imposto”"
        ),
    )

    VL_TOT_AJ_CREDITOS_OA = fields.Monetary(
        string="Valor total de “Ajustes a crédito”",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ESTORNOS_DEB_OA = fields.Monetary(
        string="Valor total de Ajustes “Estornos de Débitos”",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SLD_CREDOR_ANT_OA = fields.Monetary(
        string="Valor total de “Saldo credor do período anterior”",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SLD_APURADO_OA = fields.Monetary(
        string="Valor do saldo devedor apurado",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_TOT_DED = fields.Monetary(
        string="Valor total de “Deduções”",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS_RECOLHER_OA = fields.Monetary(
        string="Valor total de 'ICMS a recolher",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor total de 'ICMS a recolher (09-10)",
    )

    VL_SLD_CREDOR_TRANSP_OA = fields.Monetary(
        string="Valor total de “Saldo credor a transportar",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor total de “Saldo credor a transportar para o período " "seguinte”"),
    )

    DEB_ESP_OA = fields.Float(
        string="Valores recolhidos ou a recolher",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Valores recolhidos ou a recolher, extra- apuração.",
    )

    reg_1920_ids_Registro1910_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.1910",
        string="Período da Sub-apuração do ICMS",
        required=True,
        ondelete="cascade",
    )

    reg_1921_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.1921",
        "reg_1921_ids_Registro1920_id",
        string="1921 Ajuste/Benefício/Incentivo da Sub- apuração",
        sped_card="1:N",
        sped_required="O",
        help="1921 Ajuste/Benefício/Incentivo da Sub- apuração do ICMS",
    )

    reg_1925_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.1925",
        "reg_1925_ids_Registro1920_id",
        string="1925 Informações Adicionais",
        sped_card="1:N",
        sped_required="O",
        help=(
            "1925 Informações Adicionais da Sub- apuração – Valores " "Declaratórios"
        ),
    )

    reg_1926_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.1926",
        "reg_1926_ids_Registro1920_id",
        string="1926 Obrigações",
        sped_card="1:N",
        sped_required="O",
        help=(
            "1926 Obrigações do ICMS A Recolher – Operações referentes à Sub-"
            "apuração"
        ),
    )


class Registro1921(models.Model):
    "Ajuste/Benefício/Incentivo da Sub- apuração do ICMS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1921"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 5

    COD_AJ_APUR = fields.Char(
        string="Código do ajuste da SUB-APURAÇÃO e dedução",
        required=True,
        help=(
            "Código do ajuste da SUB-APURAÇÃO e dedução, conforme a Tabela "
            "indicada no item 5.1.1."
        ),
    )

    DESCR_COMPL_AJ = fields.Char(string="Descrição complementar do ajuste da apuração")

    VL_AJ_APUR = fields.Monetary(
        string="Valor do ajuste da apuração",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_1921_ids_Registro1920_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.1920",
        string="Sub-apuração do ICMS",
        required=True,
        ondelete="cascade",
    )

    reg_1922_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.1922",
        "reg_1922_ids_Registro1921_id",
        string="1922 Informações Adicionais dos Ajustes",
        sped_card="1:N",
        sped_required="O",
        help=("1922 Informações Adicionais dos Ajustes da Sub-apuração do ICMS"),
    )

    reg_1923_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.1923",
        "reg_1923_ids_Registro1921_id",
        string="1923 Informações Adicionais dos Ajustes",
        sped_card="1:N",
        sped_required="O",
        help=(
            "1923 Informações Adicionais dos Ajustes da Sub-apuração do ICMS –"
            " Identificação dos Documentos Fiscais"
        ),
    )


class Registro1922(models.Model):
    "Informações Adicionais dos Ajustes da Sub-apuração do ICMS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1922"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 6

    NUM_DA = fields.Char(
        string="Número do documento de arrecadação estadual",
        help="Número do documento de arrecadação estadual, se houver",
    )

    NUM_PROC = fields.Char(
        string="Número do processo ao qual o ajuste está vinculado",
        sped_length=15,
        help=("Número do processo ao qual o ajuste está vinculado, se houver"),
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo",
        help=(
            "Indicador da origem do processo: 0- SEFAZ; 1- Justiça Federal; 2-"
            " Justiça Estadual; 9- Outros"
        ),
    )

    PROC = fields.Char(
        string="Descrição resumida do processo que embasou",
        help="Descrição resumida do processo que embasou o lançamento",
    )

    TXT_COMPL = fields.Char(string="Descrição complementar")

    reg_1922_ids_Registro1921_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.1921",
        string="Ajuste/Benefício/Incentivo da Sub- apuração",
        required=True,
        ondelete="cascade",
        help="Ajuste/Benefício/Incentivo da Sub- apuração do ICMS",
    )


class Registro1923(models.Model):
    """Informações Adicionais dos Ajustes da Sub-apuração do ICMS –
    Identificação dos Documentos Fiscais"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1923"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 6

    COD_PART = fields.Char(
        string="Código do participante",
        required=True,
        sped_length=60,
        help=(
            "Código do participante (campo 02 do Registro 0150): - do emitente"
            " do documento ou do remetente das mercadorias, no caso de "
            "entradas; - do adquirente, no caso de saídas"
        ),
    )

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        required=True,
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    SUB = fields.Integer(string="Subsérie do documento fiscal", sped_length=3)

    NUM_DOC = fields.Integer(
        string="Número do documento fiscal", required=True, sped_length=9
    )

    DT_DOC = fields.Date(string="Data da emissão do documento fiscal", required=True)

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    VL_AJ_ITEM = fields.Monetary(
        string="Valor do ajuste para a operação/item",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CHV_DOCe = fields.Integer(string="Chave do Documento Eletrônico")

    reg_1923_ids_Registro1921_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.1921",
        string="Ajuste/Benefício/Incentivo da Sub- apuração",
        required=True,
        ondelete="cascade",
        help="Ajuste/Benefício/Incentivo da Sub- apuração do ICMS",
    )


class Registro1925(models.Model):
    "Informações Adicionais da Sub- apuração – Valores Declaratórios"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1925"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 5

    COD_INF_ADIC = fields.Char(
        string="Código da informação adicional conforme tabela",
        required=True,
        help=(
            "Código da informação adicional conforme tabela a ser definida "
            "pelas SEFAZ, conforme tabela definida no item 5.2."
        ),
    )

    VL_INF_ADIC = fields.Monetary(
        string="Valor referente à informação adicional",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    DESCR_COMPL_AJ = fields.Char(string="Descrição complementar do ajuste")

    reg_1925_ids_Registro1920_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.1920",
        string="Sub-apuração do ICMS",
        required=True,
        ondelete="cascade",
    )


class Registro1926(models.Model):
    "Obrigações do ICMS A Recolher – Operações referentes à Sub-apuração"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1926"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 5

    COD_OR = fields.Char(
        string="Código da obrigação a recolher",
        required=True,
        help="Código da obrigação a recolher, conforme a Tabela 5.4",
    )

    VL_OR = fields.Monetary(
        string="Valor da obrigação a recolher",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    DT_VCTO = fields.Date(string="Data de vencimento da obrigação", required=True)

    COD_REC = fields.Char(
        string="Código de receita referente à obrigação",
        required=True,
        help=(
            "Código de receita referente à obrigação, próprio da unidade da "
            "federação, conforme legislação estadual,"
        ),
    )

    NUM_PROC = fields.Char(
        string="Número do processo ou auto de infração",
        sped_length=15,
        help=(
            "Número do processo ou auto de infração ao qual a obrigação está "
            "vinculada, se houver."
        ),
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo",
        help=(
            "Indicador da origem do processo: 0- SEFAZ; 1- Justiça Federal; 2-"
            " Justiça Estadual; 9- Outros"
        ),
    )

    PROC = fields.Char(
        string="Descrição resumida do processo que embasou",
        help="Descrição resumida do processo que embasou o lançamento",
    )

    TXT_COMPL = fields.Char(string="Descrição complementar das obrigações a recolher")

    MES_REF = fields.Integer(
        string="Informe o mês de referência no formato “mmaaaa”", required=True
    )

    reg_1926_ids_Registro1920_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.1920",
        string="Sub-apuração do ICMS",
        required=True,
        ondelete="cascade",
    )


class Registro1960(models.Model):
    """GIAF 1 - Guia de informação e apuração de incentivos fiscais e
    financeiros: indústria (crédito presumido)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1960"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    IND_AP = fields.Integer(
        string="Indicador da sub-apuração por tipo de benefício",
        required=True,
        help=(
            "Indicador da sub-apuração por tipo de benefício (conforme tabela " "4.7.1)"
        ),
    )

    G1_01 = fields.Float(
        string="Percentual de crédito presumido",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    G1_02 = fields.Float(
        string="Saídas não incentivadas de PI",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    G1_03 = fields.Float(
        string="Saídas incentivadas de PI",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    G1_04 = fields.Float(
        string="Saídas incentivadas de PI para fora do Nordeste",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    G1_05 = fields.Float(
        string="Saldo devedor do ICMS antes das deduções",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Saldo devedor do ICMS antes das deduções do incentivo",
    )

    G1_06 = fields.Float(
        string="Saldo devedor do ICMS relativo à faixa incentivada",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Saldo devedor do ICMS relativo à faixa incentivada de PI",
    )

    G1_07 = fields.Float(
        string="Crédito presumido nas saídas incentivadas de PI",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Crédito presumido nas saídas incentivadas de PI para fora do " "Nordeste"
        ),
    )

    G1_08 = fields.Float(
        string="Saldo devedor relativo à faixa incentivada",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Saldo devedor relativo à faixa incentivada de PI após o crédito "
            "presumido nas saídas para fora do Nordeste"
        ),
    )

    G1_09 = fields.Float(
        string="Crédito presumido",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    G1_10 = fields.Float(
        string="Dedução de incentivo da Indústria",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Dedução de incentivo da Indústria (crédito presumido)",
    )

    G1_11 = fields.Float(
        string="Saldo devedor do ICMS após deduções",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )


class Registro1970(models.Model):
    """GIAF 3 - Guia de informação e apuração de incentivos fiscais e
    financeiros: importação (diferimento na entrada e crédito presumido na
    saída subsequente)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1970"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    IND_AP = fields.Integer(
        string="Indicador da sub-apuração por tipo de benefício",
        required=True,
        help=(
            "Indicador da sub-apuração por tipo de benefício (conforme tabela " "4.7.1)"
        ),
    )

    G3_01 = fields.Float(
        string="Importações com ICMS diferido",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    G3_02 = fields.Float(
        string="ICMS diferido nas importações",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    G3_03 = fields.Float(
        string="Saídas não incentivadas de PI",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    G3_04 = fields.Float(
        string="Percentual de incentivo nas saídas",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Percentual de incentivo nas saídas para fora do Estado",
    )

    G3_05 = fields.Float(
        string="Saídas incentivadas de PI para fora do Estado",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    G3_06 = fields.Float(
        string="ICMS das saídas incentivadas de PI",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="ICMS das saídas incentivadas de PI para fora do Estado",
    )

    G3_07 = fields.Float(
        string="Crédito presumido nas saídas para fora do Estado",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    G3_T = fields.Float(
        string="Dedução de incentivo da Importação",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Dedução de incentivo da Importação (crédito presumido)",
    )

    G3_08 = fields.Float(
        string="Saldo devedor do ICMS antes das deduções",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Saldo devedor do ICMS antes das deduções do incentivo",
    )

    G3_09 = fields.Float(
        string="Saldo devedor do ICMS após deduções do incentivo",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    reg_1975_ids = fields.One2many(
        "l10n_br_sped.efd_icms_ipi.17.1975",
        "reg_1975_ids_Registro1970_id",
        string="1975 GIAF 3",
        sped_card="1:4",
        sped_required="O",
        help=(
            "1975 GIAF 3 - Guia de informação e apuração de incentivos fiscais"
            " e financeiros: importação (saídas internas por faixa de "
            "alíquota)"
        ),
    )


class Registro1975(models.Model):
    """GIAF 3 - Guia de informação e apuração de incentivos fiscais e
    financeiros: importação (saídas internas por faixa de alíquota)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1975"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    ALIQ_IMP_BASE = fields.Float(
        string="Alíquota incidente sobre as importações-base",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    G3_10 = fields.Float(
        string="Saídas incentivadas de PI",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    G3_11 = fields.Float(
        string="Importações-base para o crédito presumido",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    G3_12 = fields.Float(
        string="Crédito presumido nas saídas internas",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    reg_1975_ids_Registro1970_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_icms_ipi.17.1970",
        string="GIAF 3",
        required=True,
        ondelete="cascade",
        help=(
            "GIAF 3 - Guia de informação e apuração de incentivos fiscais e "
            "financeiros: importação (diferimento na entrada e crédito "
            "presumido na saída subsequente)"
        ),
    )


class Registro1980(models.Model):
    """GIAF 4 - Guia de informação e apuração de incentivos fiscais e
    financeiros: central de distribuição (entradas/saídas)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.1980"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    IND_AP = fields.Integer(
        string="Indicador da sub-apuração por tipo de benefício",
        required=True,
        help=(
            "Indicador da sub-apuração por tipo de benefício (conforme Tabela " "4.7.1)"
        ),
    )

    G4_01 = fields.Float(
        string="Entradas (percentual de incentivo)",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    G4_02 = fields.Float(
        string="Entradas não incentivadas de PI",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    G4_03 = fields.Float(
        string="Entradas incentivadas de PI",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    G4_04 = fields.Float(
        string="Saídas (percentual de incentivo)",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    G4_05 = fields.Float(
        string="Saídas não incentivadas de PI",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    G4_06 = fields.Float(
        string="Saídas incentivadas de PI",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    G4_07 = fields.Float(
        string="Saldo devedor do ICMS antes das deduções",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Saldo devedor do ICMS antes das deduções do incentivo (PI e itens"
            " não incentivados)"
        ),
    )

    G4_08 = fields.Float(
        string="Crédito presumido nas entradas incentivadas de PI",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    G4_09 = fields.Float(
        string="Crédito presumido nas saídas incentivadas de PI",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    G4_10 = fields.Float(
        string="Dedução de incentivo da Central de Distribuição",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=("Dedução de incentivo da Central de Distribuição (entradas/saídas)"),
    )

    G4_11 = fields.Float(
        string="Saldo devedor do ICMS após deduções do incentivo",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    G4_12 = fields.Float(
        string="Índice de recolhimento da central de distribuição",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )


class Registro9900(models.Model):
    "Registros do Arquivo"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_icms_ipi.17.9900"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    REG_BLC = fields.Char(
        string="Registro que será totalizado no próximo campo",
        required=True,
        sped_length=4,
    )

    QTD_REG_BLC = fields.Integer(
        string="Total de registros do tipo informado",
        required=True,
        help="Total de registros do tipo informado no campo anterior.",
    )
