# Copyright 2022 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo

"""
STRUCTURE SPED EFD_PIS_COFINS

<BLOCO 0>

  - 0035 IDENTIFICAÇÃO DA SOCIEDADE EM CONTA DE PARTICIPAÇÃO

  - 0100 DADOS DO CONTABILISTA

  - 0110 REGIMES DE APURAÇÃO DA CONTRIBUIÇÃO SOCIAL E DE APROPRIAÇÃO DE CRÉDITO
    - 0111 Tabela de Receita Bruta Mensal para Fins de Rateio de Créditos Comuns

  - 0120 IDENTIFICAÇÃO DE EFD-CONTRIBUIÇÕES SEM DADOS A ESCRITURAR

  - 0140 TABELA DE CADASTRO DE ESTABELECIMENTO
    - 0145 Regime de Apuração da Contribuição Previdenciária sobre a Receita Bruta
    ≡ 0150 Tabela de Cadastro do Participante
    ≡ 0190 Identificação das Unidades de Medida
    ≡ 0200 Tabela de Identificação do Item
      ≡ 0205 
      - 0206 
      - 0208 
    ≡ 0400 Tabela de Natureza da Operação/ Prestação
    ≡ 0450 Tabela de Informação Complementar do Documento Fiscal

  - 0500 PLANO DE CONTAS CONTÁBEIS – CONTAS INFORMADAS

  - 0600 CENTRO DE CUSTOS

  - 0900 COMPOSIÇÃO DAS RECEITAS DO PERÍODO – RECEITA BRUTA E DEMAIS RECEITAS

<BLOCO A>

  - A010 IDENTIFICAÇÃO DO ESTABELECIMENTO
    ≡ A100 Documento – Nota Fiscal de Serviço
      ≡ A110 
      ≡ A111 
      ≡ A120 
      ≡ A170 

<BLOCO C>

  - C010 IDENTIFICAÇÃO DO ESTABELECIMENTO
    ≡ C100 Documento - Nota Fiscal (código 01)
      ≡ C110 
      ≡ C111 
      ≡ C120 
      ≡ C170 
      ≡ C175 
    ≡ C180 Consolidação de Notas Fiscais Eletrônicas Emitidas pela Pessoa Jurídica
      ≡ C181 
      ≡ C185 
      ≡ C188 
    ≡ C190 Consolidação de Notas Fiscais Eletrônicas
      ≡ C191 
      ≡ C195 
      ≡ C198 
      ≡ C199 
    ≡ C380 Nota Fiscal de Venda a Consumidor
      ≡ C381 
      ≡ C385 
    ≡ C395 Notas Fiscais de Venda a Consumidor
      ≡ C396 
    ≡ C400 Equipamento ECF (códigos 02 e 2D)
      ≡ C405 
        ≡ C481 
        ≡ C485 
      ≡ C489 
    ≡ C490 Consolidação de Documentos Emitidos por ECF
      ≡ C491 
      ≡ C495 
      ≡ C499 
    ≡ C500 Nota Fiscal/Conta de Energia Elétrica
      ≡ C501 
      ≡ C505 
      ≡ C509 
    ≡ C600 Consolidação Diária de Notas Fiscais/Contas de Energia Elétrica
      ≡ C601 
      ≡ C605 
      ≡ C609 
    ≡ C800 Cupom Fiscal Eletrônico – CF-e
      ≡ C810 
      ≡ C820 
      ≡ C830 
    ≡ C860 Identificação do Equipamento SAT- CF-e
      ≡ C870 
      ≡ C880 
      ≡ C890 

<BLOCO D>

  - D010 IDENTIFICAÇÃO DO ESTABELECIMENTO
    ≡ D100 Aquisição de Serviços de Transportes
      ≡ D101 
      ≡ D105 
      ≡ D111 
    ≡ D200 Resumo da Escrituração Diária – Prestação de Serviços de Transportes
      ≡ D201 
      ≡ D205 
      ≡ D209 
    ≡ D300 Resumo da Escrituração Diária
      ≡ D309 
    ≡ D350 Resumo Diário de Cupom Fiscal Emitido por ECF
      ≡ D359 
    ≡ D500 Nota Fiscal de Serviço de Comunicação
      ≡ D501 
      ≡ D505 
      ≡ D509 
    ≡ D600 Consolidação da Prestação de Serviços – Notas de Serviço de Comunicação
      ≡ D601 
      ≡ D605 
      ≡ D609 

<BLOCO F>

  - F010 IDENTIFICAÇÃO DO ESTABELECIMENTO
    ≡ F100 Demais Documentos e Operações Geradoras de Contribuição e Créditos
      ≡ F111 
    ≡ F120 Bens Incorporados ao Ativo Imobilizado – Operações Geradoras de Créditos com base nos Encargos
      ≡ F129 
    ≡ F130 Bens Incorporados ao Ativo Imobilizado – Operações Geradoras de Créditos com base no Valor
      ≡ F139 
    ≡ F150 Crédito Presumido sobre Estoque de Abertura
    ≡ F200 Operações da Atividade Imobiliária – Unidade Imobiliária Vendida
      - F205 
      ≡ F210 
      ≡ F211 
    ≡ F500 Consolidação das Operações da Pessoa Jurídica Submetida ao Regime de Tributação com Base
      ≡ F509 
    ≡ F510 Consolidação das Operações da Pessoa Jurídica Submetida ao Regime de Tributação com Base
      ≡ F519 
    ≡ F525 Composição da Receita Escriturada no Período – Detalhamento da Receita Recebida pelo Regime de Caixa
    ≡ F550 Consolidação das Operações da Pessoa Jurídica Submetida ao Regime de Tributação com Base
      ≡ F559 
    ≡ F560 Consolidação das Operações da Pessoa Jurídica Submetida ao Regime de Tributação com Base
      ≡ F569 
    ≡ F600 Contribuição Retida na Fonte
    ≡ F700 Deduções Diversas
    ≡ F800 Créditos Decorrentes de Eventos de Incorporação

<BLOCO I>

  - I010 IDENTIFICAÇÃO DA PESSOA JURÍDICA
    ≡ I100 Consolidação das Operações do Período
      ≡ I199 
      ≡ I200 
        ≡ I299 
        ≡ I300 
          ≡ I399 

<BLOCO M>

  - M100 CRÉDITO DE PIS/PASEP RELATIVO AO PERÍODO
    ≡ M105 Detalhamento da Base de Cálculo do Crédito Apurado no Período – PIS/PASEP
    ≡ M110 Ajustes do Crédito de PIS/PASEP Apurado
      ≡ M115 

  - M200 CONSOLIDAÇÃO DA CONTRIBUIÇÃO PARA O PIS/PASEP DO PERÍODO
    ≡ M205 Contribuição para o PIS/Pasep a Recolher – Detalhamento por Código de Receita
    ≡ M210 Detalhamento da Contribuição para o PIS/PASEP do Período
      - M211 
      ≡ M215 
      ≡ M220 
        ≡ M225 
      ≡ M230 

  - M300 CONTRIBUIÇÃO DE PIS/PASEP DIFERIDA EM PERÍODOS ANTERIORES

  - M350 PIS/PASEP - FOLHA DE SALÁRIOS

  - M400 RECEITAS ISENTAS
    ≡ M410 Detalhamento das Receitas Isentas

  - M500 CRÉDITO DE COFINS RELATIVO AO PERÍODO
    ≡ M505 Detalhamento da Base de Cálculo do Crédito Apurado no Período – COFINS
    ≡ M510 Ajustes do Crédito de COFINS Apurado
      ≡ M515 

  - M600 CONSOLIDAÇÃO DA CONTRIBUIÇÃO PARA A SEGURIDADE SOCIAL
    ≡ M605 Contribuição para a Seguridade Social
    ≡ M610 Detalhamento da Contribuição para a Seguridade Social
      - M611 
      ≡ M615 
      ≡ M620 
        ≡ M625 
      ≡ M630 

  - M700 COFINS DIFERIDA EM PERÍODOS ANTERIORES – VALORES A PAGAR NO PERÍODO

  - M800 RECEITAS ISENTAS
    ≡ M810 Detalhamento das Receitas Isentas

<BLOCO P>

  - P010 IDENTIFICAÇÃO DO ESTABELECIMENTO
    ≡ P100 Contribuição Previdenciária sobre a Receita Bruta
      ≡ P110 
      ≡ P199 

  - P200 CONSOLIDAÇÃO DA CONTRIBUIÇÃO PREVIDENCIÁRIA SOBRE A RECEITA BRUTA
    ≡ P210 Ajuste da Contribuição Previdenciária Apurada sobre a Receita Bruta

<BLOCO 1>

  - 1010 PROCESSO REFERENCIADO – AÇÃO JUDICIAL
    ≡ 1011 Detalhamento das Contribuições com Exigibilidade Suspensa

  - 1020 PROCESSO REFERENCIADO – PROCESSO ADMINISTRATIVO

  - 1050 DETALHAMENTO DOS AJUSTES DA BASE DE CÁLCULO MENSAL DE PIS/PASEP E COFINS – VALORES EXTRA APURAÇÃO

  - 1100 CONTROLE DE CRÉDITOS FISCAIS – PIS/PASEP
    ≡ 1101 Apuração de Crédito Extemporâneo
      - 1102 

  - 1200 CONTRIBUIÇÃO SOCIAL EXTEMPORÂNEA – PIS/PASEP
    ≡ 1210 Detalhamento da Contribuição Social Extemporânea – PIS/PASEP
    ≡ 1220 Demonstração do Crédito a Descontar da Contribuição Extemporânea – PIS/PASEP

  - 1300 CONTROLE DOS VALORES RETIDOS NA FONTE – PIS/PASEP

  - 1500 CONTROLE DE CRÉDITOS FISCAIS – COFINS
    ≡ 1501 Apuração de Crédito Extemporâneo
      - 1502 

  - 1600 CONTRIBUIÇÃO SOCIAL EXTEMPORÂNEA – COFINS
    ≡ 1610 Detalhamento da Contribuição Social Extemporânea – COFINS
    ≡ 1620 Demonstração do Crédito a Descontar da Contribuição Extemporânea – COFINS

  - 1700 CONTROLE DOS VALORES RETIDOS NA FONTE – COFINS

  - 1800 INCORPORAÇÃO IMOBILIÁRIA – RET
    ≡ 1809 Processo Referenciado

  - 1900 CONSOLIDAÇÃO DOS DOCUMENTOS EMITIDOS POR PESSOA JURÍDICA SUBMETIDA AO REGIME DE TRIBUTAÇÃO COM BASE

<BLOCO 9>

  - 9900 REGISTROS DO ARQUIVO
"""

import textwrap
from odoo import fields, models
from . import sped_models


class Registro0000(models.Model):
    "Abertura do Arquivo Digital e Identificação da Pessoa Jurídica"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.0000"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 0

    COD_VER = fields.Integer(
        string="Código da versão do leiaute conforme a tabela 3",
        required=True,
        help="Código da versão do leiaute conforme a tabela 3.1.1.",
    )

    TIPO_ESCRIT = fields.Integer(
        string="Tipo de escrituração: 0",
        required=True,
        help="Tipo de escrituração: 0 - Original; 1 – Retificadora.",
    )

    IND_SIT_ESP = fields.Integer(
        string="Indicador de situação especial: 0",
        help=(
            "Indicador de situação especial: 0 - Abertura 1 - Cisão 2 - Fusão "
            "3 - Incorporação 4 – Encerramento"
        ),
    )

    NUM_REC_ANTERIOR = fields.Char(
        string="Número do Recibo da Escrituração anterior",
        help=(
            "Número do Recibo da Escrituração anterior a ser retificada, "
            "utilizado quando TIPO_ESCRIT for igual a 1"
        ),
    )

    DT_INI = fields.Date(
        string="Data inicial das informações contidas no arquivo", required=True
    )

    DT_FIN = fields.Date(
        string="Data final das informações contidas no arquivo", required=True
    )

    NOME = fields.Char(
        string="Nome empresarial da pessoa jurídica", required=True, sped_length=100
    )

    CNPJ = fields.Char(
        string="Número de inscrição do estabelecimento matriz",
        required=True,
        help=(
            "Número de inscrição do estabelecimento matriz da pessoa jurídica "
            "no CNPJ."
        ),
    )

    UF = fields.Char(
        string="Sigla da Unidade da Federação da pessoa jurídica", required=True
    )

    COD_MUN = fields.Integer(
        string="Código do município do domicílio fiscal",
        required=True,
        help=(
            "Código do município do domicílio fiscal da pessoa jurídica, "
            "conforme a tabela IBGE"
        ),
    )

    SUFRAMA = fields.Char(string="Inscrição da pessoa jurídica na Suframa")

    IND_NAT_PJ = fields.Integer(
        string="Indicador da natureza da pessoa jurídica",
        help=(
            "Indicador da natureza da pessoa jurídica: 00 – Pessoa jurídica em"
            " geral 01 – Sociedade cooperativa 02 – Entidade sujeita ao "
            "PIS/Pasep exclusivamente com base na Folha de Salários"
        ),
    )

    IND_ATIV = fields.Integer(
        string="Indicador de tipo de atividade preponderante",
        required=True,
        sped_length=1,
        help=(
            "Indicador de tipo de atividade preponderante: 0 – Industrial ou "
            "equiparado a industrial; 1 – Prestador de serviços; 2 - Atividade"
            " de comércio; 3 – Pessoas jurídicas referidas nos §§ 6º, 8º e 9º "
            "do art. 3º da Lei nº 9.718, de 1998; 4 – Atividade imobiliária; 9"
            " – Outros."
        ),
    )


class Registro0035(models.Model):
    "Identificação da Sociedade em Conta de Participação - SCP"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.0035"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_SCP = fields.Integer(string="Identificação da SCP")

    DESC_SCP = fields.Char(string="Descrição da SCP")

    INF_COMP = fields.Char(string="Informação Complementar")


class Registro0100(models.Model):
    "Dados do Contabilista"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.0100"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    NOME = fields.Char(string="Nome do contabilista", required=True, sped_length=100)

    CPF = fields.Char(
        string="Número de inscrição do contabilista no CPF", required=True
    )

    CRC = fields.Char(
        string="Número de inscrição do contabilista",
        required=True,
        sped_length=15,
        help=(
            "Número de inscrição do contabilista no Conselho Regional de "
            "Contabilidade."
        ),
    )

    CNPJ = fields.Char(
        string="Número de inscrição do escritório de contabilidade",
        help=(
            "Número de inscrição do escritório de contabilidade no CNPJ, se " "houver."
        ),
    )

    CEP = fields.Integer(string="Código de Endereçamento Postal")

    END = fields.Char(string="Logradouro e endereço do imóvel", sped_length=60)

    NUM = fields.Char(string="Número do imóvel")

    COMPL = fields.Char(string="Dados complementares do endereço", sped_length=60)

    BAIRRO = fields.Char(string="Bairro em que o imóvel está situado", sped_length=60)

    FONE = fields.Char(string="Número do telefone", sped_length=11)

    FAX = fields.Char(string="Número do fax", sped_length=11)

    EMAIL = fields.Char(string="Endereço do correio eletrônico")

    COD_MUN = fields.Integer(
        string="Código do município", help="Código do município, conforme tabela IBGE."
    )


class Registro0110(models.Model):
    """Regimes de Apuração da Contribuição Social e de Apropriação de
    Crédito"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.0110"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_INC_TRIB = fields.Integer(
        string="Código indicador da incidência tributária",
        required=True,
        help=(
            "Código indicador da incidência tributária no período: 1 – "
            "Escrituração de operações com incidência exclusivamente no regime"
            " não-cumulativo; 2 – Escrituração de operações com incidência "
            "exclusivamente no regime cumulativo; 3 – Escrituração de "
            "operações com incidência nos regimes não-cumulativo e cumulativo."
        ),
    )

    IND_APRO_CRED = fields.Integer(
        string="Código indicador de método de apropriação",
        help=(
            "Código indicador de método de apropriação de créditos comuns, no "
            "caso de incidência no regime não-cumulativo (COD_INC_TRIB = 1 ou "
            "3): 1 – Método de Apropriação Direta; 2 – Método de Rateio "
            "Proporcional (Receita Bruta)"
        ),
    )

    COD_TIPO_CONT = fields.Integer(
        string="Código indicador do Tipo de Contribuição Apurada",
        help=(
            "Código indicador do Tipo de Contribuição Apurada no Período 1 – "
            "Apuração da Contribuição Exclusivamente a Alíquota Básica 2 – "
            "Apuração da Contribuição a Alíquotas Específicas (Diferenciadas "
            "e/ou por Unidade de Medida de Produto)"
        ),
    )

    IND_REG_CUM = fields.Integer(
        string="Código indicador do critério de escrituração",
        help=(
            "Código indicador do critério de escrituração e apuração adotado, "
            "no caso de incidência exclusivamente no regime cumulativo "
            "(COD_INC_TRIB = 2), pela pessoa jurídica submetida ao regime de "
            "tributação com base no lucro presumido: 1 – Regime de Caixa – "
            "Escrituração consolidada (Registro F500); 2 – Regime de "
            "Competência - Escrituração consolidada (Registro F550); 9 – "
            "Regime de Competência - Escrituração detalhada, com base nos "
            "registros dos Blocos “A”, “C”, “D” e “F”."
        ),
    )

    reg_0111_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.0111",
        "reg_0111_ids_Registro0110_id",
        string="0111 Tabela de Receita Bruta Mensal para Fins",
        sped_card="1:1",
        help=(
            "0111 Tabela de Receita Bruta Mensal para Fins de Rateio de "
            "Créditos Comuns"
        ),
    )


class Registro0111(models.Model):
    """Tabela de Receita Bruta Mensal para Fins de Rateio de Créditos Comuns"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.0111"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    REC_BRU_NCUM_TRIB_MI = fields.Float(
        string="Receita Bruta Não-Cumulativa",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Receita Bruta Não-Cumulativa - Tributada no Mercado Interno",
    )

    REC_BRU_NCUM_NT_MI = fields.Float(
        string="Receita Bruta Não-Cumulativa – Não Tributada",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Receita Bruta Não-Cumulativa – Não Tributada no Mercado Interno "
            "(Vendas com suspensão, alíquota zero, isenção e sem incidência "
            "das contribuições)"
        ),
    )

    REC_BRU_NCUM_EXP = fields.Float(
        string="Receita Bruta Não-Cumulativa – Exportação",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    REC_BRU_CUM = fields.Float(
        string="Receita Bruta Cumulativa",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    REC_BRU_TOTAL = fields.Float(
        string="Receita Bruta Total",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    reg_0111_ids_Registro0110_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.0110",
        string="Regimes de Apuração da Contribuição Social",
        required=True,
        ondelete="cascade",
        help=(
            "Regimes de Apuração da Contribuição Social e de Apropriação de " "Crédito"
        ),
    )


class Registro0120(models.Model):
    "Identificação de EFD-Contribuições sem dados a Escriturar"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.0120"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    MES_REFER = fields.Char(
        string="Mês de referência do ano-calendário",
        required=True,
        help=(
            "Mês de referência do ano-calendário da escrituração sem dados, "
            "dispensada da entrega. Campo a ser preenchido no formato “mmaaaa”"
        ),
    )

    INF_COMP = fields.Char(
        string="Informação complementar do registro",
        required=True,
        sped_length=90,
        help=(
            "Informação complementar do registro. No caso de escrituração sem "
            "dados, deve ser informado o real motivo dessa situação, conforme "
            "indicadores abaixo: 01 - Pessoa jurídica imune ou isenta do IRPJ "
            "02 - Órgãos públicos, autarquias e fundações públicas 03 - Pessoa"
            " jurídica inativa 04 - Pessoa jurídica em geral, que não realizou"
            " operações geradoras de receitas (tributáveis ou não) ou de "
            "créditos 05 - Sociedade em Conta de Participação - SCP, que não "
            "realizou operações geradoras de receitas (tributáveis ou não) ou "
            "de créditos 06 - Sociedade Cooperativa, que não realizou "
            "operações geradoras de receitas (tributáveis ou não) ou de "
            "créditos 07 - Escrituração decorrente de incorporação, fusão ou "
            "cisão, sem operações geradoras de receitas (tributáveis ou não) "
            "ou de créditos 99 - Demais hipóteses de dispensa de escrituração,"
            " relacionadas no art. 5º, da IN RFB nº 1.252, de 2012"
        ),
    )


class Registro0140(models.Model):
    "Tabela de Cadastro de Estabelecimento"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.0140"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_EST = fields.Char(
        string="Código de identificação do estabelecimento", sped_length=60
    )

    NOME = fields.Char(
        string="Nome empresarial do estabelecimento", required=True, sped_length=100
    )

    CNPJ = fields.Char(
        string="Número de inscrição do estabelecimento no CNPJ", required=True
    )

    UF = fields.Char(
        string="Sigla da unidade da federação do estabelecimento", required=True
    )

    IE = fields.Char(
        string="Inscrição Estadual do estabelecimento",
        sped_length=14,
        help=("Inscrição Estadual do estabelecimento, se contribuinte de ICMS."),
    )

    COD_MUN = fields.Integer(
        string="Código do município do domicílio fiscal",
        required=True,
        help=(
            "Código do município do domicílio fiscal do estabelecimento, "
            "conforme a tabela IBGE"
        ),
    )

    IM = fields.Char(
        string="Inscrição Municipal do estabelecimento",
        help=("Inscrição Municipal do estabelecimento, se contribuinte do ISS."),
    )

    SUFRAMA = fields.Char(string="Inscrição do estabelecimento na Suframa")

    reg_0145_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.0145",
        "reg_0145_ids_Registro0140_id",
        string="0145 Regime de Apuração",
        sped_card="1:1",
        help=(
            "0145 Regime de Apuração da Contribuição Previdenciária sobre a "
            "Receita Bruta"
        ),
    )

    reg_0150_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.0150",
        "reg_0150_ids_Registro0140_id",
        string="0150 Tabela de Cadastro do Participante",
        sped_card="1:N",
    )

    reg_0190_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.0190",
        "reg_0190_ids_Registro0140_id",
        string="0190 Identificação das Unidades de Medida",
        sped_card="1:N",
    )

    reg_0200_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.0200",
        "reg_0200_ids_Registro0140_id",
        string="0200 Tabela de Identificação do Item",
        sped_card="1:N",
        help="0200 Tabela de Identificação do Item (Produtos e Serviços)",
    )

    reg_0400_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.0400",
        "reg_0400_ids_Registro0140_id",
        string="0400 Tabela de Natureza da Operação/ Prestação",
        sped_card="1:N",
    )

    reg_0450_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.0450",
        "reg_0450_ids_Registro0140_id",
        string="0450 Tabela de Informação Complementar",
        sped_card="1:N",
        help="0450 Tabela de Informação Complementar do Documento Fiscal",
    )


class Registro0145(models.Model):
    """Regime de Apuração da Contribuição Previdenciária sobre a Receita
    Bruta"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.0145"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_INC_TRIB = fields.Integer(
        string="Código indicador da incidência tributária",
        required=True,
        help=(
            "Código indicador da incidência tributária no período: 1 – "
            "Contribuição Previdenciária apurada no período, exclusivamente "
            "com base na Receita Bruta; 2 – Contribuição Previdenciária "
            "apurada no período, com base na Receita Bruta e com base nas "
            "Remunerações pagas, na forma dos nos incisos I e III do art. 22 "
            "da Lei no 8.212, de 1991."
        ),
    )

    VL_REC_TOT = fields.Monetary(
        string="Valor da Receita Bruta Total da Pessoa Jurídica",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor da Receita Bruta Total da Pessoa Jurídica no Período",
    )

    VL_REC_ATIV = fields.Monetary(
        string="Valor",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Receita Bruta da(s) Atividade(s) Sujeita(s) à "
            "Contribuição Previdenciária sobre a Receita Bruta"
        ),
    )

    VL_REC_DEMAIS_ATIV = fields.Monetary(
        string="Valor da Receita Bruta da(s) Atividade(s)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Receita Bruta da(s) Atividade(s) não Sujeita(s) à "
            "Contribuição Previdenciária sobre a Receita Bruta"
        ),
    )

    INFO_COMPL = fields.Char(string="Informação complementar")

    reg_0145_ids_Registro0140_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.0140",
        string="Tabela de Cadastro de Estabelecimento",
        required=True,
        ondelete="cascade",
    )


class Registro0150(models.Model):
    "Tabela de Cadastro do Participante"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.0150"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_PART = fields.Char(
        string="Código de identificação do participante no arquivo",
        required=True,
        sped_length=60,
    )

    NOME = fields.Char(
        string="Nome pessoal ou empresarial do participante",
        required=True,
        sped_length=100,
    )

    COD_PAIS = fields.Integer(
        string="Código do país do participante",
        required=True,
        sped_length=5,
        help=(
            "Código do país do participante, conforme a tabela indicada no "
            "item 3.2.1."
        ),
    )

    CNPJ = fields.Char(string="CNPJ do participante")

    CPF = fields.Char(string="CPF do participante")

    IE = fields.Char(string="Inscrição Estadual do participante", sped_length=14)

    COD_MUN = fields.Integer(
        string="Código do município", help="Código do município, conforme a tabela IBGE"
    )

    SUFRAMA = fields.Char(string="Número de inscrição do participante na Suframa")

    END = fields.Char(string="Logradouro e endereço do imóvel", sped_length=60)

    NUM = fields.Char(string="Número do imóvel")

    COMPL = fields.Char(string="Dados complementares do endereço", sped_length=60)

    BAIRRO = fields.Char(string="Bairro em que o imóvel está situado", sped_length=60)

    reg_0150_ids_Registro0140_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.0140",
        string="Tabela de Cadastro de Estabelecimento",
        required=True,
        ondelete="cascade",
    )


class Registro0190(models.Model):
    "Identificação das Unidades de Medida"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.0190"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    UNID = fields.Char(
        string="Código da unidade de medida", required=True, sped_length=6
    )

    DESCR = fields.Char(string="Descrição da unidade de medida", required=True)

    reg_0190_ids_Registro0140_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.0140",
        string="Tabela de Cadastro de Estabelecimento",
        required=True,
        ondelete="cascade",
    )


class Registro0200(models.Model):
    "Tabela de Identificação do Item (Produtos e Serviços)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.0200"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_ITEM = fields.Char(string="Código do item", required=True, sped_length=60)

    DESCR_ITEM = fields.Char(string="Descrição do item", required=True)

    COD_BARRA = fields.Char(
        string="Representação alfanumérico do código de barra",
        help=(
            "Representação alfanumérico do código de barra do produto, se " "houver."
        ),
    )

    COD_ANT_ITEM = fields.Char(
        string="Código anterior do item com relação",
        sped_length=60,
        help=(
            "Código anterior do item com relação à última informação " "apresentada."
        ),
    )

    UNID_INV = fields.Char(
        string="Unidade de medida utilizada na quantificação",
        sped_length=6,
        help="Unidade de medida utilizada na quantificação de estoques.",
    )

    TIPO_ITEM = fields.Integer(
        string="Tipo do item – Atividades Industriais",
        required=True,
        help=(
            "Tipo do item – Atividades Industriais, Comerciais e Serviços: 00 "
            "– Mercadoria para Revenda; 01 – Matéria-Prima; 02 – Embalagem; 03"
            " – Produto em Processo; 04 – Produto Acabado; 05 – Subproduto; 06"
            " – Produto Intermediário; 07 – Material de Uso e Consumo; 08 – "
            "Ativo Imobilizado; 09 – Serviços; 10 – Outros insumos; 99 – "
            "Outras"
        ),
    )

    COD_NCM = fields.Char(
        string="Código da Nomenclatura Comum do Mercosul", sped_length=8
    )

    EX_IPI = fields.Char(string="Código EX, conforme a TIPI", sped_length=3)

    COD_GEN = fields.Integer(
        string="Código do gênero do item",
        help="Código do gênero do item, conforme a Tabela 4.2.1.",
    )

    COD_LST = fields.Integer(
        string="Código do serviço conforme lista do Anexo I",
        sped_length=4,
        help=(
            "Código do serviço conforme lista do Anexo I da Lei Complementar "
            "Federal nº 116/03."
        ),
    )

    ALIQ_ICMS = fields.Float(
        string="Alíquota de ICMS aplicável ao item",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Alíquota de ICMS aplicável ao item nas operações internas",
    )

    reg_0200_ids_Registro0140_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.0140",
        string="Tabela de Cadastro de Estabelecimento",
        required=True,
        ondelete="cascade",
    )

    reg_0206_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.0206",
        "reg_0206_ids_Registro0200_id",
        string="0206 Código de Produto conforme Tabela ANP",
        sped_card="1:1",
        help="0206 Código de Produto conforme Tabela ANP (Combustíveis)",
    )

    reg_0208_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.0208",
        "reg_0208_ids_Registro0200_id",
        string="0208 Código de Grupos por Marca Comercial – REFRI",
        sped_card="1:1",
        help=("0208 Código de Grupos por Marca Comercial – REFRI (Bebidas Frias)"),
    )

    reg_0205_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.0205",
        "reg_0205_ids_Registro0200_id",
        string="0205 Alteração do Item",
        sped_card="1:N",
    )


class Registro0205(models.Model):
    "Alteração do Item"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.0205"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    DESCR_ANT_ITEM = fields.Char(string="Descrição anterior do item")

    DT_INI = fields.Date(
        string="Data inicial de utilização da descrição do item", required=True
    )

    DT_FIM = fields.Date(
        string="Data final de utilização da descrição do item", required=True
    )

    COD_ANT_ITEM = fields.Char(
        string="Código anterior do item com relação",
        sped_length=60,
        help=(
            "Código anterior do item com relação à última informação " "apresentada."
        ),
    )

    reg_0205_ids_Registro0200_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.0200",
        string="Tabela de Identificação do Item",
        required=True,
        ondelete="cascade",
        help="Tabela de Identificação do Item (Produtos e Serviços)",
    )


class Registro0206(models.Model):
    "Código de Produto conforme Tabela ANP (Combustíveis)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.0206"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_COMB = fields.Char(
        string="Código do combustível",
        required=True,
        help="Código do combustível, conforme tabela publicada pela ANP",
    )

    reg_0206_ids_Registro0200_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.0200",
        string="Tabela de Identificação do Item",
        required=True,
        ondelete="cascade",
        help="Tabela de Identificação do Item (Produtos e Serviços)",
    )


class Registro0208(models.Model):
    "Código de Grupos por Marca Comercial – REFRI (Bebidas Frias)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.0208"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_TAB = fields.Char(
        string="Código indicador da Tabela de Incidência",
        required=True,
        sped_length=2,
        help=(
            "Código indicador da Tabela de Incidência, conforme Anexo III do "
            "Decreto nº 6.707/08: 01 – Tabela I 02 – Tabela II 03 – Tabela III"
            " 04 – Tabela IV 05 – Tabela V 06 – Tabela VI 07 – Tabela VII 08– "
            "Tabela VIII 09 – Tabela IX 10 – Tabela X 11 – Tabela XI 12 – "
            "Tabela XII"
        ),
    )

    COD_GRU = fields.Char(
        string="Código do grupo",
        required=True,
        sped_length=2,
        help="Código do grupo, conforme Anexo III do Decreto nº 6.707/08.",
    )

    MARCA_COM = fields.Char(string="Marca Comercial", required=True, sped_length=60)

    reg_0208_ids_Registro0200_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.0200",
        string="Tabela de Identificação do Item",
        required=True,
        ondelete="cascade",
        help="Tabela de Identificação do Item (Produtos e Serviços)",
    )


class Registro0400(models.Model):
    "Tabela de Natureza da Operação/ Prestação"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.0400"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_NAT = fields.Char(
        string="Código da natureza da operação/prestação", required=True, sped_length=10
    )

    DESCR_NAT = fields.Char(
        string="Descrição da natureza da operação/prestação", required=True
    )

    reg_0400_ids_Registro0140_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.0140",
        string="Tabela de Cadastro de Estabelecimento",
        required=True,
        ondelete="cascade",
    )


class Registro0450(models.Model):
    "Tabela de Informação Complementar do Documento Fiscal"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.0450"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_INF = fields.Char(
        string="Código da informação complementar",
        required=True,
        sped_length=6,
        help="Código da informação complementar do documento fiscal.",
    )

    TXT = fields.Char(
        string="Texto livre da informação complementar existente",
        required=True,
        help=(
            "Texto livre da informação complementar existente no documento "
            "fiscal, inclusive espécie de normas legais, poder normativo, "
            "número, capitulação, data e demais referências pertinentes com "
            "indicação referentes ao tributo."
        ),
    )

    reg_0450_ids_Registro0140_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.0140",
        string="Tabela de Cadastro de Estabelecimento",
        required=True,
        ondelete="cascade",
    )


class Registro0500(models.Model):
    "Plano de Contas Contábeis – Contas Informadas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.0500"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    DT_ALT = fields.Date(string="Data da inclusão/alteração", required=True)

    COD_NAT_CC = fields.Char(
        string="Código da natureza da conta/grupo de contas",
        required=True,
        help=(
            "Código da natureza da conta/grupo de contas: 01 - Contas de ativo"
            " 02 - Contas de passivo; 03 - Patrimônio líquido; 04 - Contas de "
            "resultado; 05 - Contas de compensação; 09 - Outras."
        ),
    )

    IND_CTA = fields.Char(
        string="Indicador do tipo de conta: S",
        required=True,
        help=(
            "Indicador do tipo de conta: S - Sintética (grupo de contas); A - "
            "Analítica (conta)."
        ),
    )

    NIVEL = fields.Integer(
        string="Nível da conta analítica/grupo de contas", required=True, sped_length=5
    )

    COD_CTA = fields.Char(
        string="Código da conta analítica/grupo de contas",
        required=True,
        sped_length=255,
    )

    NOME_CTA = fields.Char(
        string="Nome da conta analítica/grupo de contas", required=True, sped_length=60
    )

    COD_CTA_REF = fields.Char(
        string="Código da conta correlacionada no Plano",
        sped_length=60,
        help=(
            "Código da conta correlacionada no Plano de Contas Referenciado, "
            "publicado pela RFB."
        ),
    )

    CNPJ_EST = fields.Char(
        string="CNPJ do estabelecimento",
        help=(
            "CNPJ do estabelecimento, no caso da conta informada no campo "
            "COD_CTA ser específica de um estabelecimento."
        ),
    )


class Registro0600(models.Model):
    "Centro de Custos"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.0600"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    DT_ALT = fields.Date(string="Data da inclusão/alteração", required=True)

    COD_CCUS = fields.Char(
        string="Código do centro de custos", required=True, sped_length=255
    )

    CCUS = fields.Char(string="Nome do centro de custos", required=True, sped_length=60)


class Registro0900(models.Model):
    """Composição das Receitas do Período – Receita Bruta e Demais Receitas"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.0900"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    REC_TOTAL_BLOCO_A = fields.Float(
        string="Receita total referente aos registros escriturados",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=("Receita total referente aos registros escriturados no Bloco A"),
    )

    REC_NRB_BLOCO_A = fields.Float(
        string="Parcela da receita total escriturada no Bloco A",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Parcela da receita total escriturada no Bloco A (Campo 02), não "
            "classificada como receita bruta"
        ),
    )

    REC_TOTAL_BLOCO_C = fields.Float(
        string="REC_TOTAL_BLOCO_C",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=("Receita total referente aos registros escriturados no Bloco C"),
    )

    REC_NRB_BLOCO_C = fields.Float(
        string="Parcela da receita total escriturada no Bloco C",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Parcela da receita total escriturada no Bloco C (Campo 04), não "
            "classificada como receita bruta"
        ),
    )

    REC_TOTAL_BLOCO_D = fields.Float(
        string="REC_TOTAL_BLOCO_D",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=("Receita total referente aos registros escriturados no Bloco D"),
    )

    REC_NRB_BLOCO_D = fields.Float(
        string="Parcela da receita total escriturada no Bloco D",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Parcela da receita total escriturada no Bloco D (Campo 06), não "
            "classificada como receita bruta"
        ),
    )

    REC_TOTAL_BLOCO_F = fields.Float(
        string="REC_TOTAL_BLOCO_F",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=("Receita total referente aos registros escriturados no Bloco F"),
    )

    REC_NRB_BLOCO_F = fields.Float(
        string="Parcela da receita total escriturada no Bloco F",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Parcela da receita total escriturada no Bloco F (Campo 08), não "
            "classificada como receita bruta"
        ),
    )

    REC_TOTAL_BLOCO_I = fields.Float(
        string="REC_TOTAL_BLOCO_I",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=("Receita total referente aos registros escriturados no Bloco I"),
    )

    REC_NRB_BLOCO_I = fields.Float(
        string="Parcela da receita total escriturada no Bloco I",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Parcela da receita total escriturada no Bloco I (Campo 10) não "
            "classificada como receita bruta"
        ),
    )

    REC_TOTAL_BLOCO_1 = fields.Float(
        string="REC_TOTAL_BLOCO_1",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=("Receita total referente aos registros escriturados no Bloco 1 " "(RET)"),
    )

    REC_NRB_BLOCO_1 = fields.Float(
        string="Parcela da receita total escriturada no Bloco 1",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Parcela da receita total escriturada no Bloco 1 (Campo 12), não "
            "classificada como receita bruta"
        ),
    )

    REC_TOTAL_PERIODO = fields.Float(
        string="Receita total",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Receita total (Soma dos Campos 02, 04, 06, 08, 10 e 12)",
    )

    REC_TOTAL_NRB_PERIODO = fields.Float(
        string="Parcela da receita total escriturada",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Parcela da receita total escriturada (Campo 14), não classificada"
            " como receita bruta (Soma dos Campos 03, 05, 07, 09, 11 e 13)"
        ),
    )


class RegistroA010(models.Model):
    "Identificação do Estabelecimento"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.a010"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    CNPJ = fields.Char(
        string="Número de inscrição do estabelecimento no CNPJ", required=True
    )

    reg_A100_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.a100",
        "reg_A100_ids_RegistroA010_id",
        string="A100 Documento – Nota Fiscal de Serviço",
        sped_card="1:N",
    )


class RegistroA100(models.Model):
    "Documento – Nota Fiscal de Serviço"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.a100"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    IND_OPER = fields.Char(
        string="Indicador do tipo de operação: 0",
        required=True,
        help=(
            "Indicador do tipo de operação: 0 - Serviço Contratado pelo "
            "Estabelecimento; 1 - Serviço Prestado pelo Estabelecimento."
        ),
    )

    IND_EMIT = fields.Char(
        string="Indicador do emitente do documento fiscal",
        required=True,
        help=(
            "Indicador do emitente do documento fiscal: 0 - Emissão Própria; 1"
            " - Emissão de Terceiros"
        ),
    )

    COD_PART = fields.Char(
        string="Código do participante",
        sped_length=60,
        help=(
            "Código do participante (campo 02 do Registro 0150): - do emitente"
            " do documento, no caso de emissão de terceiros; - do adquirente, "
            "no caso de serviços prestados."
        ),
    )

    COD_SIT = fields.Integer(
        string="Código da situação do documento fiscal",
        required=True,
        help=(
            "Código da situação do documento fiscal: 00 – Documento regular 02"
            " – Documento cancelado"
        ),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=20)

    SUB = fields.Char(string="Subsérie do documento fiscal", sped_length=20)

    NUM_DOC = fields.Char(
        string="Número do documento fiscal",
        required=True,
        sped_length=60,
        help=("Número do documento fiscal ou documento internacional equivalente"),
    )

    CHV_NFSE = fields.Char(
        string="Chave/Código de Verificação da nota fiscal",
        sped_length=60,
        help=("Chave/Código de Verificação da nota fiscal de serviço eletrônica"),
    )

    DT_DOC = fields.Date(string="Data da emissão do documento fiscal", required=True)

    DT_EXE_SERV = fields.Date(string="Data de Execução / Conclusão do Serviço")

    VL_DOC = fields.Monetary(
        string="Valor total do documento",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_PGTO = fields.Char(
        string="Indicador do tipo de pagamento",
        required=True,
        help=(
            "Indicador do tipo de pagamento: 0- À vista; 1- A prazo; 9- Sem "
            "pagamento."
        ),
    )

    VL_DESC = fields.Monetary(
        string="Valor total do desconto",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_PIS = fields.Monetary(
        string="Valor da base de cálculo do PIS/PASEP",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_PIS = fields.Monetary(
        string="Valor total do PIS",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_COFINS = fields.Monetary(
        string="Valor da base de cálculo da COFINS",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_COFINS = fields.Monetary(
        string="Valor total da COFINS",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_PIS_RET = fields.Monetary(
        string="Valor total do PIS retido na fonte",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_COFINS_RET = fields.Monetary(
        string="Valor total da COFINS retido na fonte",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ISS = fields.Monetary(
        string="Valor do ISS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    reg_A100_ids_RegistroA010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.a010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )

    reg_A110_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.a110",
        "reg_A110_ids_RegistroA100_id",
        string="A110 Complemento",
        sped_card="1:N",
        help=("A110 Complemento de Documento – Informação Complementar da NF"),
    )

    reg_A111_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.a111",
        "reg_A111_ids_RegistroA100_id",
        string="A111 Processo Referenciado",
        sped_card="1:N",
    )

    reg_A120_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.a120",
        "reg_A120_ids_RegistroA100_id",
        string="A120 Informação Complementar – Operações",
        sped_card="1:N",
        help="A120 Informação Complementar – Operações de Importação",
    )

    reg_A170_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.a170",
        "reg_A170_ids_RegistroA100_id",
        string="A170 Complemento de Documento – Itens do Documento",
        sped_card="1:N",
    )


class RegistroA110(models.Model):
    "Complemento de Documento – Informação Complementar da NF"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.a110"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_INF = fields.Char(
        string="Código da informação complementar",
        required=True,
        sped_length=6,
        help=(
            "Código da informação complementar do documento fiscal (Campo 02 "
            "do Registro 0450)"
        ),
    )

    TXT_COMPL = fields.Char(string="Informação Complementar do Documento Fiscal")

    reg_A110_ids_RegistroA100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.a100",
        string="Documento – Nota Fiscal de Serviço",
        required=True,
        ondelete="cascade",
    )


class RegistroA111(models.Model):
    "Processo Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.a111"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório",
        required=True,
        sped_length=15,
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        required=True,
        help=(
            "Indicador da origem do processo: 1 - Justiça Federal; 3 – "
            "Secretaria da Receita Federal do Brasil 9 - Outros."
        ),
    )

    reg_A111_ids_RegistroA100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.a100",
        string="Documento – Nota Fiscal de Serviço",
        required=True,
        ondelete="cascade",
    )


class RegistroA120(models.Model):
    "Informação Complementar – Operações de Importação"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.a120"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    VL_TOT_SERV = fields.Monetary(
        string="Valor total do serviço",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total do serviço, prestado por pessoa física ou jurídica "
            "domiciliada no exterior."
        ),
    )

    VL_BC_PIS = fields.Monetary(
        string="Valor da base de cálculo",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor da base de cálculo da Operação – PIS/PASEP – Importação"),
    )

    VL_PIS_IMP = fields.Monetary(
        string="Valor pago/recolhido de PIS/PASEP – Importação",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    DT_PAG_PIS = fields.Date(string="Data de pagamento do PIS/PASEP – Importação")

    VL_BC_COFINS = fields.Monetary(
        string="Valor da base de cálculo (VL_BC_COFINS)",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor da base de cálculo da Operação – COFINS – Importação",
    )

    VL_COFINS_IMP = fields.Monetary(
        string="Valor pago/recolhido de COFINS – Importação",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    DT_PAG_COFINS = fields.Date(string="Data de pagamento do COFINS – Importação")

    LOC_EXE_SERV = fields.Char(
        string="Local da execução do serviço",
        required=True,
        help=(
            "Local da execução do serviço: 0 – Executado no País; 1 – "
            "Executado no Exterior, cujo resultado se verifique no País."
        ),
    )

    reg_A120_ids_RegistroA100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.a100",
        string="Documento – Nota Fiscal de Serviço",
        required=True,
        ondelete="cascade",
    )


class RegistroA170(models.Model):
    "Complemento de Documento – Itens do Documento"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.a170"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_ITEM = fields.Integer(
        string="Número seqüencial do item no documento fiscal",
        required=True,
        sped_length=4,
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        required=True,
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    DESCR_COMPL = fields.Char(
        string="Descrição complementar do item como adotado",
        help=("Descrição complementar do item como adotado no documento fiscal"),
    )

    VL_ITEM = fields.Monetary(
        string="Valor total do item",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor total do item (mercadorias ou serviços)",
    )

    VL_DESC = fields.Monetary(
        string="Valor do desconto comercial / exclusão da base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do desconto comercial / exclusão da base de cálculo do "
            "PIS/PASEP e da COFINS"
        ),
    )

    NAT_BC_CRED = fields.Char(
        string="Código da base de cálculo do crédito",
        help=(
            "Código da base de cálculo do crédito, conforme a Tabela indicada "
            "no item 4.3.7, caso seja informado"
        ),
    )

    IND_ORIG_CRED = fields.Char(
        string="Indicador da origem do crédito",
        help=(
            "Indicador da origem do crédito: 0 – Operação no Mercado Interno 1"
            " – Operação de Importação"
        ),
    )

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help=(
            "Código da Situação Tributária referente ao PIS/PASEP – Tabela " "4.3.3."
        ),
    )

    VL_BC_PIS = fields.Monetary(
        string="Valor da base de cálculo do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Alíquota do PIS/PASEP (em percentual)",
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_COFINS = fields.Integer(
        string="CST_COFINS",
        required=True,
        help=("Código da Situação Tributária referente ao COFINS – Tabela 4.3.4."),
    )

    VL_BC_COFINS = fields.Monetary(
        string="Valor da base de cálculo da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota do COFINS (em percentual)",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    COD_CCUS = fields.Char(string="Código do centro de custos", sped_length=255)

    reg_A170_ids_RegistroA100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.a100",
        string="Documento – Nota Fiscal de Serviço",
        required=True,
        ondelete="cascade",
    )


class RegistroC010(models.Model):
    "Identificação do Estabelecimento"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c010"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    CNPJ = fields.Char(
        string="Número de inscrição do estabelecimento no CNPJ", required=True
    )

    IND_ESCRI = fields.Char(
        string="Indicador da apuração das contribuições e créditos",
        help=(
            "Indicador da apuração das contribuições e créditos, na "
            "escrituração das operações por NF-e e ECF, no período: 1 – "
            "Apuração com base nos registros de consolidação das operações por"
            " NF-e (C180 e C190) e por ECF (C490); 2 – Apuração com base no "
            "registro individualizado de NF-e (C100 e C170) e de ECF (C400)"
        ),
    )

    reg_C100_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c100",
        "reg_C100_ids_RegistroC010_id",
        string="C100 Documento - Nota Fiscal",
        sped_card="1:N",
        help=(
            "C100 Documento - Nota Fiscal (código 01), Nota Fiscal Avulsa "
            "(código 1B), Nota Fiscal de Produtor (código 04) e NF-e (código "
            "55)"
        ),
    )

    reg_C180_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c180",
        "reg_C180_ids_RegistroC010_id",
        string="C180 Consolidação",
        sped_card="1:N",
        help=(
            "C180 Consolidação de Notas Fiscais Eletrônicas Emitidas pela "
            "Pessoa Jurídica (Código 55) – Operações de Vendas"
        ),
    )

    reg_C190_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c190",
        "reg_C190_ids_RegistroC010_id",
        string="C190 Consolidação de Notas Fiscais Eletrônicas",
        sped_card="1:N",
        help=(
            "C190 Consolidação de Notas Fiscais Eletrônicas (Código 55) – "
            "Operações de Aquisição com Direito a Crédito, e Operações de "
            "Devolução de Compras e Vendas."
        ),
    )

    reg_C380_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c380",
        "reg_C380_ids_RegistroC010_id",
        string="C380 Nota Fiscal de Venda a Consumidor",
        sped_card="1:N",
        help=(
            "C380 Nota Fiscal de Venda a Consumidor (Código 02) - Consolidação"
            " de Documentos Emitidos"
        ),
    )

    reg_C395_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c395",
        "reg_C395_ids_RegistroC010_id",
        string="C395 Notas Fiscais de Venda a Consumidor",
        sped_card="1:N",
        help=(
            "C395 Notas Fiscais de Venda a Consumidor (Códigos 02, 2D, 2E e "
            "59) – Aquisições/Entradas com Crédito"
        ),
    )

    reg_C400_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c400",
        "reg_C400_ids_RegistroC010_id",
        string="C400 Equipamento ECF",
        sped_card="1:N",
        help="C400 Equipamento ECF (códigos 02 e 2D)",
    )

    reg_C490_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c490",
        "reg_C490_ids_RegistroC010_id",
        string="C490 Consolidação de Documentos Emitidos por ECF",
        sped_card="1:N",
        help=(
            "C490 Consolidação de Documentos Emitidos por ECF (Códigos 02, 2D,"
            " 59 e 60)"
        ),
    )

    reg_C500_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c500",
        "reg_C500_ids_RegistroC010_id",
        string="C500 Nota Fiscal/Conta de Energia Elétrica",
        sped_card="1:N",
        help=(
            "C500 Nota Fiscal/Conta de Energia Elétrica (Código 06), Nota "
            "Fiscal de Energia Elétrica Eletrônica – NF3e (Código 66), Nota "
            "Fiscal/Conta de fornecimento D’água Canalizada (Código 29), Nota "
            "Fiscal/Consumo Fornecimento de Gás (Código 28) e NF-e (Código 55)"
            " – Documentos de Entrada / Aquisição com Crédito"
        ),
    )

    reg_C600_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c600",
        "reg_C600_ids_RegistroC010_id",
        string="C600 Consolidação Diária de Notas Fiscais/Contas",
        sped_card="1:N",
        help=(
            "C600 Consolidação Diária de Notas Fiscais/Contas de Energia "
            "Elétrica (Código 06), Nota Fiscal/Conta de Fornecimento d´água "
            "(Código 29) e Nota Fiscal/Conta de Fornecimento de Gás (Código "
            "28) (Empresas Obrigadas ou Não Obrigadas Ao Convenio ICMS 115/03)"
            " - - Documentos de Saídas"
        ),
    )

    reg_C800_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c800",
        "reg_C800_ids_RegistroC010_id",
        string="C800 Cupom Fiscal Eletrônico – CF-e",
        sped_card="1:N",
        help="C800 Cupom Fiscal Eletrônico – CF-e (Código 59)",
    )

    reg_C860_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c860",
        "reg_C860_ids_RegistroC010_id",
        string="C860 Identificação do Equipamento SAT- CF-e",
        sped_card="1:N",
        help=(
            "C860 Identificação do Equipamento SAT- CF-e (Código 59) (*) A "
            "partir da versão 2.11 do PVA (Período de apuração a partir de "
            "maio/2015)"
        ),
    )


class RegistroC100(models.Model):
    """Documento - Nota Fiscal (código 01), Nota Fiscal Avulsa (código 1B),
    Nota Fiscal de Produtor (código 04) e NF-e (código 55)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c100"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    IND_OPER = fields.Char(
        string="Indicador do tipo de operação",
        required=True,
        help="Indicador do tipo de operação: 0- Entrada; 1- Saída",
    )

    IND_EMIT = fields.Char(
        string="Indicador do emitente do documento fiscal",
        required=True,
        help=(
            "Indicador do emitente do documento fiscal: 0- Emissão própria; 1-"
            " Terceiros"
        ),
    )

    COD_PART = fields.Char(
        string="Código do participante",
        required=True,
        sped_length=60,
        help=(
            "Código do participante (campo 02 do Registro 0150): - do emitente"
            " do documento ou do remetente das mercadorias, no caso de "
            "entradas; - do adquirente, no caso de saídas"
        ),
    )

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        required=True,
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    COD_SIT = fields.Integer(
        string="Código da situação do documento fiscal",
        required=True,
        help=("Código da situação do documento fiscal, conforme a Tabela 4.1.2"),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=3)

    NUM_DOC = fields.Integer(
        string="Número do documento fiscal", required=True, sped_length=9
    )

    CHV_NFE = fields.Integer(string="Chave da Nota Fiscal Eletrônica ou da NFC-e")

    DT_DOC = fields.Date(string="Data da emissão do documento fiscal", required=True)

    DT_E_S = fields.Date(string="Data da entrada ou da saída")

    VL_DOC = fields.Monetary(
        string="Valor total do documento fiscal",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_PGTO = fields.Char(
        string="Indicador do tipo de pagamento",
        required=True,
        help=(
            "Indicador do tipo de pagamento: 0- À vista; 1- A prazo; 9- Sem "
            "pagamento."
        ),
    )

    VL_DESC = fields.Monetary(
        string="Valor total do desconto",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ABAT_NT = fields.Monetary(
        string="Abatimento não tributado e não comercial Ex",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Abatimento não tributado e não comercial Ex. desconto ICMS nas "
            "remessas para ZFM."
        ),
    )

    VL_MERC = fields.Monetary(
        string="Valor total das mercadorias e serviços",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_FRT = fields.Char(
        string="Indicador do tipo do frete",
        required=True,
        help=(
            "Indicador do tipo do frete: 0- Por conta de terceiros; 1- Por "
            "conta do emitente; 2- Por conta do destinatário; 9- Sem cobrança "
            "de frete."
        ),
    )

    VL_FRT = fields.Monetary(
        string="Valor do frete indicado no documento fiscal",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SEG = fields.Monetary(
        string="Valor do seguro indicado no documento fiscal",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_OUT_DA = fields.Monetary(
        string="Valor de outras despesas acessórias",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS = fields.Monetary(
        string="Valor do ICMS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_BC_ICMS_ST = fields.Monetary(
        string="Valor da base de cálculo",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor da base de cálculo do ICMS substituição tributária",
    )

    VL_ICMS_ST = fields.Monetary(
        string="Valor do ICMS retido por substituição tributária",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_IPI = fields.Monetary(
        string="Valor total do IPI",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_PIS = fields.Monetary(
        string="Valor total do PIS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_COFINS = fields.Monetary(
        string="Valor total da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_PIS_ST = fields.Monetary(
        string="Valor total do PIS retido",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor total do PIS retido por substituição tributária",
    )

    VL_COFINS_ST = fields.Monetary(
        string="Valor total da COFINS retido",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor total da COFINS retido por substituição tributária",
    )

    reg_C100_ids_RegistroC010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )

    reg_C110_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c110",
        "reg_C110_ids_RegistroC100_id",
        string="C110 Complemento",
        sped_card="1:N",
        help=(
            "C110 Complemento de Documento – Informação Complementar da Nota "
            "Fiscal (códigos 01, 1B, 04 e 55)"
        ),
    )

    reg_C111_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c111",
        "reg_C111_ids_RegistroC100_id",
        string="C111 Processo Referenciado",
        sped_card="1:N",
    )

    reg_C120_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c120",
        "reg_C120_ids_RegistroC100_id",
        string="C120 Complemento de Documento – Operações",
        sped_card="1:N",
        help=("C120 Complemento de Documento – Operações de Importação (código " "01)"),
    )

    reg_C170_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c170",
        "reg_C170_ids_RegistroC100_id",
        string="C170 Complemento de Documento – Itens do Documento",
        sped_card="1:N",
        help=(
            "C170 Complemento de Documento – Itens do Documento (códigos 01, "
            "1B, 04 e 55)"
        ),
    )

    reg_C175_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c175",
        "reg_C175_ids_RegistroC100_id",
        string="C175 Registro Analítico do Documento",
        sped_card="1:N",
        help=(
            "C175 Registro Analítico do Documento (código 65) (*) "
            "Disponíbilizado na versão 2.09 do PVA ."
        ),
    )


class RegistroC110(models.Model):
    """Complemento de Documento – Informação Complementar da Nota Fiscal
    (códigos 01, 1B, 04 e 55)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c110"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_INF = fields.Char(
        string="Código da informação complementar",
        required=True,
        sped_length=6,
        help=(
            "Código da informação complementar do documento fiscal (campo 02 "
            "do Registro 0450)"
        ),
    )

    TXT_COMPL = fields.Char(string="Descrição complementar do código de referência")

    reg_C110_ids_RegistroC100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c100",
        string="Documento - Nota Fiscal (código 01)",
        required=True,
        ondelete="cascade",
        help=(
            "Documento - Nota Fiscal (código 01), Nota Fiscal Avulsa (código "
            "1B), Nota Fiscal de Produtor (código 04) e NF-e (código 55)"
        ),
    )


class RegistroC111(models.Model):
    "Processo Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c111"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório",
        required=True,
        sped_length=20,
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        required=True,
        help=(
            "Indicador da origem do processo: 1 - Justiça Federal; 3 – "
            "Secretaria da Receita Federal do Brasil"
        ),
    )

    reg_C111_ids_RegistroC100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c100",
        string="Documento - Nota Fiscal (código 01)",
        required=True,
        ondelete="cascade",
        help=(
            "Documento - Nota Fiscal (código 01), Nota Fiscal Avulsa (código "
            "1B), Nota Fiscal de Produtor (código 04) e NF-e (código 55)"
        ),
    )


class RegistroC120(models.Model):
    "Complemento de Documento – Operações de Importação (código 01)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c120"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_DOC_IMP = fields.Char(
        string="Documento de importação",
        required=True,
        help=(
            "Documento de importação: 0 – Declaração de Importação; 1 – "
            "Declaração Simplificada de Importação; A partir dos fatos "
            "geradores ocorridos em 01/2019: Documento de importação: 0 – "
            "Declaração de Importação; 1 – Declaração Simplificada de "
            "Importação; 2 – Declaração Única de Importação"
        ),
    )

    NUM_DOC_IMP = fields.Char(
        string="Número do documento de Importação", required=True, sped_length=15
    )

    VL_PIS_IMP = fields.Monetary(
        string="Valor pago de PIS na importação",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_COFINS_IMP = fields.Monetary(
        string="Valor pago de COFINS na importação",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    NUM_ACDRAW = fields.Char(
        string="Número do Ato Concessório do regime Drawback", sped_length=20
    )

    reg_C120_ids_RegistroC100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c100",
        string="Documento - Nota Fiscal (código 01)",
        required=True,
        ondelete="cascade",
        help=(
            "Documento - Nota Fiscal (código 01), Nota Fiscal Avulsa (código "
            "1B), Nota Fiscal de Produtor (código 04) e NF-e (código 55)"
        ),
    )


class RegistroC170(models.Model):
    """Complemento de Documento – Itens do Documento (códigos 01, 1B, 04 e
    55)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c170"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_ITEM = fields.Integer(
        string="Número seqüencial do item no documento fiscal",
        required=True,
        sped_length=3,
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        required=True,
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    DESCR_COMPL = fields.Char(
        string="Descrição complementar do item como adotado",
        help=("Descrição complementar do item como adotado no documento fiscal"),
    )

    QTD = fields.Float(
        string="Quantidade do item",
        xsd_type="TDec_1605",
        digits=(
            16,
            5,
        ),
    )

    UNID = fields.Char(
        string="Unidade do item",
        sped_length=6,
        help="Unidade do item (Campo 02 do registro 0190)",
    )

    VL_ITEM = fields.Monetary(
        string="Valor total do item",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor total do item (mercadorias ou serviços)",
    )

    VL_DESC = fields.Monetary(
        string="Valor do desconto comercial / exclusão da base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do desconto comercial / exclusão da base de cálculo do "
            "PIS/PASEP e da COFINS"
        ),
    )

    IND_MOV = fields.Char(
        string="Movimentação física do ITEM/PRODUTO",
        sped_length=1,
        help="Movimentação física do ITEM/PRODUTO: 0. SIM 1. NÃO",
    )

    CST_ICMS = fields.Integer(
        string="Código da Situação Tributária referente ao ICMS",
        help=(
            "Código da Situação Tributária referente ao ICMS, conforme a "
            "Tabela indicada no item 4.3.1"
        ),
    )

    CFOP = fields.Integer(string="Código Fiscal de Operação e Prestação", required=True)

    COD_NAT = fields.Char(
        string="Código da natureza da operação",
        sped_length=10,
        help="Código da natureza da operação (campo 02 do Registro 0400)",
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_ICMS = fields.Float(
        string="Alíquota do ICMS",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_ICMS = fields.Monetary(
        string="Valor do ICMS creditado/debitado",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ICMS_ST = fields.Monetary(
        string="Valor da base de cálculo referente",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor da base de cálculo referente à substituição tributária",
    )

    ALIQ_ST = fields.Float(
        string="Alíquota do ICMS da substituição tributária",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Alíquota do ICMS da substituição tributária na unidade da "
            "federação de destino"
        ),
    )

    VL_ICMS_ST = fields.Monetary(
        string="Valor do ICMS referente à substituição tributária",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_APUR = fields.Char(
        string="Indicador de período de apuração do IPI",
        help=("Indicador de período de apuração do IPI: 0 - Mensal; 1 Decendial"),
    )

    CST_IPI = fields.Char(
        string="Código da Situação Tributária referente ao IPI",
        help=(
            "Código da Situação Tributária referente ao IPI, conforme a Tabela"
            " indicada no item 4.3.2."
        ),
    )

    COD_ENQ = fields.Char(
        string="Código de enquadramento legal do IPI",
        help=(
            "Código de enquadramento legal do IPI, conforme tabela indicada no"
            " item 4.5.3."
        ),
    )

    VL_BC_IPI = fields.Monetary(
        string="Valor da base de cálculo do IPI",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_IPI = fields.Float(
        string="Alíquota do IPI",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_IPI = fields.Monetary(
        string="Valor do IPI creditado/debitado",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente ao PIS", required=True
    )

    VL_BC_PIS = fields.Monetary(
        string="Valor da base de cálculo do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS (em percentual)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    QUANT_BC_PIS = fields.Float(
        string="Quantidade – Base de cálculo PIS/PASEP",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    ALIQ_PIS_QUANT = fields.Float(
        string="Alíquota do PIS/PASEP (em reais)",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente ao COFINS", required=True
    )

    VL_BC_COFINS = fields.Monetary(
        string="Valor da base de cálculo da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota do COFINS (em percentual)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    QUANT_BC_COFINS = fields.Float(
        string="Quantidade – Base de cálculo COFINS",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    ALIQ_COFINS_QUANT = fields.Float(
        string="Alíquota da COFINS (em reais)",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_C170_ids_RegistroC100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c100",
        string="Documento - Nota Fiscal (código 01)",
        required=True,
        ondelete="cascade",
        help=(
            "Documento - Nota Fiscal (código 01), Nota Fiscal Avulsa (código "
            "1B), Nota Fiscal de Produtor (código 04) e NF-e (código 55)"
        ),
    )


class RegistroC175(models.Model):
    """Registro Analítico do Documento (código 65) (*) Disponíbilizado na
    versão 2.09 do PVA ."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c175"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    CFOP = fields.Integer(string="Código fiscal de operação e prestação", required=True)

    VL_OPR = fields.Monetary(
        string="Valor da operação na combinação de CFOP",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da operação na combinação de CFOP, CST e alíquotas, "
            "correspondente ao somatório do valor das mercadorias e produtos "
            "constantes no documento."
        ),
    )

    VL_DESC = fields.Monetary(
        string="Valor do desconto comercial / exclusão da base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do desconto comercial / exclusão da base de cálculo do "
            "PIS/PASEP e da COFINS"
        ),
    )

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        help=(
            "Código da Situação Tributária referente ao PIS/PASEP, conforme a "
            "Tabela indicada no item 4.3.3."
        ),
    )

    VL_BC_PIS = fields.Monetary(
        string="Valor da base de cálculo do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor da base de cálculo do PIS/PASEP (em valor)",
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP (em percentual)",
    )

    QUANT_BC_PIS = fields.Float(
        string="Base de cálculo PIS/PASEP",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help="Base de cálculo PIS/PASEP (em quantidade)",
    )

    ALIQ_PIS_QUANT = fields.Float(
        string="Alíquota do PIS (em reais)",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente a Cofins",
        required=True,
        help=(
            "Código da Situação Tributária referente a Cofins, conforme a "
            "Tabela indicada no item 4.3.4."
        ),
    )

    VL_BC_COFINS = fields.Monetary(
        string="Valor da base de cálculo da Cofins",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota da Cofins (em percentual)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    QUANT_BC_COFINS = fields.Float(
        string="Base de cálculo COFINS",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help="Base de cálculo COFINS (em quantidade)",
    )

    ALIQ_COFINS_QUANT = fields.Float(
        string="Alíquota da COFINS (em reais)",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor da Cofins", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    INFO_COMPL = fields.Char(string="Informação complementar")

    reg_C175_ids_RegistroC100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c100",
        string="Documento - Nota Fiscal (código 01)",
        required=True,
        ondelete="cascade",
        help=(
            "Documento - Nota Fiscal (código 01), Nota Fiscal Avulsa (código "
            "1B), Nota Fiscal de Produtor (código 04) e NF-e (código 55)"
        ),
    )


class RegistroC180(models.Model):
    """Consolidação de Notas Fiscais Eletrônicas Emitidas pela Pessoa Jurídica
    (Código 55) – Operações de Vendas"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c180"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_MOD = fields.Char(
        string="Texto fixo contendo '55' ou “65”",
        required=True,
        help=(
            "Texto fixo contendo '55' ou “65”(Código da NF-e ou da NFC-e, "
            "conforme a Tabela 4.1.1)"
        ),
    )

    DT_DOC_INI = fields.Date(
        string="Data de Emissão Inicial dos Documentos", required=True
    )

    DT_DOC_FIN = fields.Date(
        string="Data de Emissão Final dos Documentos", required=True
    )

    COD_ITEM = fields.Char(
        string="Código do Item",
        required=True,
        sped_length=60,
        help="Código do Item (campo 02 do Registro 0200)",
    )

    COD_NCM = fields.Char(string="Código da Nomenclatura Comum do Mercosul")

    EX_IPI = fields.Char(string="Código EX, conforme a TIPI", sped_length=3)

    VL_TOT_ITEM = fields.Monetary(
        string="Valor Total do Item",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_C180_ids_RegistroC010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )

    reg_C181_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c181",
        "reg_C181_ids_RegistroC180_id",
        string="C181 Detalhamento da Consolidação",
        sped_card="1:N",
        help=("C181 Detalhamento da Consolidação - Operações de Vendas - " "PIS/PASEP"),
    )

    reg_C185_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c185",
        "reg_C185_ids_RegistroC180_id",
        string="C185 Detalhamento da Consolidação",
        sped_card="1:N",
        help=("C185 Detalhamento da Consolidação - Operações de Vendas – COFINS"),
    )

    reg_C188_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c188",
        "reg_C188_ids_RegistroC180_id",
        string="C188 Processo Referenciado",
        sped_card="1:N",
    )


class RegistroC181(models.Model):
    "Detalhamento da Consolidação - Operações de Vendas - PIS/PASEP"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c181"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help=(
            "Código da Situação Tributária referente ao PIS/PASEP, conforme a "
            "Tabela indicada no item 4.3.3."
        ),
    )

    CFOP = fields.Integer(string="Código fiscal de operação e prestação", required=True)

    VL_ITEM = fields.Monetary(
        string="Valor do item",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESC = fields.Monetary(
        string="Valor do desconto comercial / exclusão da base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor do desconto comercial / exclusão da base de cálculo",
    )

    VL_BC_PIS = fields.Monetary(
        string="Valor da base de cálculo do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP (em percentual)",
    )

    QUANT_BC_PIS = fields.Float(
        string="Quantidade – Base de cálculo PIS/PASEP",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    ALIQ_PIS_QUANT = fields.Float(
        string="Alíquota do PIS/PASEP (em reais)",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_C181_ids_RegistroC180_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c180",
        string="Consolidação de Notas Fiscais Eletrônicas Emitidas",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação de Notas Fiscais Eletrônicas Emitidas pela Pessoa "
            "Jurídica (Código 55) – Operações de Vendas"
        ),
    )


class RegistroC185(models.Model):
    "Detalhamento da Consolidação - Operações de Vendas – COFINS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c185"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente a COFINS",
        required=True,
        help=(
            "Código da Situação Tributária referente a COFINS, conforme a "
            "Tabela indicada no item 4.3.4."
        ),
    )

    CFOP = fields.Integer(string="Código fiscal de operação e prestação", required=True)

    VL_ITEM = fields.Monetary(
        string="Valor do item",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESC = fields.Monetary(
        string="Valor do desconto comercial / exclusão da base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor do desconto comercial / exclusão da base de cálculo",
    )

    VL_BC_COFINS = fields.Monetary(
        string="Valor da base de cálculo da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota da COFINS (em percentual)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    QUANT_BC_COFINS = fields.Float(
        string="Quantidade – Base de cálculo da COFINS",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    ALIQ_COFINS_QUANT = fields.Float(
        string="Alíquota da COFINS (em reais)",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_C185_ids_RegistroC180_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c180",
        string="Consolidação de Notas Fiscais Eletrônicas Emitidas",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação de Notas Fiscais Eletrônicas Emitidas pela Pessoa "
            "Jurídica (Código 55) – Operações de Vendas"
        ),
    )


class RegistroC188(models.Model):
    "Processo Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c188"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório",
        required=True,
        sped_length=20,
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        required=True,
        help="Indicador da origem do processo: 1 - Justiça Federal;",
    )

    reg_C188_ids_RegistroC180_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c180",
        string="Consolidação de Notas Fiscais Eletrônicas Emitidas",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação de Notas Fiscais Eletrônicas Emitidas pela Pessoa "
            "Jurídica (Código 55) – Operações de Vendas"
        ),
    )


class RegistroC190(models.Model):
    """Consolidação de Notas Fiscais Eletrônicas (Código 55) – Operações de
    Aquisição com Direito a Crédito, e Operações de Devolução de Compras e
    Vendas."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c190"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_MOD = fields.Char(
        string="Texto fixo contendo '55'",
        required=True,
        help=(
            "Texto fixo contendo '55' (Código da Nota Fiscal Eletrônica, "
            "modelo 55, conforme a Tabela 4.1.1)"
        ),
    )

    DT_REF_INI = fields.Date(
        string="Data Inicial de Referência da Consolidação", required=True
    )

    DT_REF_FIN = fields.Date(
        string="Data Final de Referência da Consolidação", required=True
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        required=True,
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    COD_NCM = fields.Char(string="Código da Nomenclatura Comum do Mercosul")

    EX_IPI = fields.Char(string="Código EX, conforme a TIPI", sped_length=3)

    VL_TOT_ITEM = fields.Monetary(
        string="Valor Total do Item",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_C190_ids_RegistroC010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )

    reg_C191_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c191",
        "reg_C191_ids_RegistroC190_id",
        string="C191 Detalhamento da Consolidação – Operações",
        sped_card="1:N",
        help=(
            "C191 Detalhamento da Consolidação – Operações de Aquisição com "
            "Direito a Crédito, e Operações de Devolução de Compras e Vendas –"
            " PIS/PASEP"
        ),
    )

    reg_C195_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c195",
        "reg_C195_ids_RegistroC190_id",
        string="C195 Detalhamento da Consolidação",
        sped_card="1:N",
        help=(
            "C195 Detalhamento da Consolidação - Operações de Aquisição com "
            "Direito a Crédito, e Operações de Devolução de Compras e Vendas –"
            " COFINS"
        ),
    )

    reg_C198_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c198",
        "reg_C198_ids_RegistroC190_id",
        string="C198 Processo Referenciado",
        sped_card="1:N",
    )

    reg_C199_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c199",
        "reg_C199_ids_RegistroC190_id",
        string="C199 Complemento de Documento – Operações",
        sped_card="1:N",
        help=("C199 Complemento de Documento – Operações de Importação (código " "55)"),
    )


class RegistroC191(models.Model):
    """Detalhamento da Consolidação – Operações de Aquisição com Direito a
    Crédito, e Operações de Devolução de Compras e Vendas – PIS/PASEP"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c191"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    CNPJ_CPF_PART = fields.Char(
        string="CNPJ/CPF do Participante a que se referem",
        sped_length=14,
        help=(
            "CNPJ/CPF do Participante a que se referem as operações "
            "consolidadas neste registro (pessoa jurídica ou pessoa física "
            "vendedora/remetente)"
        ),
    )

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help="Código da Situação Tributária referente ao PIS/PASEP",
    )

    CFOP = fields.Integer(string="Código fiscal de operação e prestação", required=True)

    VL_ITEM = fields.Monetary(
        string="Valor do item",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESC = fields.Monetary(
        string="Valor do desconto comercial / Exclusão",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_PIS = fields.Monetary(
        string="Valor da base de cálculo do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP (em percentual)",
    )

    QUANT_BC_PIS = fields.Float(
        string="Quantidade – Base de cálculo PIS/PASEP",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    ALIQ_PIS_QUANT = fields.Float(
        string="Alíquota do PIS/PASEP (em reais)",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_C191_ids_RegistroC190_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c190",
        string="Consolidação de Notas Fiscais Eletrônicas",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação de Notas Fiscais Eletrônicas (Código 55) – Operações"
            " de Aquisição com Direito a Crédito, e Operações de Devolução de "
            "Compras e Vendas."
        ),
    )


class RegistroC195(models.Model):
    """Detalhamento da Consolidação - Operações de Aquisição com Direito a
    Crédito, e Operações de Devolução de Compras e Vendas – COFINS"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c195"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    CNPJ_CPF_PART = fields.Char(
        string="CNPJ/CPF do Participante a que se referem",
        sped_length=14,
        help=(
            "CNPJ/CPF do Participante a que se referem as operações "
            "consolidadas neste registro (pessoa jurídica ou pessoa física "
            "vendedora/remetente)"
        ),
    )

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente a COFINS", required=True
    )

    CFOP = fields.Integer(string="Código fiscal de operação e prestação", required=True)

    VL_ITEM = fields.Monetary(
        string="Valor do item",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESC = fields.Monetary(
        string="Valor do desconto comercial / Exclusão",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_COFINS = fields.Monetary(
        string="Valor da base de cálculo da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota da COFINS (em percentual)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    QUANT_BC_COFINS = fields.Float(
        string="Quantidade – Base de cálculo da COFINS",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    ALIQ_COFINS_QUANT = fields.Float(
        string="Alíquota da COFINS (em reais)",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_C195_ids_RegistroC190_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c190",
        string="Consolidação de Notas Fiscais Eletrônicas",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação de Notas Fiscais Eletrônicas (Código 55) – Operações"
            " de Aquisição com Direito a Crédito, e Operações de Devolução de "
            "Compras e Vendas."
        ),
    )


class RegistroC198(models.Model):
    "Processo Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c198"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório",
        required=True,
        sped_length=20,
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        required=True,
        help=(
            "Indicador da origem do processo: 1 - Justiça Federal; 3 – "
            "Secretaria da Receita Federal do Brasil 9 – Outros."
        ),
    )

    reg_C198_ids_RegistroC190_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c190",
        string="Consolidação de Notas Fiscais Eletrônicas",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação de Notas Fiscais Eletrônicas (Código 55) – Operações"
            " de Aquisição com Direito a Crédito, e Operações de Devolução de "
            "Compras e Vendas."
        ),
    )


class RegistroC199(models.Model):
    "Complemento de Documento – Operações de Importação (código 55)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c199"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_DOC_IMP = fields.Char(
        string="Documento de importação",
        required=True,
        help=(
            "Documento de importação: 0 – Declaração de Importação; 1 – "
            "Declaração Simplificada de Importação; A partir dos fatos "
            "geradores ocorridos em 01/2019: Documento de importação: 0 – "
            "Declaração de Importação; 1 – Declaração Simplificada de "
            "Importação; 2 – Declaração Única de Importação"
        ),
    )

    NUM_DOC_IMP = fields.Char(
        string="Número do documento de Importação", required=True, sped_length=15
    )

    VL_PIS_IMP = fields.Monetary(
        string="Valor pago de PIS na importação",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_COFINS_IMP = fields.Monetary(
        string="Valor pago de COFINS na importação",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    NUM_ACDRAW = fields.Char(
        string="Número do Ato Concessório do regime Drawback", sped_length=20
    )

    reg_C199_ids_RegistroC190_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c190",
        string="Consolidação de Notas Fiscais Eletrônicas",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação de Notas Fiscais Eletrônicas (Código 55) – Operações"
            " de Aquisição com Direito a Crédito, e Operações de Devolução de "
            "Compras e Vendas."
        ),
    )


class RegistroC380(models.Model):
    """Nota Fiscal de Venda a Consumidor (Código 02) - Consolidação de
    Documentos Emitidos"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c380"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        required=True,
        help=(
            "Código do modelo do documento fiscal, conforme a Tabela 4.1.1 "
            "(Código 02 – Nota Fiscal de Venda a Consumidor)"
        ),
    )

    DT_DOC_INI = fields.Date(
        string="Data de Emissão Inicial dos Documentos", required=True
    )

    DT_DOC_FIN = fields.Date(
        string="Data de Emissão Final dos Documentos", required=True
    )

    NUM_DOC_INI = fields.Integer(
        string="Número do documento fiscal inicial", sped_length=6
    )

    NUM_DOC_FIN = fields.Integer(
        string="Número do documento fiscal final", sped_length=6
    )

    VL_DOC = fields.Monetary(
        string="Valor total dos documentos emitidos",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DOC_CANC = fields.Monetary(
        string="Valor total dos documentos cancelados",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_C380_ids_RegistroC010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )

    reg_C381_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c381",
        "reg_C381_ids_RegistroC380_id",
        string="C381 Detalhamento da Consolidação – PIS/PASEP",
        sped_card="1:N",
    )

    reg_C385_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c385",
        "reg_C385_ids_RegistroC380_id",
        string="C385 Detalhamento da Consolidação – COFINS",
        sped_card="1:N",
    )


class RegistroC381(models.Model):
    "Detalhamento da Consolidação – PIS/PASEP"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c381"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help="Código da Situação Tributária referente ao PIS/PASEP",
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        required=True,
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    VL_ITEM = fields.Monetary(
        string="Valor total dos itens",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_PIS = fields.Monetary(
        string="Valor da base de cálculo do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP (em percentual)",
    )

    QUANT_BC_PIS = fields.Float(
        string="Quantidade – Base de cálculo do PIS/PASEP",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    ALIQ_PIS_QUANT = fields.Float(
        string="Alíquota do PIS/PASEP (em reais)",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_C381_ids_RegistroC380_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c380",
        string="Nota Fiscal de Venda a Consumidor",
        required=True,
        ondelete="cascade",
        help=(
            "Nota Fiscal de Venda a Consumidor (Código 02) - Consolidação de "
            "Documentos Emitidos"
        ),
    )


class RegistroC385(models.Model):
    "Detalhamento da Consolidação – COFINS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c385"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente a COFINS", required=True
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        required=True,
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    VL_ITEM = fields.Monetary(
        string="Valor total dos itens",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_COFINS = fields.Monetary(
        string="Valor da base de cálculo da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota da COFINS (em percentual)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    QUANT_BC_COFINS = fields.Float(
        string="Quantidade – Base de cálculo da COFINS",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    ALIQ_COFINS_QUANT = fields.Float(
        string="Alíquota da COFINS (em reais)",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_C385_ids_RegistroC380_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c380",
        string="Nota Fiscal de Venda a Consumidor",
        required=True,
        ondelete="cascade",
        help=(
            "Nota Fiscal de Venda a Consumidor (Código 02) - Consolidação de "
            "Documentos Emitidos"
        ),
    )


class RegistroC395(models.Model):
    """Notas Fiscais de Venda a Consumidor (Códigos 02, 2D, 2E e 59) –
    Aquisições/Entradas com Crédito"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c395"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        required=True,
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    COD_PART = fields.Char(
        string="Código do participante emitente do documento",
        sped_length=60,
        help=(
            "Código do participante emitente do documento (campo 02 do "
            "Registro 0150)."
        ),
    )

    SER = fields.Char(string="Série do documento fiscal", required=True, sped_length=3)

    SUB_SER = fields.Char(string="Subsérie do documento fiscal", sped_length=3)

    NUM_DOC = fields.Char(
        string="Número do documento fiscal", required=True, sped_length=6
    )

    DT_DOC = fields.Date(string="Data da emissão do documento fiscal", required=True)

    VL_DOC = fields.Monetary(
        string="Valor total do documento fiscal",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_C395_ids_RegistroC010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )

    reg_C396_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c396",
        "reg_C396_ids_RegistroC395_id",
        string="C396 Itens do Documento",
        sped_card="1:N",
        help=(
            "C396 Itens do Documento (Códigos 02, 2D, 2E e 59) – "
            "Aquisições/Entradas com Crédito"
        ),
    )


class RegistroC396(models.Model):
    """Itens do Documento (Códigos 02, 2D, 2E e 59) – Aquisições/Entradas com
    Crédito"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c396"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_ITEM = fields.Char(
        string="Código do item",
        required=True,
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    VL_ITEM = fields.Monetary(
        string="Valor total do item",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor total do item (mercadorias ou serviços)",
    )

    VL_DESC = fields.Monetary(
        string="Valor do desconto comercial do item",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    NAT_BC_CRED = fields.Char(
        string="Código da Base de Cálculo do Crédito",
        required=True,
        help=(
            "Código da Base de Cálculo do Crédito, conforme a Tabela indicada "
            "no item 4.3.7."
        ),
    )

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help="Código da Situação Tributária referente ao PIS/PASEP",
    )

    VL_BC_PIS = fields.Monetary(
        string="Valor da base de cálculo do crédito de PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP (em percentual)",
    )

    VL_PIS = fields.Monetary(
        string="Valor do crédito de PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente a COFINS", required=True
    )

    VL_BC_COFINS = fields.Monetary(
        string="Valor da base de cálculo do crédito de COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota da COFINS (em percentual)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor do crédito de COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_C396_ids_RegistroC395_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c395",
        string="Notas Fiscais de Venda a Consumidor",
        required=True,
        ondelete="cascade",
        help=(
            "Notas Fiscais de Venda a Consumidor (Códigos 02, 2D, 2E e 59) – "
            "Aquisições/Entradas com Crédito"
        ),
    )


class RegistroC400(models.Model):
    "Equipamento ECF (códigos 02 e 2D)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c400"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        required=True,
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    ECF_MOD = fields.Char(string="Modelo do equipamento", required=True, sped_length=20)

    ECF_FAB = fields.Char(
        string="Número de série de fabricação do ECF", required=True, sped_length=21
    )

    ECF_CX = fields.Integer(
        string="Número do caixa atribuído ao ECF", required=True, sped_length=3
    )

    reg_C400_ids_RegistroC010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )

    reg_C405_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c405",
        "reg_C405_ids_RegistroC400_id",
        string="C405 Redução Z (códigos 02 e 2D)",
        sped_card="1:N",
    )

    reg_C489_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c489",
        "reg_C489_ids_RegistroC400_id",
        string="C489 Processo Referenciado",
        sped_card="1:N",
    )


class RegistroC405(models.Model):
    "Redução Z (códigos 02 e 2D)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c405"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    DT_DOC = fields.Date(
        string="Data do movimento a que se refere a Redução Z", required=True
    )

    CRO = fields.Integer(
        string="Posição do Contador de Reinício de Operação",
        required=True,
        sped_length=3,
    )

    CRZ = fields.Integer(
        string="Posição do Contador de Redução Z", required=True, sped_length=6
    )

    NUM_COO_FIN = fields.Integer(
        string="Número do Contador de Ordem de Operação",
        required=True,
        sped_length=6,
        help=(
            "Número do Contador de Ordem de Operação do último documento "
            "emitido no dia (Número do COO na Redução Z)"
        ),
    )

    GT_FIN = fields.Float(
        string="Valor do Grande Total final",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_BRT = fields.Monetary(
        string="Valor da venda bruta",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_C405_ids_RegistroC400_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c400",
        string="Equipamento ECF (códigos 02 e 2D)",
        required=True,
        ondelete="cascade",
    )

    reg_C481_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c481",
        "reg_C481_ids_RegistroC405_id",
        string="C481 Resumo Diário de Documentos Emitidos",
        sped_card="1:N",
        help=(
            "C481 Resumo Diário de Documentos Emitidos por ECF – PIS/PASEP "
            "(Códigos 02 e 2D)"
        ),
    )

    reg_C485_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c485",
        "reg_C485_ids_RegistroC405_id",
        string="C485 Resumo Diário de Documentos Emitidos",
        sped_card="1:N",
        help=(
            "C485 Resumo Diário de Documentos Emitidos por ECF – COFINS "
            "(Códigos 02 e 2D)"
        ),
    )


class RegistroC481(models.Model):
    """Resumo Diário de Documentos Emitidos por ECF – PIS/PASEP (Códigos 02 e
    2D)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c481"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 5

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help="Código da Situação Tributária referente ao PIS/PASEP",
    )

    VL_ITEM = fields.Monetary(
        string="Valor total dos itens",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_PIS = fields.Monetary(
        string="Valor da base de cálculo do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP (em percentual)",
    )

    QUANT_BC_PIS = fields.Float(
        string="Quantidade – Base de cálculo PIS/PASEP",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    ALIQ_PIS_QUANT = fields.Float(
        string="Alíquota do PIS/PASEP (em reais)",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_C481_ids_RegistroC405_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c405",
        string="Redução Z (códigos 02 e 2D)",
        required=True,
        ondelete="cascade",
    )


class RegistroC485(models.Model):
    """Resumo Diário de Documentos Emitidos por ECF – COFINS (Códigos 02 e
    2D)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c485"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 5

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente a COFINS", required=True
    )

    VL_ITEM = fields.Monetary(
        string="Valor total dos itens",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_COFINS = fields.Monetary(
        string="Valor da base de cálculo da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota da COFINS (em percentual)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    QUANT_BC_COFINS = fields.Float(
        string="Quantidade – Base de cálculo da COFINS",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    ALIQ_COFINS_QUANT = fields.Float(
        string="Alíquota da COFINS (em reais)",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_C485_ids_RegistroC405_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c405",
        string="Redução Z (códigos 02 e 2D)",
        required=True,
        ondelete="cascade",
    )


class RegistroC489(models.Model):
    "Processo Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c489"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório",
        required=True,
        sped_length=20,
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        required=True,
        help=(
            "Indicador da origem do processo: 1 - Justiça Federal; 3 – "
            "Secretaria da Receita Federal do Brasil 9 - Outros."
        ),
    )

    reg_C489_ids_RegistroC400_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c400",
        string="Equipamento ECF (códigos 02 e 2D)",
        required=True,
        ondelete="cascade",
    )


class RegistroC490(models.Model):
    """Consolidação de Documentos Emitidos por ECF (Códigos 02, 2D, 59 e 60)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c490"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    DT_DOC_INI = fields.Date(
        string="Data de Emissão Inicial dos Documentos", required=True
    )

    DT_DOC_FIN = fields.Date(
        string="Data de Emissão Final dos Documentos", required=True
    )

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        required=True,
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    reg_C490_ids_RegistroC010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )

    reg_C491_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c491",
        "reg_C491_ids_RegistroC490_id",
        string="C491 Detalhamento da Consolidação",
        sped_card="1:N",
        help=(
            "C491 Detalhamento da Consolidação de Documentos Emitidos por ECF "
            "(Códigos 02, 2D, 59 e 60) – PIS/PASEP"
        ),
    )

    reg_C495_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c495",
        "reg_C495_ids_RegistroC490_id",
        string="C495 Detalhamento da Consolidação",
        sped_card="1:N",
        help=(
            "C495 Detalhamento da Consolidação de Documentos Emitidos por ECF "
            "(Códigos 02, 2D, 59 e 60) – COFINS"
        ),
    )

    reg_C499_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c499",
        "reg_C499_ids_RegistroC490_id",
        string="C499 Processo Referenciado",
        sped_card="1:N",
        help="C499 Processo Referenciado - Documentos Emitidos Por ECF",
    )


class RegistroC491(models.Model):
    """Detalhamento da Consolidação de Documentos Emitidos por ECF (Códigos 02,
    2D, 59 e 60) – PIS/PASEP"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c491"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help="Código da Situação Tributária referente ao PIS/PASEP",
    )

    CFOP = fields.Integer(string="Código fiscal de operação e prestação")

    VL_ITEM = fields.Monetary(
        string="Valor total dos itens",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_PIS = fields.Monetary(
        string="Valor da base de cálculo do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP (em percentual)",
    )

    QUANT_BC_PIS = fields.Float(
        string="Quantidade – Base de cálculo PIS/PASEP",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    ALIQ_PIS_QUANT = fields.Float(
        string="Alíquota do PIS/PASEP (em reais)",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_C491_ids_RegistroC490_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c490",
        string="Consolidação de Documentos Emitidos por ECF",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação de Documentos Emitidos por ECF (Códigos 02, 2D, 59 e" " 60)"
        ),
    )


class RegistroC495(models.Model):
    """Detalhamento da Consolidação de Documentos Emitidos por ECF (Códigos 02,
    2D, 59 e 60) – COFINS"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c495"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente a COFINS", required=True
    )

    CFOP = fields.Integer(string="Código fiscal de operação e prestação")

    VL_ITEM = fields.Monetary(
        string="Valor total dos itens",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_COFINS = fields.Monetary(
        string="Valor da base de cálculo da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota da COFINS (em percentual)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    QUANT_BC_COFINS = fields.Float(
        string="Quantidade – Base de cálculo da COFINS",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    ALIQ_COFINS_QUANT = fields.Float(
        string="Alíquota da COFINS (em reais)",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_C495_ids_RegistroC490_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c490",
        string="Consolidação de Documentos Emitidos por ECF",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação de Documentos Emitidos por ECF (Códigos 02, 2D, 59 e" " 60)"
        ),
    )


class RegistroC499(models.Model):
    "Processo Referenciado - Documentos Emitidos Por ECF"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c499"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório",
        required=True,
        sped_length=20,
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        required=True,
        help=(
            "Indicador da origem do processo: 1 - Justiça Federal; 3 – "
            "Secretaria da Receita Federal do Brasil 9 - Outros."
        ),
    )

    reg_C499_ids_RegistroC490_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c490",
        string="Consolidação de Documentos Emitidos por ECF",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação de Documentos Emitidos por ECF (Códigos 02, 2D, 59 e" " 60)"
        ),
    )


class RegistroC500(models.Model):
    """Nota Fiscal/Conta de Energia Elétrica (Código 06), Nota Fiscal de
    Energia Elétrica Eletrônica – NF3e (Código 66), Nota Fiscal/Conta de
    fornecimento D’água Canalizada (Código 29), Nota Fiscal/Consumo
    Fornecimento de Gás (Código 28) e NF-e (Código 55) – Documentos de
    Entrada / Aquisição com Crédito"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c500"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_PART = fields.Char(
        string="Código do participante do fornecedor",
        required=True,
        sped_length=60,
        help=("Código do participante do fornecedor (campo 02 do Registro 0150)."),
    )

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        required=True,
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    COD_SIT = fields.Integer(
        string="Código da situação do documento fiscal",
        required=True,
        help=("Código da situação do documento fiscal, conforme a Tabela 4.1.2"),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    SUB = fields.Integer(string="Subsérie do documento fiscal", sped_length=3)

    NUM_DOC = fields.Integer(
        string="Número do documento fiscal", required=True, sped_length=9
    )

    DT_DOC = fields.Date(string="Data da emissão do documento fiscal", required=True)

    DT_ENT = fields.Date(string="Data da entrada")

    VL_DOC = fields.Monetary(
        string="Valor total do documento fiscal",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS = fields.Monetary(
        string="Valor acumulado do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_INF = fields.Char(
        string="Código da informação complementar",
        sped_length=6,
        help=(
            "Código da informação complementar do documento fiscal (campo 02 "
            "do Registro 0450)"
        ),
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    CHV_DOCe = fields.Integer(string="Chave do Documento Fiscal Eletrônico")

    reg_C500_ids_RegistroC010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )

    reg_C501_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c501",
        "reg_C501_ids_RegistroC500_id",
        string="C501 Complemento da operação",
        sped_card="1:N",
        help=("C501 Complemento da operação (Códigos 06, 28 e 29) – PIS/PASEP"),
    )

    reg_C505_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c505",
        "reg_C505_ids_RegistroC500_id",
        string="C505 Complemento da operação",
        sped_card="1:N",
        help="C505 Complemento da operação (Códigos 06, 28 e 29) – COFINS",
    )

    reg_C509_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c509",
        "reg_C509_ids_RegistroC500_id",
        string="C509 Processo Referenciado",
        sped_card="1:N",
    )


class RegistroC501(models.Model):
    "Complemento da operação (Códigos 06, 28 e 29) – PIS/PASEP"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c501"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help="Código da Situação Tributária referente ao PIS/PASEP",
    )

    VL_ITEM = fields.Monetary(
        string="Valor total dos itens",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    NAT_BC_CRED = fields.Char(
        string="Código da Base de Cálculo do Crédito",
        help=(
            "Código da Base de Cálculo do Crédito, conforme a Tabela indicada "
            "no item 4.3.7."
        ),
    )

    VL_BC_PIS = fields.Monetary(
        string="Valor da base de cálculo do PIS/PASEP",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        required=True,
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP (em percentual)",
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_C501_ids_RegistroC500_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c500",
        string="Nota Fiscal/Conta de Energia Elétrica",
        required=True,
        ondelete="cascade",
        help=(
            "Nota Fiscal/Conta de Energia Elétrica (Código 06), Nota Fiscal de"
            " Energia Elétrica Eletrônica – NF3e (Código 66), Nota "
            "Fiscal/Conta de fornecimento D’água Canalizada (Código 29), Nota "
            "Fiscal/Consumo Fornecimento de Gás (Código 28) e NF-e (Código 55)"
            " – Documentos de Entrada / Aquisição com Crédito"
        ),
    )


class RegistroC505(models.Model):
    "Complemento da operação (Códigos 06, 28 e 29) – COFINS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c505"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente a COFINS", required=True
    )

    VL_ITEM = fields.Monetary(
        string="Valor total dos itens",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    NAT_BC_CRED = fields.Char(
        string="Código da Base de Cálculo do Crédito",
        help=(
            "Código da Base de Cálculo do Crédito, conforme a Tabela indicada "
            "no item 4.3.7"
        ),
    )

    VL_BC_COFINS = fields.Monetary(
        string="Valor da base de cálculo da COFINS",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota da COFINS (em percentual)",
        required=True,
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_C505_ids_RegistroC500_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c500",
        string="Nota Fiscal/Conta de Energia Elétrica",
        required=True,
        ondelete="cascade",
        help=(
            "Nota Fiscal/Conta de Energia Elétrica (Código 06), Nota Fiscal de"
            " Energia Elétrica Eletrônica – NF3e (Código 66), Nota "
            "Fiscal/Conta de fornecimento D’água Canalizada (Código 29), Nota "
            "Fiscal/Consumo Fornecimento de Gás (Código 28) e NF-e (Código 55)"
            " – Documentos de Entrada / Aquisição com Crédito"
        ),
    )


class RegistroC509(models.Model):
    "Processo Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c509"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório",
        required=True,
        sped_length=20,
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        required=True,
        help=(
            "Indicador da origem do processo: 1 - Justiça Federal; 3 – "
            "Secretaria da Receita Federal do Brasil 9 – Outros."
        ),
    )

    reg_C509_ids_RegistroC500_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c500",
        string="Nota Fiscal/Conta de Energia Elétrica",
        required=True,
        ondelete="cascade",
        help=(
            "Nota Fiscal/Conta de Energia Elétrica (Código 06), Nota Fiscal de"
            " Energia Elétrica Eletrônica – NF3e (Código 66), Nota "
            "Fiscal/Conta de fornecimento D’água Canalizada (Código 29), Nota "
            "Fiscal/Consumo Fornecimento de Gás (Código 28) e NF-e (Código 55)"
            " – Documentos de Entrada / Aquisição com Crédito"
        ),
    )


class RegistroC600(models.Model):
    """Consolidação Diária de Notas Fiscais/Contas de Energia Elétrica (Código
    06), Nota Fiscal/Conta de Fornecimento d´água (Código 29) e Nota
    Fiscal/Conta de Fornecimento de Gás (Código 28) (Empresas Obrigadas ou
    Não Obrigadas Ao Convenio ICMS 115/03) - - Documentos de Saídas"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c600"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        required=True,
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    COD_MUN = fields.Integer(
        string="Código do município dos pontos de consumo",
        help=("Código do município dos pontos de consumo, conforme a tabela IBGE"),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    SUB = fields.Integer(string="Subsérie do documento fiscal", sped_length=3)

    COD_CONS = fields.Integer(
        string="Código de classe de consumo de energia elétrica",
        help=(
            "Código de classe de consumo de energia elétrica, conforme a "
            "Tabela 4.4.5, ou Código de Consumo de Fornecimento D´água – "
            "Tabela 4.4.2 ou Código da classe de consumo de gás canalizado "
            "conforme Tabela 4.4.3."
        ),
    )

    QTD_CONS = fields.Integer(
        string="Quantidade",
        required=True,
        help="Quantidade de documentos consolidados neste registro",
    )

    QTD_CANC = fields.Integer(string="Quantidade de documentos cancelados")

    DT_DOC = fields.Date(string="Data dos documentos consolidados", required=True)

    VL_DOC = fields.Monetary(
        string="Valor total dos documentos",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESC = fields.Monetary(
        string="Valor acumulado dos descontos",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CONS = fields.Integer(
        string="Consumo total acumulado",
        help="Consumo total acumulado, em kWh (Código 06)",
    )

    VL_FORN = fields.Monetary(
        string="Valor acumulado do fornecimento",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SERV_NT = fields.Monetary(
        string="Valor acumulado dos serviços não-tributados",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor acumulado dos serviços não-tributados pelo ICMS",
    )

    VL_TERC = fields.Monetary(
        string="Valores cobrados em nome de terceiros",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DA = fields.Monetary(
        string="Valor acumulado das despesas acessórias",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor acumulado da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS = fields.Monetary(
        string="Valor acumulado do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ICMS_ST = fields.Monetary(
        string="Valor acumulado da base de cálculo",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor acumulado da base de cálculo do ICMS substituição " "tributária"),
    )

    VL_ICMS_ST = fields.Monetary(
        string="Valor acumulado do ICMS retido",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor acumulado do ICMS retido por substituição tributária",
    )

    VL_PIS = fields.Monetary(
        string="Valor acumulado do PIS/PASEP",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_COFINS = fields.Monetary(
        string="Valor acumulado da COFINS",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_C600_ids_RegistroC010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )

    reg_C601_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c601",
        "reg_C601_ids_RegistroC600_id",
        string="C601 Complemento da Consolidação Diária",
        sped_card="1:N",
        help=(
            "C601 Complemento da Consolidação Diária (Códigos 06, 29 e 28) – "
            "Documentos de Saidas - PIS/PASEP"
        ),
    )

    reg_C605_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c605",
        "reg_C605_ids_RegistroC600_id",
        string="C605 Complemento da Consolidação Diária",
        sped_card="1:N",
        help=(
            "C605 Complemento da Consolidação Diária (Códigos 06, 29 e 28) – "
            "Documentos de Saidas – COFINS"
        ),
    )

    reg_C609_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c609",
        "reg_C609_ids_RegistroC600_id",
        string="C609 Processo Referenciado",
        sped_card="1:N",
    )


class RegistroC601(models.Model):
    """Complemento da Consolidação Diária (Códigos 06, 29 e 28) – Documentos de
    Saidas - PIS/PASEP"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c601"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help="Código da Situação Tributária referente ao PIS/PASEP",
    )

    VL_ITEM = fields.Monetary(
        string="Valor total dos itens",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_PIS = fields.Monetary(
        string="Valor da base de cálculo do PIS/PASEP",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        required=True,
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP (em percentual)",
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_C601_ids_RegistroC600_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c600",
        string="Consolidação Diária de Notas Fiscais/Contas",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação Diária de Notas Fiscais/Contas de Energia Elétrica "
            "(Código 06), Nota Fiscal/Conta de Fornecimento d´água (Código 29)"
            " e Nota Fiscal/Conta de Fornecimento de Gás (Código 28) (Empresas"
            " Obrigadas ou Não Obrigadas Ao Convenio ICMS 115/03) - - "
            "Documentos de Saídas"
        ),
    )


class RegistroC605(models.Model):
    """Complemento da Consolidação Diária (Códigos 06, 29 e 28) – Documentos de
    Saidas – COFINS"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c605"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente a COFINS", required=True
    )

    VL_ITEM = fields.Monetary(
        string="Valor total dos itens",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_COFINS = fields.Monetary(
        string="Valor da base de cálculo da COFINS",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota da COFINS (em percentual)",
        required=True,
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_C605_ids_RegistroC600_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c600",
        string="Consolidação Diária de Notas Fiscais/Contas",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação Diária de Notas Fiscais/Contas de Energia Elétrica "
            "(Código 06), Nota Fiscal/Conta de Fornecimento d´água (Código 29)"
            " e Nota Fiscal/Conta de Fornecimento de Gás (Código 28) (Empresas"
            " Obrigadas ou Não Obrigadas Ao Convenio ICMS 115/03) - - "
            "Documentos de Saídas"
        ),
    )


class RegistroC609(models.Model):
    "Processo Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c609"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório",
        required=True,
        sped_length=20,
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        required=True,
        help=(
            "Indicador da origem do processo: 1 - Justiça Federal; 3 – "
            "Secretaria da Receita Federal do Brasil"
        ),
    )

    reg_C609_ids_RegistroC600_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c600",
        string="Consolidação Diária de Notas Fiscais/Contas",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação Diária de Notas Fiscais/Contas de Energia Elétrica "
            "(Código 06), Nota Fiscal/Conta de Fornecimento d´água (Código 29)"
            " e Nota Fiscal/Conta de Fornecimento de Gás (Código 28) (Empresas"
            " Obrigadas ou Não Obrigadas Ao Convenio ICMS 115/03) - - "
            "Documentos de Saídas"
        ),
    )


class RegistroC800(models.Model):
    "Cupom Fiscal Eletrônico – CF-e (Código 59)"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c800"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        required=True,
        sped_length=2,
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    COD_SIT = fields.Integer(
        string="Código da situação do documento fiscal",
        required=True,
        sped_length=2,
        help=("Código da situação do documento fiscal, conforme a Tabela 4.1.2"),
    )

    NUM_CFE = fields.Integer(
        string="Número do Cupom Fiscal Eletrônico", required=True, sped_length=9
    )

    DT_DOC = fields.Date(
        string="Data da emissão do Cupom Fiscal Eletrônico",
        required=True,
        sped_length=8,
    )

    VL_CFE = fields.Monetary(
        string="Valor total do Cupom Fiscal Eletrônico",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_PIS = fields.Monetary(
        string="Valor total do PIS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_COFINS = fields.Monetary(
        string="Valor total da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CNPJ_CPF = fields.Char(string="CNPJ ou CPF do destinatário", sped_length=14)

    NR_SAT = fields.Integer(string="Número de Série do equipamento SAT", sped_length=9)

    CHV_CFE = fields.Integer(string="Chave do Cupom Fiscal Eletrônico", sped_length=44)

    VL_DESC = fields.Monetary(
        string="Valor total do desconto/exclusão sobre item",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_MERC = fields.Monetary(
        string="Valor total das mercadorias e serviços",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_OUT_DA = fields.Monetary(
        string="Valor de outras desp",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor de outras desp. Acessórias (acréscimo)",
    )

    VL_ICMS = fields.Monetary(
        string="Valor do ICMS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_PIS_ST = fields.Monetary(
        string="Valor total do PIS retido por subst",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor total do PIS retido por subst. trib.",
    )

    VL_COFINS_ST = fields.Monetary(
        string="Valor total da COFINS retido por subst",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor total da COFINS retido por subst. trib.",
    )

    reg_C800_ids_RegistroC010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )

    reg_C810_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c810",
        "reg_C810_ids_RegistroC800_id",
        string="C810 Detalhamento",
        sped_card="1:N",
        help=(
            "C810 Detalhamento do Cupom Fiscal Eletrônico – CF-e (Código 59) –"
            " PIS/PASEP e COFINS"
        ),
    )

    reg_C820_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c820",
        "reg_C820_ids_RegistroC800_id",
        string="C820 Detalhamento",
        sped_card="1:N",
        help=(
            "C820 Detalhamento do Cupom Fiscal Eletrônico – CF-e (código 59) –"
            " PIS/PASEP e COFINS Apurado por Unidade de Medida de Produto"
        ),
    )

    reg_C830_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c830",
        "reg_C830_ids_RegistroC800_id",
        string="C830 Processo Referenciado",
        sped_card="1:N",
    )


class RegistroC810(models.Model):
    """Detalhamento do Cupom Fiscal Eletrônico – CF-e (Código 59) – PIS/PASEP e
    COFINS"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c810"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    CFOP = fields.Integer(
        string="Código fiscal de operação e prestação", required=True, sped_length=4
    )

    VL_ITEM = fields.Monetary(
        string="Valor total dos itens",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help="Código da Situação Tributária referente ao PIS/PASEP",
    )

    VL_BC_PIS = fields.Monetary(
        string="Valor da base de cálculo do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP (em percentual)",
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente a COFINS", required=True
    )

    VL_BC_COFINS = fields.Monetary(
        string="Valor da base de cálculo da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota da COFINS (em percentual)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_C810_ids_RegistroC800_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c800",
        string="Cupom Fiscal Eletrônico – CF-e",
        required=True,
        ondelete="cascade",
        help="Cupom Fiscal Eletrônico – CF-e (Código 59)",
    )


class RegistroC820(models.Model):
    """Detalhamento do Cupom Fiscal Eletrônico – CF-e (código 59) – PIS/PASEP e
    COFINS Apurado por Unidade de Medida de Produto"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c820"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    CFOP = fields.Integer(string="Código fiscal de operação e prestação", required=True)

    VL_ITEM = fields.Monetary(
        string="Valor total dos itens",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help="Código da Situação Tributária referente ao PIS/PASEP",
    )

    QUANT_BC_PIS = fields.Float(
        string="Base de cálculo em quantidade",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help="Base de cálculo em quantidade - PIS/PASEP",
    )

    ALIQ_PIS_QUANT = fields.Float(
        string="Alíquota do PIS/PASEP (em reais)",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente a COFINS", required=True
    )

    QUANT_BC_COFINS = fields.Float(
        string="Base de cálculo em quantidade – COFINS",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    ALIQ_COFINS_QUANT = fields.Float(
        string="Alíquota da COFINS (em reais)",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_C820_ids_RegistroC800_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c800",
        string="Cupom Fiscal Eletrônico – CF-e",
        required=True,
        ondelete="cascade",
        help="Cupom Fiscal Eletrônico – CF-e (Código 59)",
    )


class RegistroC830(models.Model):
    "Processo Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c830"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório",
        required=True,
        sped_length=20,
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        required=True,
        help=(
            "Indicador da origem do processo: 1 - Justiça Federal; 3 – "
            "Secretaria da Receita Federal do Brasil 9 - Outros."
        ),
    )

    reg_C830_ids_RegistroC800_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c800",
        string="Cupom Fiscal Eletrônico – CF-e",
        required=True,
        ondelete="cascade",
        help="Cupom Fiscal Eletrônico – CF-e (Código 59)",
    )


class RegistroC860(models.Model):
    """Identificação do Equipamento SAT- CF-e (Código 59) (*) A partir da
    versão 2.11 do PVA (Período de apuração a partir de maio/2015)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c860"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        required=True,
        sped_length=2,
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    NR_SAT = fields.Integer(
        string="Número de Série do equipamento SAT", required=True, sped_length=9
    )

    DT_DOC = fields.Date(string="Data de emissão dos documentos fiscais", sped_length=8)

    DOC_INI = fields.Integer(string="Número do documento inicial", sped_length=9)

    DOC_FIM = fields.Integer(string="Número do documento final", sped_length=9)

    reg_C860_ids_RegistroC010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )

    reg_C870_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c870",
        "reg_C870_ids_RegistroC860_id",
        string="C870 Detalhamento do Cupom Fiscal Eletrônico",
        sped_card="1:N",
        help=(
            "C870 Detalhamento do Cupom Fiscal Eletrônico (Código 59) – "
            "PIS/PASEP e COFINS"
        ),
    )

    reg_C880_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c880",
        "reg_C880_ids_RegistroC860_id",
        string="C880 Detalhamento do Cupom Fiscal Eletrônico",
        sped_card="1:N",
        help=(
            "C880 Detalhamento do Cupom Fiscal Eletrônico (Código 59) – " "PIS/PASEP"
        ),
    )

    reg_C890_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.c890",
        "reg_C890_ids_RegistroC860_id",
        string="C890 Processo Referenciado",
        sped_card="1:N",
    )


class RegistroC870(models.Model):
    """Detalhamento do Cupom Fiscal Eletrônico (Código 59) – PIS/PASEP e
    COFINS"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c870"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    CFOP = fields.Integer(string="Código fiscal de operação e prestação", required=True)

    VL_ITEM = fields.Monetary(
        string="Valor total dos itens",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESC = fields.Monetary(
        string="Valor da exclusão/desconto comercial dos itens",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help="Código da Situação Tributária referente ao PIS/PASEP",
    )

    VL_BC_PIS = fields.Monetary(
        string="Valor da base de cálculo do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP (em percentual)",
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente a COFINS", required=True
    )

    VL_BC_COFINS = fields.Monetary(
        string="Valor da base de cálculo da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota da COFINS (em percentual)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_C870_ids_RegistroC860_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c860",
        string="Identificação do Equipamento SAT- CF-e",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação do Equipamento SAT- CF-e (Código 59) (*) A partir "
            "da versão 2.11 do PVA (Período de apuração a partir de maio/2015)"
        ),
    )


class RegistroC880(models.Model):
    "Detalhamento do Cupom Fiscal Eletrônico (Código 59) – PIS/PASEP"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c880"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    CFOP = fields.Integer(string="Código fiscal de operação e prestação", required=True)

    VL_ITEM = fields.Monetary(
        string="Valor total dos itens",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESC = fields.Monetary(
        string="Valor da exclusão/desconto comercial dos itens",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help="Código da Situação Tributária referente ao PIS/PASEP",
    )

    QUANT_BC_PIS = fields.Float(
        string="Base de cálculo em quantidade",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help="Base de cálculo em quantidade - PIS/PASEP",
    )

    ALIQ_PIS_QUANT = fields.Float(
        string="Alíquota do PIS/PASEP (em reais)",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente a COFINS", required=True
    )

    QUANT_BC_COFINS = fields.Float(
        string="Base de cálculo em quantidade – COFINS",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    ALIQ_COFINS_QUANT = fields.Float(
        string="Alíquota da COFINS (em reais)",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_C880_ids_RegistroC860_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c860",
        string="Identificação do Equipamento SAT- CF-e",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação do Equipamento SAT- CF-e (Código 59) (*) A partir "
            "da versão 2.11 do PVA (Período de apuração a partir de maio/2015)"
        ),
    )


class RegistroC890(models.Model):
    "Processo Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.c890"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório",
        required=True,
        sped_length=20,
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        required=True,
        help=(
            "Indicador da origem do processo: 1 - Justiça Federal; 3 – "
            "Secretaria da Receita Federal do Brasil 9 - Outros."
        ),
    )

    reg_C890_ids_RegistroC860_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.c860",
        string="Identificação do Equipamento SAT- CF-e",
        required=True,
        ondelete="cascade",
        help=(
            "Identificação do Equipamento SAT- CF-e (Código 59) (*) A partir "
            "da versão 2.11 do PVA (Período de apuração a partir de maio/2015)"
        ),
    )


class RegistroD010(models.Model):
    "Identificação do Estabelecimento"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.d010"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    CNPJ = fields.Char(
        string="Número de inscrição do estabelecimento no CNPJ", required=True
    )

    reg_D100_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.d100",
        "reg_D100_ids_RegistroD010_id",
        string="D100 Aquisição de Serviços de Transportes",
        sped_card="1:N",
        help=(
            "D100 Aquisição de Serviços de Transportes (Códigos 07, 08, 8B, "
            "09, 10, 11, 26, 27, 57, 63 e 67)."
        ),
    )

    reg_D200_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.d200",
        "reg_D200_ids_RegistroD010_id",
        string="D200 Resumo da Escrituração Diária – Prestação",
        sped_card="1:N",
        help=(
            "D200 Resumo da Escrituração Diária – Prestação de Serviços de "
            "Transportes (Códigos 07, 08, 8B, 09, 10, 11, 26, 27, 57, 63 e "
            "67)."
        ),
    )

    reg_D300_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.d300",
        "reg_D300_ids_RegistroD010_id",
        string="D300 Resumo da Escrituração Diária",
        sped_card="1:N",
        help=("D300 Resumo da Escrituração Diária (Códigos 13, 14, 15, 16 e 18)."),
    )

    reg_D350_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.d350",
        "reg_D350_ids_RegistroD010_id",
        string="D350 Resumo Diário de Cupom Fiscal Emitido por ECF",
        sped_card="1:N",
        help=(
            "D350 Resumo Diário de Cupom Fiscal Emitido por ECF (Códigos 2E, "
            "13, 14, 15 e 16)"
        ),
    )

    reg_D500_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.d500",
        "reg_D500_ids_RegistroD010_id",
        string="D500 Nota Fiscal de Serviço de Comunicação",
        sped_card="1:N",
        help=(
            "D500 Nota Fiscal de Serviço de Comunicação (Código 21) e Serviço "
            "de Telecomunicação (Código 22) - Operação de Aquisição com "
            "Direito a Crédito"
        ),
    )

    reg_D600_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.d600",
        "reg_D600_ids_RegistroD010_id",
        string="D600 Consolidação da Prestação de Serviços – Notas",
        sped_card="1:N",
        help=(
            "D600 Consolidação da Prestação de Serviços – Notas de Serviço de "
            "Comunicação (Código 21) e de Serviço de Telecomunicação (Código "
            "22)"
        ),
    )


class RegistroD100(models.Model):
    """Aquisição de Serviços de Transportes (Códigos 07, 08, 8B, 09, 10, 11,
    26, 27, 57, 63 e 67)."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.d100"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    IND_OPER = fields.Char(
        string="Indicador do tipo de operação",
        required=True,
        help="Indicador do tipo de operação: 0- Aquisição",
    )

    IND_EMIT = fields.Char(
        string="Indicador do emitente do documento fiscal",
        required=True,
        help=(
            "Indicador do emitente do documento fiscal: 0- Emissão Própria; 1-"
            " Emissão por Terceiros"
        ),
    )

    COD_PART = fields.Char(
        string="Código do participante",
        required=True,
        sped_length=60,
        help="Código do participante (campo 02 do Registro 0150).",
    )

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        required=True,
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    COD_SIT = fields.Integer(
        string="Código da situação do documento fiscal",
        required=True,
        help=("Código da situação do documento fiscal, conforme a Tabela 4.1.2"),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    SUB = fields.Char(string="Subsérie do documento fiscal", sped_length=3)

    NUM_DOC = fields.Integer(
        string="Número do documento fiscal", required=True, sped_length=9
    )

    CHV_CTE = fields.Integer(string="Chave do Conhecimento de Transporte Eletrônico")

    DT_DOC = fields.Date(
        string="Data de referência/emissão dos documentos fiscais", required=True
    )

    DT_A_P = fields.Date(string="Data da aquisição ou da prestação do serviço")

    TP_CT_e = fields.Integer(
        string="Tipo de Conhecimento",
        help=(
            "Tipo de Conhecimento de Transporte Eletrônico conforme definido "
            "no Manual de Integração do CT-e"
        ),
    )

    CHV_CTE_REF = fields.Integer(
        string="Chave do CT-e de referência cujos valores",
        help=(
            "Chave do CT-e de referência cujos valores foram complementados "
            "(opção “1” do campo anterior) ou cujo débito foi anulado (opção "
            "“2” do campo anterior)."
        ),
    )

    VL_DOC = fields.Monetary(
        string="Valor total do documento fiscal",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESC = fields.Monetary(
        string="Valor total do desconto",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_FRT = fields.Char(
        string="Indicador do tipo do frete",
        required=True,
        help=(
            "Indicador do tipo do frete: 0- Por conta de terceiros; 1- Por "
            "conta do emitente; 2- Por conta do destinatário; 9- Sem cobrança "
            "de frete."
        ),
    )

    VL_SERV = fields.Monetary(
        string="Valor total da prestação de serviço",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS = fields.Monetary(
        string="Valor do ICMS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_NT = fields.Monetary(
        string="Valor não-tributado do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_INF = fields.Char(
        string="Código da informação complementar",
        sped_length=6,
        help=(
            "Código da informação complementar do documento fiscal (campo 02 "
            "do Registro 0450)"
        ),
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_D100_ids_RegistroD010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.d010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )

    reg_D101_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.d101",
        "reg_D101_ids_RegistroD100_id",
        string="D101 Complemento do Documento",
        sped_card="1:N",
        help="D101 Complemento do Documento de Transporte – PIS/PASEP",
    )

    reg_D105_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.d105",
        "reg_D105_ids_RegistroD100_id",
        string="D105 Complemento do Documento",
        sped_card="1:N",
        help="D105 Complemento do Documento de Transporte – COFINS",
    )

    reg_D111_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.d111",
        "reg_D111_ids_RegistroD100_id",
        string="D111 Processo Referenciado",
        sped_card="1:N",
    )


class RegistroD101(models.Model):
    "Complemento do Documento de Transporte – PIS/PASEP"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.d101"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    IND_NAT_FRT = fields.Char(
        string="Indicador da Natureza do Frete Contratado",
        required=True,
        help=(
            "Indicador da Natureza do Frete Contratado, referente a: 0 – "
            "Operações de vendas, com ônus suportado pelo estabelecimento "
            "vendedor; 1 – Operações de vendas, com ônus suportado pelo "
            "adquirente; 2 – Operações de compras (bens para revenda, "
            "matérias- prima e outros produtos, geradores de crédito); 3 – "
            "Operações de compras (bens para revenda, matérias- prima e outros"
            " produtos, não geradores de crédito); 4 – Transferência de "
            "produtos acabados entre estabelecimentos da pessoa jurídica; 5 – "
            "Transferência de produtos em elaboração entre estabelecimentos da"
            " pessoa jurídica 9 – Outras."
        ),
    )

    VL_ITEM = fields.Monetary(
        string="Valor total dos itens",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help="Código da Situação Tributária referente ao PIS/PASEP",
    )

    NAT_BC_CRED = fields.Char(
        string="Código da Base de Cálculo do Crédito",
        help=(
            "Código da Base de Cálculo do Crédito, conforme a Tabela indicada "
            "no item 4.3.7."
        ),
    )

    VL_BC_PIS = fields.Monetary(
        string="Valor da base de cálculo do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP (em percentual)",
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_D101_ids_RegistroD100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.d100",
        string="Aquisição de Serviços de Transportes",
        required=True,
        ondelete="cascade",
        help=(
            "Aquisição de Serviços de Transportes (Códigos 07, 08, 8B, 09, 10,"
            " 11, 26, 27, 57, 63 e 67)."
        ),
    )


class RegistroD105(models.Model):
    "Complemento do Documento de Transporte – COFINS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.d105"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    IND_NAT_FRT = fields.Char(
        string="Indicador da Natureza do Frete Contratado",
        required=True,
        help=(
            "Indicador da Natureza do Frete Contratado, referente a: 0 – "
            "Operações de vendas, com ônus suportado pelo estabelecimento "
            "vendedor; 1 – Operações de vendas, com ônus suportado pelo "
            "adquirente; 2 – Operações de compras (bens para revenda, "
            "matérias- prima e outros produtos, geradores de crédito); 3 – "
            "Operações de compras (bens para revenda, matérias- prima e outros"
            " produtos, não geradores de crédito); 4 – Transferência de "
            "produtos acabados entre estabelecimentos da pessoa jurídica 5 – "
            "Transferência de produtos em elaboração entre estabelecimentos da"
            " pessoa jurídica 9 – Outras."
        ),
    )

    VL_ITEM = fields.Monetary(
        string="Valor total dos itens",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente a COFINS", required=True
    )

    NAT_BC_CRED = fields.Char(
        string="Código da base de Cálculo do Crédito",
        help=(
            "Código da base de Cálculo do Crédito, conforme a Tabela indicada "
            "no item 4.3.7"
        ),
    )

    VL_BC_COFINS = fields.Monetary(
        string="Valor da base de cálculo da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota da COFINS (em percentual)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_D105_ids_RegistroD100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.d100",
        string="Aquisição de Serviços de Transportes",
        required=True,
        ondelete="cascade",
        help=(
            "Aquisição de Serviços de Transportes (Códigos 07, 08, 8B, 09, 10,"
            " 11, 26, 27, 57, 63 e 67)."
        ),
    )


class RegistroD111(models.Model):
    "Processo Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.d111"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório",
        required=True,
        sped_length=20,
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        required=True,
        help=(
            "Indicador da origem do processo: 1 - Justiça Federal; 3 – "
            "Secretaria da Receita Federal do Brasil 9 – Outros."
        ),
    )

    reg_D111_ids_RegistroD100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.d100",
        string="Aquisição de Serviços de Transportes",
        required=True,
        ondelete="cascade",
        help=(
            "Aquisição de Serviços de Transportes (Códigos 07, 08, 8B, 09, 10,"
            " 11, 26, 27, 57, 63 e 67)."
        ),
    )


class RegistroD200(models.Model):
    """Resumo da Escrituração Diária – Prestação de Serviços de Transportes
    (Códigos 07, 08, 8B, 09, 10, 11, 26, 27, 57, 63 e 67)."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.d200"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        required=True,
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    COD_SIT = fields.Integer(
        string="Código da situação do documento fiscal",
        required=True,
        help=("Código da situação do documento fiscal, conforme a Tabela 4.1.2"),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    SUB = fields.Char(string="Subsérie do documento fiscal", sped_length=3)

    NUM_DOC_INI = fields.Integer(
        string="Número do documento fiscal inicial emitido",
        required=True,
        sped_length=9,
        help=(
            "Número do documento fiscal inicial emitido no período (mesmo "
            "modelo, série e subsérie)."
        ),
    )

    NUM_DOC_FIN = fields.Integer(
        string="Número do documento fiscal final emitido",
        required=True,
        sped_length=9,
        help=(
            "Número do documento fiscal final emitido no período (mesmo "
            "modelo, série e subsérie)."
        ),
    )

    CFOP = fields.Integer(
        string="Código Fiscal de Operação",
        required=True,
        help=(
            "Código Fiscal de Operação e Prestação conforme tabela indicada no"
            " item 4.2.2"
        ),
    )

    DT_REF = fields.Date(
        string="Data do dia de referência do resumo diário", required=True
    )

    VL_DOC = fields.Monetary(
        string="Valor total dos documentos fiscais",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESC = fields.Monetary(
        string="Valor total dos descontos",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_D200_ids_RegistroD010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.d010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )

    reg_D201_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.d201",
        "reg_D201_ids_RegistroD200_id",
        string="D201 Totalização do Resumo Diário – PIS/PASEP",
        sped_card="1:N",
    )

    reg_D205_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.d205",
        "reg_D205_ids_RegistroD200_id",
        string="D205 Totalização do Resumo Diário – COFINS",
        sped_card="1:N",
    )

    reg_D209_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.d209",
        "reg_D209_ids_RegistroD200_id",
        string="D209 Processo Referenciado",
        sped_card="1:N",
    )


class RegistroD201(models.Model):
    "Totalização do Resumo Diário – PIS/PASEP"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.d201"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help="Código da Situação Tributária referente ao PIS/PASEP",
    )

    VL_ITEM = fields.Monetary(
        string="Valor total dos itens",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_PIS = fields.Monetary(
        string="Valor da base de cálculo do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP (em percentual)",
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_D201_ids_RegistroD200_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.d200",
        string="Resumo da Escrituração Diária – Prestação",
        required=True,
        ondelete="cascade",
        help=(
            "Resumo da Escrituração Diária – Prestação de Serviços de "
            "Transportes (Códigos 07, 08, 8B, 09, 10, 11, 26, 27, 57, 63 e "
            "67)."
        ),
    )


class RegistroD205(models.Model):
    "Totalização do Resumo Diário – COFINS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.d205"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    CST_COFINS = fields.Char(
        string="Código da Situação Tributária referente a COFINS",
        required=True,
        help="Código da Situação Tributária referente a COFINS. N",
    )

    VL_ITEM = fields.Monetary(
        string="Valor total dos itens",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_COFINS = fields.Monetary(
        string="Valor da base de cálculo da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota da COFINS (em percentual)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_D205_ids_RegistroD200_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.d200",
        string="Resumo da Escrituração Diária – Prestação",
        required=True,
        ondelete="cascade",
        help=(
            "Resumo da Escrituração Diária – Prestação de Serviços de "
            "Transportes (Códigos 07, 08, 8B, 09, 10, 11, 26, 27, 57, 63 e "
            "67)."
        ),
    )


class RegistroD209(models.Model):
    "Processo Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.d209"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório",
        required=True,
        sped_length=20,
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        required=True,
        help=(
            "Indicador da origem do processo: 1 - Justiça Federal; 3 – "
            "Secretaria da Receita Federal do Brasil 9 – Outros."
        ),
    )

    reg_D209_ids_RegistroD200_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.d200",
        string="Resumo da Escrituração Diária – Prestação",
        required=True,
        ondelete="cascade",
        help=(
            "Resumo da Escrituração Diária – Prestação de Serviços de "
            "Transportes (Códigos 07, 08, 8B, 09, 10, 11, 26, 27, 57, 63 e "
            "67)."
        ),
    )


class RegistroD300(models.Model):
    "Resumo da Escrituração Diária (Códigos 13, 14, 15, 16 e 18)."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.d300"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        required=True,
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1."),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    SUB = fields.Integer(string="Subsérie do documento fiscal", sped_length=3)

    NUM_DOC_INI = fields.Integer(
        string="Número do primeiro documento fiscal emitido",
        sped_length=6,
        help=(
            "Número do primeiro documento fiscal emitido no período (mesmo "
            "modelo, série e subsérie)"
        ),
    )

    NUM_DOC_FIN = fields.Integer(
        string="Número do último documento fiscal emitido",
        sped_length=6,
        help=(
            "Número do último documento fiscal emitido no período (mesmo "
            "modelo, série e subsérie)"
        ),
    )

    CFOP = fields.Integer(
        string="Código Fiscal de Operação",
        required=True,
        help=(
            "Código Fiscal de Operação e Prestação conforme tabela indicada no"
            " item 4.2.2"
        ),
    )

    DT_REF = fields.Date(
        string="Data do dia de referência do resumo diário", required=True
    )

    VL_DOC = fields.Monetary(
        string="Valor total dos documentos fiscais emitidos",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESC = fields.Monetary(
        string="Valor total dos descontos",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help="Código da Situação Tributária referente ao PIS/PASEP",
    )

    VL_BC_PIS = fields.Monetary(
        string="Valor da base de cálculo do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP (em percentual)",
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente a COFINS", required=True
    )

    VL_BC_COFINS = fields.Monetary(
        string="Valor da base de cálculo da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota da COFINS (em percentual)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_D300_ids_RegistroD010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.d010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )

    reg_D309_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.d309",
        "reg_D309_ids_RegistroD300_id",
        string="D309 Processo Referenciado",
        sped_card="1:N",
    )


class RegistroD309(models.Model):
    "Processo Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.d309"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório",
        required=True,
        sped_length=20,
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        required=True,
        help=(
            "Indicador da origem do processo: 1 - Justiça Federal; 3 – "
            "Secretaria da Receita Federal do Brasil 9 – Outros."
        ),
    )

    reg_D309_ids_RegistroD300_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.d300",
        string="Resumo da Escrituração Diária",
        required=True,
        ondelete="cascade",
        help="Resumo da Escrituração Diária (Códigos 13, 14, 15, 16 e 18).",
    )


class RegistroD350(models.Model):
    """Resumo Diário de Cupom Fiscal Emitido por ECF (Códigos 2E, 13, 14, 15 e
    16)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.d350"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        required=True,
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1"),
    )

    ECF_MOD = fields.Char(string="Modelo do equipamento", required=True, sped_length=20)

    ECF_FAB = fields.Char(
        string="Número de série de fabricação do ECF", required=True, sped_length=21
    )

    DT_DOC = fields.Date(
        string="Data do movimento a que se refere a Redução Z", required=True
    )

    CRO = fields.Integer(
        string="Posição do Contador de Reinício de Operação",
        required=True,
        sped_length=3,
    )

    CRZ = fields.Integer(
        string="Posição do Contador de Redução Z", required=True, sped_length=6
    )

    NUM_COO_FIN = fields.Integer(
        string="Número do Contador de Ordem de Operação",
        required=True,
        sped_length=6,
        help=(
            "Número do Contador de Ordem de Operação do último documento "
            "emitido no dia. (Número do COO na Redução Z)"
        ),
    )

    GT_FIN = fields.Float(
        string="Valor do Grande Total final",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_BRT = fields.Monetary(
        string="Valor da venda bruta",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help="Código da Situação Tributária referente ao PIS/PASEP",
    )

    VL_BC_PIS = fields.Monetary(
        string="Valor da base de cálculo do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP (em percentual)",
    )

    QUANT_BC_PIS = fields.Float(
        string="Quantidade – Base de cálculo PIS/PASEP",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    ALIQ_PIS_QUANT = fields.Float(
        string="Alíquota do PIS/PASEP (em reais)",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente a COFINS", required=True
    )

    VL_BC_COFINS = fields.Monetary(
        string="Valor da base de cálculo da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota da COFINS (em percentual)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    QUANT_BC_COFINS = fields.Float(
        string="Quantidade – Base de cálculo da COFINS",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    ALIQ_COFINS_QUANT = fields.Float(
        string="Alíquota da COFINS (em reais)",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_D350_ids_RegistroD010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.d010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )

    reg_D359_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.d359",
        "reg_D359_ids_RegistroD350_id",
        string="D359 Processo Referenciado",
        sped_card="1:N",
    )


class RegistroD359(models.Model):
    "Processo Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.d359"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório",
        required=True,
        sped_length=20,
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        required=True,
        help=(
            "Indicador da origem do processo: 1 - Justiça Federal; 3 – "
            "Secretaria da Receita Federal do Brasil 9 – Outros."
        ),
    )

    reg_D359_ids_RegistroD350_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.d350",
        string="Resumo Diário de Cupom Fiscal Emitido por ECF",
        required=True,
        ondelete="cascade",
        help=(
            "Resumo Diário de Cupom Fiscal Emitido por ECF (Códigos 2E, 13, "
            "14, 15 e 16)"
        ),
    )


class RegistroD500(models.Model):
    """Nota Fiscal de Serviço de Comunicação (Código 21) e Serviço de
    Telecomunicação (Código 22) - Operação de Aquisição com Direito a
    Crédito"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.d500"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    IND_OPER = fields.Char(
        string="Indicador do tipo de operação",
        required=True,
        help="Indicador do tipo de operação: 0- Aquisição",
    )

    IND_EMIT = fields.Char(
        string="Indicador do emitente do documento fiscal",
        required=True,
        help=(
            "Indicador do emitente do documento fiscal: 0- Emissão própria; 1-"
            " Terceiros"
        ),
    )

    COD_PART = fields.Char(
        string="Código do participante prestador do serviço",
        required=True,
        sped_length=60,
        help=(
            "Código do participante prestador do serviço (campo 02 do Registro"
            " 0150)."
        ),
    )

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        required=True,
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1."),
    )

    COD_SIT = fields.Integer(
        string="Çódigo da situação do documento fiscal",
        required=True,
        help=("Çódigo da situação do documento fiscal, conforme a Tabela 4.1.2."),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    SUB = fields.Integer(string="Subsérie do documento fiscal", sped_length=3)

    NUM_DOC = fields.Integer(
        string="Número do documento fiscal", required=True, sped_length=9
    )

    DT_DOC = fields.Date(string="Data da emissão do documento fiscal", required=True)

    DT_A_P = fields.Date(string="Data da entrada (aquisição)", required=True)

    VL_DOC = fields.Monetary(
        string="Valor total do documento fiscal",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESC = fields.Monetary(
        string="Valor total do desconto",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SERV = fields.Monetary(
        string="Valor da prestação de serviços",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SERV_NT = fields.Monetary(
        string="Valor total dos serviços não-tributados pelo ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_TERC = fields.Monetary(
        string="Valores cobrados em nome de terceiros",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DA = fields.Monetary(
        string="Valor de outras despesas indicadas",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor de outras despesas indicadas no documento fiscal",
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS = fields.Monetary(
        string="Valor do ICMS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_INF = fields.Char(
        string="Código da informação complementar",
        sped_length=6,
        help=("Código da informação complementar (campo 02 do Registro 0450)"),
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    reg_D500_ids_RegistroD010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.d010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )

    reg_D501_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.d501",
        "reg_D501_ids_RegistroD500_id",
        string="D501 Complemento da Operação",
        sped_card="1:N",
        help="D501 Complemento da Operação (Código 21 e 22) – PIS/PASEP",
    )

    reg_D505_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.d505",
        "reg_D505_ids_RegistroD500_id",
        string="D505 Complemento da Operação",
        sped_card="1:N",
        help="D505 Complemento da Operação (Código 21 e 22) – COFINS",
    )

    reg_D509_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.d509",
        "reg_D509_ids_RegistroD500_id",
        string="D509 Processo Referenciado",
        sped_card="1:N",
    )


class RegistroD501(models.Model):
    "Complemento da Operação (Código 21 e 22) – PIS/PASEP"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.d501"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help="Código da Situação Tributária referente ao PIS/PASEP",
    )

    VL_ITEM = fields.Monetary(
        string="Valor Total dos Itens (Serviços)",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    NAT_BC_CRED = fields.Char(
        string="Código da Base de Cálculo do Crédito",
        help=(
            "Código da Base de Cálculo do Crédito, conforme a Tabela indicada "
            "no item 4.3.7."
        ),
    )

    VL_BC_PIS = fields.Monetary(
        string="Valor da base de cálculo do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP (em percentual)",
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_D501_ids_RegistroD500_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.d500",
        string="Nota Fiscal de Serviço de Comunicação",
        required=True,
        ondelete="cascade",
        help=(
            "Nota Fiscal de Serviço de Comunicação (Código 21) e Serviço de "
            "Telecomunicação (Código 22) - Operação de Aquisição com Direito a"
            " Crédito"
        ),
    )


class RegistroD505(models.Model):
    "Complemento da Operação (Código 21 e 22) – COFINS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.d505"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente a COFINS", required=True
    )

    VL_ITEM = fields.Monetary(
        string="Valor Total dos Itens",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    NAT_BC_CRED = fields.Char(
        string="Código da Base de Cálculo do Crédito",
        help=(
            "Código da Base de Cálculo do Crédito, conforme a Tabela indicada "
            "no item 4.3.7."
        ),
    )

    VL_BC_COFINS = fields.Monetary(
        string="Valor da base de cálculo da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota da COFINS (em percentual)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    reg_D505_ids_RegistroD500_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.d500",
        string="Nota Fiscal de Serviço de Comunicação",
        required=True,
        ondelete="cascade",
        help=(
            "Nota Fiscal de Serviço de Comunicação (Código 21) e Serviço de "
            "Telecomunicação (Código 22) - Operação de Aquisição com Direito a"
            " Crédito"
        ),
    )


class RegistroD509(models.Model):
    "Processo Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.d509"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório",
        required=True,
        sped_length=20,
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        required=True,
        help=(
            "Indicador da origem do processo: 1 - Justiça Federal; 3 – "
            "Secretaria da Receita Federal do Brasil 9 – Outros."
        ),
    )

    reg_D509_ids_RegistroD500_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.d500",
        string="Nota Fiscal de Serviço de Comunicação",
        required=True,
        ondelete="cascade",
        help=(
            "Nota Fiscal de Serviço de Comunicação (Código 21) e Serviço de "
            "Telecomunicação (Código 22) - Operação de Aquisição com Direito a"
            " Crédito"
        ),
    )


class RegistroD600(models.Model):
    """Consolidação da Prestação de Serviços – Notas de Serviço de Comunicação
    (Código 21) e de Serviço de Telecomunicação (Código 22)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.d600"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        required=True,
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1."),
    )

    COD_MUN = fields.Integer(
        string="Código do município dos terminais faturados",
        help=("Código do município dos terminais faturados, conforme a tabela " "IBGE"),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    SUB = fields.Integer(string="Subsérie do documento fiscal", sped_length=3)

    IND_REC = fields.Integer(
        string="Indicador do tipo de receita",
        required=True,
        help=(
            "Indicador do tipo de receita: 0- Receita própria - serviços "
            "prestados; 1- Receita própria - cobrança de débitos; 2- Receita "
            "própria - venda de serviço pré-pago – faturamento de períodos "
            "anteriores; 3- Receita própria - venda de serviço pré-pago – "
            "faturamento no período; 4- Outras receitas próprias de serviços "
            "de comunicação e telecomunicação; 5- Receita própria - co-"
            "faturamento; 6- Receita própria – serviços a faturar em período "
            "futuro; 7– Outras receitas próprias de natureza não-cumulativa; 8"
            " - Outras receitas de terceiros 9 – Outras receitas"
        ),
    )

    QTD_CONS = fields.Integer(
        string="Quantidade",
        required=True,
        help="Quantidade de documentos consolidados neste registro",
    )

    DT_DOC_INI = fields.Date(
        string="Data Inicial dos documentos consolidados",
        required=True,
        help="Data Inicial dos documentos consolidados no período",
    )

    DT_DOC_FIN = fields.Date(
        string="Data Final dos documentos consolidados no período", required=True
    )

    VL_DOC = fields.Monetary(
        string="Valor total acumulado dos documentos fiscais",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESC = fields.Monetary(
        string="Valor acumulado dos descontos",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_SERV = fields.Monetary(
        string="Valor acumulado das prestações",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor acumulado das prestações de serviços tributados pelo ICMS"),
    )

    VL_SERV_NT = fields.Monetary(
        string="Valor acumulado dos serviços não-tributados",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor acumulado dos serviços não-tributados pelo ICMS",
    )

    VL_TERC = fields.Monetary(
        string="Valores cobrados em nome de terceiros",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DA = fields.Monetary(
        string="Valor acumulado das despesas acessórias",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_ICMS = fields.Monetary(
        string="Valor acumulado da base de cálculo do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_ICMS = fields.Monetary(
        string="Valor acumulado do ICMS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    reg_D600_ids_RegistroD010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.d010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )

    reg_D601_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.d601",
        "reg_D601_ids_RegistroD600_id",
        string="D601 Complemento da Consolidação da Prestação",
        sped_card="1:N",
        help=(
            "D601 Complemento da Consolidação da Prestação de Serviços (Código"
            " 21 e 22) – PIS/PASEP"
        ),
    )

    reg_D605_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.d605",
        "reg_D605_ids_RegistroD600_id",
        string="D605 Complemento da Consolidação da Prestação",
        sped_card="1:N",
        help=(
            "D605 Complemento da Consolidação da Prestação de Serviços (Código"
            " 21 e 22) – COFINS"
        ),
    )

    reg_D609_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.d609",
        "reg_D609_ids_RegistroD600_id",
        string="D609 Processo Referenciado",
        sped_card="1:N",
    )


class RegistroD601(models.Model):
    """Complemento da Consolidação da Prestação de Serviços (Código 21 e 22) –
    PIS/PASEP"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.d601"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_CLASS = fields.Integer(
        string="Código de classificação do item do serviço",
        required=True,
        help=(
            "Código de classificação do item do serviço de comunicação ou de "
            "telecomunicação, conforme a Tabela 4.4.1"
        ),
    )

    VL_ITEM = fields.Monetary(
        string="Valor acumulado do item",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESC = fields.Monetary(
        string="Valor acumulado dos descontos/exclusões da base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor acumulado dos descontos/exclusões da base de cálculo",
    )

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help="Código da Situação Tributária referente ao PIS/PASEP",
    )

    VL_BC_PIS = fields.Monetary(
        string="Valor da base de cálculo do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP (em percentual)",
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_CTA = fields.Char(
        string="Código da conta contábil debitada/creditada", sped_length=255
    )

    reg_D601_ids_RegistroD600_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.d600",
        string="Consolidação da Prestação de Serviços – Notas",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação da Prestação de Serviços – Notas de Serviço de "
            "Comunicação (Código 21) e de Serviço de Telecomunicação (Código "
            "22)"
        ),
    )


class RegistroD605(models.Model):
    """Complemento da Consolidação da Prestação de Serviços (Código 21 e 22) –
    COFINS"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.d605"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    COD_CLASS = fields.Integer(
        string="Código de classificação do item do serviço",
        required=True,
        help=(
            "Código de classificação do item do serviço de comunicação ou de "
            "telecomunicação, conforme a Tabela 4.4.1"
        ),
    )

    VL_ITEM = fields.Monetary(
        string="Valor acumulado do item",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DESC = fields.Monetary(
        string="Valor acumulado dos descontos/exclusões da base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor acumulado dos descontos/exclusões da base de cálculo",
    )

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente a COFINS", required=True
    )

    VL_BC_COFINS = fields.Monetary(
        string="Valor da base de cálculo da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota da COFINS (em percentual)",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_CTA = fields.Char(
        string="Código da conta contábil debitada/creditada", sped_length=255
    )

    reg_D605_ids_RegistroD600_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.d600",
        string="Consolidação da Prestação de Serviços – Notas",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação da Prestação de Serviços – Notas de Serviço de "
            "Comunicação (Código 21) e de Serviço de Telecomunicação (Código "
            "22)"
        ),
    )


class RegistroD609(models.Model):
    "Processo Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.d609"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório",
        required=True,
        sped_length=20,
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        required=True,
        help=(
            "Indicador da origem do processo: 1 - Justiça Federal; 3 – "
            "Secretaria da Receita Federal do Brasil 9 – Outros."
        ),
    )

    reg_D609_ids_RegistroD600_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.d600",
        string="Consolidação da Prestação de Serviços – Notas",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação da Prestação de Serviços – Notas de Serviço de "
            "Comunicação (Código 21) e de Serviço de Telecomunicação (Código "
            "22)"
        ),
    )


class RegistroF010(models.Model):
    "Identificação do Estabelecimento"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.f010"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    CNPJ = fields.Char(
        string="Número de inscrição do estabelecimento no CNPJ", required=True
    )

    reg_F100_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.f100",
        "reg_F100_ids_RegistroF010_id",
        string="F100 Demais Documentos e Operações Geradoras",
        sped_card="1:N",
        help=(
            "F100 Demais Documentos e Operações Geradoras de Contribuição e " "Créditos"
        ),
    )

    reg_F120_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.f120",
        "reg_F120_ids_RegistroF010_id",
        string="F120 Bens Incorporados",
        sped_card="1:N",
        help=(
            "F120 Bens Incorporados ao Ativo Imobilizado – Operações Geradoras"
            " de Créditos com base nos Encargos de Depreciação/Amortização"
        ),
    )

    reg_F130_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.f130",
        "reg_F130_ids_RegistroF010_id",
        string="F130 Bens Incorporados",
        sped_card="1:N",
        help=(
            "F130 Bens Incorporados ao Ativo Imobilizado – Operações Geradoras"
            " de Créditos com base no Valor de Aquisição"
        ),
    )

    reg_F150_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.f150",
        "reg_F150_ids_RegistroF010_id",
        string="F150 Crédito Presumido sobre Estoque de Abertura",
        sped_card="1:N",
    )

    reg_F200_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.f200",
        "reg_F200_ids_RegistroF010_id",
        string="F200 Operações",
        sped_card="1:N",
        help=(
            "F200 Operações da Atividade Imobiliária – Unidade Imobiliária " "Vendida"
        ),
    )

    reg_F500_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.f500",
        "reg_F500_ids_RegistroF010_id",
        string="F500 Consolidação das Operações",
        sped_card="1:N",
        help=(
            "F500 Consolidação das Operações da Pessoa Jurídica Submetida ao "
            "Regime de Tributação com Base no Lucro Presumido – Incidência do "
            "PIS/Pasep e da Cofins pelo Regime de Caixa"
        ),
    )

    reg_F510_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.f510",
        "reg_F510_ids_RegistroF010_id",
        string="F510 Consolidação das Operações",
        sped_card="1:N",
        help=(
            "F510 Consolidação das Operações da Pessoa Jurídica Submetida ao "
            "Regime de Tributação com Base no Lucro Presumido – Incidência do "
            "PIS/Pasep e da Cofins pelo Regime de Caixa (Apuração da "
            "Contribuição por Unidade de Medida de Produto)"
        ),
    )

    reg_F525_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.f525",
        "reg_F525_ids_RegistroF010_id",
        string="F525 Composição da Receita Escriturada",
        sped_card="1:N",
        help=(
            "F525 Composição da Receita Escriturada no Período – Detalhamento "
            "da Receita Recebida pelo Regime de Caixa"
        ),
    )

    reg_F550_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.f550",
        "reg_F550_ids_RegistroF010_id",
        string="F550 Consolidação das Operações",
        sped_card="1:N",
        help=(
            "F550 Consolidação das Operações da Pessoa Jurídica Submetida ao "
            "Regime de Tributação com Base no Lucro Presumido – Incidência do "
            "PIS/Pasep e da Cofins pelo Regime de Competência"
        ),
    )

    reg_F560_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.f560",
        "reg_F560_ids_RegistroF010_id",
        string="F560 Consolidação das Operações",
        sped_card="1:N",
        help=(
            "F560 Consolidação das Operações da Pessoa Jurídica Submetida ao "
            "Regime de Tributação com Base no Lucro Presumido – Incidência do "
            "PIS/Pasep e da Cofins pelo Regime de Competência (Apuração da "
            "Contribuição por Unidade de Medida de Produto)"
        ),
    )

    reg_F600_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.f600",
        "reg_F600_ids_RegistroF010_id",
        string="F600 Contribuição Retida na Fonte",
        sped_card="1:N",
    )

    reg_F700_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.f700",
        "reg_F700_ids_RegistroF010_id",
        string="F700 Deduções Diversas",
        sped_card="1:N",
    )

    reg_F800_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.f800",
        "reg_F800_ids_RegistroF010_id",
        string="F800 Créditos Decorrentes de Eventos",
        sped_card="1:N",
        help=("F800 Créditos Decorrentes de Eventos de Incorporação, Fusão e " "Cisão"),
    )


class RegistroF100(models.Model):
    "Demais Documentos e Operações Geradoras de Contribuição e Créditos"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.f100"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    IND_OPER = fields.Char(
        string="Indicador do Tipo da Operação",
        required=True,
        help=(
            "Indicador do Tipo da Operação: 0 – Operação Representativa de "
            "Aquisição, Custos, Despesa ou Encargos, ou Receitas, Sujeita à "
            "Incidência de Crédito de PIS/Pasep ou Cofins (CST 50 a 66). 1 – "
            "Operação Representativa de Receita Auferida Sujeita ao Pagamento "
            "da Contribuição para o PIS/Pasep e da Cofins (CST 01, 02, 03 ou "
            "05). 2 - Operação Representativa de Receita Auferida Não Sujeita "
            "ao Pagamento da Contribuição para o PIS/Pasep e da Cofins (CST "
            "04, 06, 07, 08, 09, 49 ou 99)."
        ),
    )

    COD_PART = fields.Char(
        string="Código do participante",
        sped_length=60,
        help="Código do participante (Campo 02 do Registro 0150)",
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    DT_OPER = fields.Date(string="Data da Operação (ddmmaaaa)", required=True)

    VL_OPER = fields.Monetary(
        string="Valor da Operação/Item",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help=(
            "Código da Situação Tributária referente ao PIS/PASEP, conforme a "
            "Tabela indicada no item 4.3.3."
        ),
    )

    VL_BC_PIS = fields.Float(
        string="Base de cálculo do PIS/PASEP",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente a COFINS",
        required=True,
        help=(
            "Código da Situação Tributária referente a COFINS, conforme a "
            "Tabela indicada no item 4.3.4."
        ),
    )

    VL_BC_COFINS = fields.Float(
        string="Base de cálculo da COFINS",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota da COFINS",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    NAT_BC_CRED = fields.Char(
        string="Código da Base de Cálculo dos Créditos",
        help=(
            "Código da Base de Cálculo dos Créditos, conforme a tabela "
            "indicada no item 4.3.7, caso seja informado código representativo"
            " de crédito nos Campos 07 (CST_PIS) e 11 (CST_COFINS)."
        ),
    )

    IND_ORIG_CRED = fields.Char(string="Indicador da origem do crédito")

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    COD_CCUS = fields.Char(string="Código do Centro de Custos", sped_length=255)

    DESC_DOC_OPER = fields.Char(string="Descrição do Documento/Operação")

    reg_F100_ids_RegistroF010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.f010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )

    reg_F111_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.f111",
        "reg_F111_ids_RegistroF100_id",
        string="F111 Processo Referenciado",
        sped_card="1:N",
    )


class RegistroF111(models.Model):
    "Processo Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.f111"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório",
        required=True,
        sped_length=20,
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        required=True,
        help=(
            "Indicador da origem do processo: 1 - Justiça Federal; 3 – "
            "Secretaria da Receita Federal do Brasil 9 – Outros."
        ),
    )

    reg_F111_ids_RegistroF100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.f100",
        string="Demais Documentos e Operações Geradoras",
        required=True,
        ondelete="cascade",
        help=("Demais Documentos e Operações Geradoras de Contribuição e " "Créditos"),
    )


class RegistroF120(models.Model):
    """Bens Incorporados ao Ativo Imobilizado – Operações Geradoras de Créditos
    com base nos Encargos de Depreciação/Amortização"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.f120"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    NAT_BC_CRED = fields.Char(
        string="Código da Base de Cálculo",
        required=True,
        help=(
            "Código da Base de Cálculo do Crédito sobre Bens Incorporados ao "
            "Ativo Imobilizado, conforme a Tabela indicada no item 4.3.7: 09 ="
            " Crédito com Base nos Encargos de Depreciação; 11 = Crédito com "
            "Base nos Encargos de Amortização"
        ),
    )

    IDENT_BEM_IMOB = fields.Integer(
        string="Identificação dos Bens/Grupo de Bens Incorporados",
        required=True,
        help=(
            "Identificação dos Bens/Grupo de Bens Incorporados ao Ativo "
            "Imobilizado: 01 = Edificações e Benfeitorias em Imóveis Próprios;"
            " 02 = Edificações e Benfeitorias em Imóveis de Terceiros; 03 = "
            "Instalações; 04 = Máquinas; 05 = Equipamentos; 06 = Veículos; 99 "
            "= Outros ."
        ),
    )

    IND_ORIG_CRED = fields.Char(
        string="Indicador da origem do bem incorporado",
        help=(
            "Indicador da origem do bem incorporado ao ativo imobilizado, "
            "gerador de crédito: 0 – Aquisição no Mercado Interno 1 – "
            "Aquisição no Mercado Externo (Importação)"
        ),
    )

    IND_UTIL_BEM_IMOB = fields.Integer(
        string="Indicador da Utilização dos Bens Incorporados",
        required=True,
        help=(
            "Indicador da Utilização dos Bens Incorporados ao Ativo "
            "Imobilizado: 1 – Produção de Bens Destinados a Venda; 2 – "
            "Prestação de Serviços; 3 – Locação a Terceiros;"
        ),
    )

    VL_OPER_DEP = fields.Monetary(
        string="Valor do Encargo",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor do Encargo de Depreciação/Amortização Incorrido no Período"),
    )

    PARC_OPER_NAO_BC_CRED = fields.Float(
        string="Parcela do Valor do Encargo",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Parcela do Valor do Encargo de Depreciação/Amortização a excluir "
            "da base de cálculo de Crédito"
        ),
    )

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help=(
            "Código da Situação Tributária referente ao PIS/PASEP, conforme a "
            "Tabela indicada no item 4.3.3."
        ),
    )

    VL_BC_PIS = fields.Monetary(
        string="Base de cálculo do Crédito de PIS/PASEP no período",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Base de cálculo do Crédito de PIS/PASEP no período (06 – 07)",
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP (em percentual)",
    )

    VL_PIS = fields.Monetary(
        string="Valor do Crédito de PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente a COFINS",
        required=True,
        help=(
            "Código da Situação Tributária referente a COFINS, conforme a "
            "Tabela indicada no item 4.3.4."
        ),
    )

    VL_BC_COFINS = fields.Monetary(
        string="Base de Cálculo do Crédito da COFINS no período",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Base de Cálculo do Crédito da COFINS no período (06 – 07)",
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota da COFINS (em percentual)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor do crédito da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    COD_CCUS = fields.Char(string="Código do Centro de Custos", sped_length=255)

    DESC_BEM_IMOB = fields.Char(
        string="Descrição complementar do bem ou grupo de bens",
        help=(
            "Descrição complementar do bem ou grupo de bens, com crédito "
            "apurado com base nos encargos de depreciação ou amortização."
        ),
    )

    reg_F120_ids_RegistroF010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.f010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )

    reg_F129_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.f129",
        "reg_F129_ids_RegistroF120_id",
        string="F129 Processo Referenciado",
        sped_card="1:N",
    )


class RegistroF129(models.Model):
    "Processo Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.f129"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório",
        required=True,
        sped_length=20,
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        required=True,
        help=(
            "Indicador da origem do processo: 1 - Justiça Federal; 3 – "
            "Secretaria da Receita Federal do Brasil 9 – Outros."
        ),
    )

    reg_F129_ids_RegistroF120_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.f120",
        string="Bens Incorporados",
        required=True,
        ondelete="cascade",
        help=(
            "Bens Incorporados ao Ativo Imobilizado – Operações Geradoras de "
            "Créditos com base nos Encargos de Depreciação/Amortização"
        ),
    )


class RegistroF130(models.Model):
    """Bens Incorporados ao Ativo Imobilizado – Operações Geradoras de Créditos
    com base no Valor de Aquisição"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.f130"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    NAT_BC_CRED = fields.Char(
        string="Texto fixo contendo '10'",
        required=True,
        help=(
            "Texto fixo contendo '10' (Código da Base de Cálculo do Crédito "
            "sobre Bens Incorporados ao Ativo Imobilizado, conforme a Tabela "
            "indicada no item 4.3.7)"
        ),
    )

    IDENT_BEM_IMOB = fields.Integer(
        string="Identificação dos bens ou grupo",
        required=True,
        help=(
            "Identificação dos bens ou grupo de bens incorporados ao Ativo "
            "Imobilizado: 01 = Edificações e Benfeitorias; 03 = Instalações; "
            "04 = Máquinas; 05 = Equipamentos; 06 = Veículos; 99 = Outros bens"
            " incorporados ao Ativo Imobilizado."
        ),
    )

    IND_ORIG_CRED = fields.Char(
        string="Indicador da origem do bem incorporado",
        help=(
            "Indicador da origem do bem incorporado ao ativo imobilizado, "
            "gerador de crédito: 0 – Aquisição no Mercado Interno 1 – "
            "Aquisição no Mercado Externo (Importação)"
        ),
    )

    IND_UTIL_BEM_IMOB = fields.Integer(
        string="Indicador da Utilização dos Bens Incorporados",
        required=True,
        help=(
            "Indicador da Utilização dos Bens Incorporados ao Ativo "
            "Imobilizado: 1 – Produção de Bens Destinados a Venda; 2 – "
            "Prestação de Serviços; 3 – Locação a Terceiros; 9 – Outros."
        ),
    )

    MES_OPER_AQUIS = fields.Integer(
        string="Mês/Ano de Aquisição dos Bens Incorporados",
        help=(
            "Mês/Ano de Aquisição dos Bens Incorporados ao Ativo Imobilizado, "
            "com apuração de crédito com base no valor de aquisição."
        ),
    )

    VL_OPER_AQUIS = fields.Monetary(
        string="Valor de Aquisição dos Bens Incorporados",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor de Aquisição dos Bens Incorporados ao Ativo Imobilizado – "
            "Crédito com base no valor de aquisição."
        ),
    )

    PARC_OPER_NAO_BC_CRED = fields.Float(
        string="Parcela do Valor de Aquisição a excluir da base",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Parcela do Valor de Aquisição a excluir da base de cálculo de " "Crédito"
        ),
    )

    VL_BC_CRED = fields.Monetary(
        string="Valor da Base de Cálculo",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Base de Cálculo do Crédito sobre Bens Incorporados ao "
            "Ativo Imobilizado (07 – 08)"
        ),
    )

    IND_NR_PARC = fields.Integer(
        string="Indicador do Número de Parcelas",
        required=True,
        help=(
            "Indicador do Número de Parcelas a serem apropriadas (Crédito "
            "sobre Valor de Aquisição): 1 – Integral (Mês de Aquisição); 2 – "
            "12 Meses; 3 – 24 Meses; 4 – 48 Meses; 5 – 6 Meses (Embalagens de "
            "bebidas frias) 9 – Outra periodicidade definida em Lei."
        ),
    )

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help=(
            "Código da Situação Tributária referente ao PIS/PASEP, conforme a "
            "Tabela indicada no item 4.3.3."
        ),
    )

    VL_BC_PIS = fields.Monetary(
        string="Base de cálculo Mensal do Crédito de PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Base de cálculo Mensal do Crédito de PIS/PASEP, conforme "
            "indicador informado no campo 10."
        ),
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_PIS = fields.Monetary(
        string="Valor do Crédito de PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente a COFINS",
        required=True,
        help=(
            "Código da Situação Tributária referente a COFINS, conforme a "
            "Tabela indicada no item 4.3.4."
        ),
    )

    VL_BC_COFINS = fields.Monetary(
        string="Base de Cálculo Mensal do Crédito da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Base de Cálculo Mensal do Crédito da COFINS, conforme indicador "
            "informado no campo 10."
        ),
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota da COFINS",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor do crédito da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    COD_CCUS = fields.Char(string="Código do Centro de Custos", sped_length=255)

    DESC_BEM_IMOB = fields.Char(
        string="Descrição complementar do bem ou grupo de bens",
        help=(
            "Descrição complementar do bem ou grupo de bens, com crédito "
            "apurado com base no valor de aquisição."
        ),
    )

    reg_F130_ids_RegistroF010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.f010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )

    reg_F139_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.f139",
        "reg_F139_ids_RegistroF130_id",
        string="F139 Processo Referenciado",
        sped_card="1:N",
    )


class RegistroF139(models.Model):
    "Processo Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.f139"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório",
        required=True,
        sped_length=20,
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        required=True,
        help=(
            "Indicador da origem do processo: 1 - Justiça Federal; 3 – "
            "Secretaria da Receita Federal do Brasil 9 – Outros."
        ),
    )

    reg_F139_ids_RegistroF130_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.f130",
        string="Bens Incorporados",
        required=True,
        ondelete="cascade",
        help=(
            "Bens Incorporados ao Ativo Imobilizado – Operações Geradoras de "
            "Créditos com base no Valor de Aquisição"
        ),
    )


class RegistroF150(models.Model):
    "Crédito Presumido sobre Estoque de Abertura"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.f150"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    NAT_BC_CRED = fields.Char(
        string="Texto fixo contendo '18' Código da Base de Cálculo",
        required=True,
        help=(
            "Texto fixo contendo '18' Código da Base de Cálculo do Crédito "
            "sobre Estoque de Abertura, conforme a Tabela indicada no item "
            "4.3.7."
        ),
    )

    VL_TOT_EST = fields.Monetary(
        string="Valor Total do Estoque de Abertura",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    EST_IMP = fields.Float(
        string="Parcela do estoque de abertura referente a bens",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Parcela do estoque de abertura referente a bens, produtos e "
            "mercadorias importados, ou adquiridas no mercado interno sem "
            "direito ao crédito"
        ),
    )

    VL_BC_EST = fields.Monetary(
        string="Valor da Base de Cálculo do Crédito sobre",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Base de Cálculo do Crédito sobre o Estoque de Abertura "
            "(03 – 04)"
        ),
    )

    VL_BC_MEN_EST = fields.Monetary(
        string="Valor da Base de Cálculo Mensal do Crédito sobre",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Base de Cálculo Mensal do Crédito sobre o Estoque de "
            "Abertura (1/12 avos do campo 05)"
        ),
    )

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help=(
            "Código da Situação Tributária referente ao PIS/PASEP, conforme a "
            "Tabela indicada no item 4.3.3."
        ),
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        required=True,
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP (em percentual)",
    )

    VL_CRED_PIS = fields.Monetary(
        string="Valor Mensal do Crédito Presumido Apurado",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor Mensal do Crédito Presumido Apurado para o Período - "
            "PIS/PASEP (06 x 08)"
        ),
    )

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente ao COFINS",
        required=True,
        help=(
            "Código da Situação Tributária referente ao COFINS, conforme a "
            "Tabela indicada no item 4.3.4"
        ),
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota do COFINS (em percentual)",
        required=True,
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_CRED_COFINS = fields.Monetary(
        string="VL_CRED_COFINS",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor Mensal do Crédito Presumido Apurado para o Período - COFINS"
            " (06 x 11)"
        ),
    )

    DESC_EST = fields.Char(string="Descrição do estoque", sped_length=100)

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    reg_F150_ids_RegistroF010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.f010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )


class RegistroF200(models.Model):
    "Operações da Atividade Imobiliária – Unidade Imobiliária Vendida"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.f200"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    IND_OPER = fields.Integer(
        string="Indicador do Tipo da Operação",
        required=True,
        help=(
            "Indicador do Tipo da Operação: 01 – Venda a Vista de Unidade "
            "Concluída; 02 – Venda a Prazo de Unidade Concluída; 03 – Venda a "
            "Vista de Unidade em Construção; 04 – Venda a Prazo de Unidade em "
            "Construção; 05 – Outras."
        ),
    )

    UNID_IMOB = fields.Integer(
        string="Indicador do tipo de unidade imobiliária Vendida",
        required=True,
        help=(
            "Indicador do tipo de unidade imobiliária Vendida: 01 – Terreno "
            "adquirido para venda; 02 – Terreno decorrente de loteamento; 03 –"
            " Lote oriundo de desmembramento de terreno; 04 – Unidade "
            "resultante de incorporação imobiliária; 05 – Prédio construído/em"
            " construção para venda; 06 – Outras."
        ),
    )

    IDENT_EMP = fields.Char(
        string="Identificação/Nome do Empreendimento", required=True
    )

    DESC_UNID_IMOB = fields.Char(
        string="Descrição resumida da unidade imobiliária vendida", sped_length=90
    )

    NUM_CONT = fields.Char(
        string="Número do Contrato/Documento que formaliza a Venda",
        sped_length=90,
        help=(
            "Número do Contrato/Documento que formaliza a Venda da Unidade "
            "Imobiliária"
        ),
    )

    CPF_CNPJ_ADQU = fields.Char(
        string="Identificação da pessoa física",
        required=True,
        sped_length=14,
        help=(
            "Identificação da pessoa física (CPF) ou da pessoa jurídica (CNPJ)"
            " adquirente da unidade imobiliária"
        ),
    )

    DT_OPER = fields.Date(
        string="Data da operação de venda da unidade imobiliária", required=True
    )

    VL_TOT_VEND = fields.Monetary(
        string="Valor total",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total da unidade imobiliária vendida atualizado até o "
            "período da escrituração"
        ),
    )

    VL_REC_ACUM = fields.Monetary(
        string="Valor recebido acumulado até o mês anterior",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor recebido acumulado até o mês anterior ao da escrituração."),
    )

    VL_TOT_REC = fields.Monetary(
        string="Valor total recebido no mês da escrituração",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help=(
            "Código da Situação Tributária referente ao PIS/PASEP, conforme a "
            "Tabela indicada no item 4.3.3."
        ),
    )

    VL_BC_PIS = fields.Monetary(
        string="Base de Cálculo do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP (em percentual)",
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente a COFINS",
        required=True,
        help=(
            "Código da Situação Tributária referente a COFINS, conforme a "
            "Tabela indicada no item 4.3.4."
        ),
    )

    VL_BC_COFINS = fields.Monetary(
        string="Base de Cálculo da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota da COFINS (em percentual)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    PERC_REC_RECEB = fields.Float(
        string="Percentual da receita total recebida até o mês",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Percentual da receita total recebida até o mês, da unidade "
            "imobiliária vendida ((Campo 10 + Campo 11) / Campo 09)"
        ),
    )

    IND_NAT_EMP = fields.Integer(
        string="Indicador da Natureza Específica",
        help="Indicador da Natureza Específica do Empreendimento:",
    )

    INF_COMP = fields.Char(string="Informações Complementares", sped_length=90)

    reg_F200_ids_RegistroF010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.f010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )

    reg_F205_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.f205",
        "reg_F205_ids_RegistroF200_id",
        string="F205 Operações",
        sped_card="1:1",
        help=(
            "F205 Operações da Atividade Imobiliária – Custo Incorrido da "
            "Unidade Imobiliária"
        ),
    )

    reg_F210_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.f210",
        "reg_F210_ids_RegistroF200_id",
        string="F210 Operações",
        sped_card="1:N",
        help=(
            "F210 Operações da Atividade Imobiliária – Custo Orçado da Unidade"
            " Imobiliária Vendida"
        ),
    )

    reg_F211_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.f211",
        "reg_F211_ids_RegistroF200_id",
        string="F211 Processo Referenciado",
        sped_card="1:N",
    )


class RegistroF205(models.Model):
    """Operações da Atividade Imobiliária – Custo Incorrido da Unidade
    Imobiliária"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.f205"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    VL_CUS_INC_ACUM_ANT = fields.Monetary(
        string="Valor Total do Custo Incorrido",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor Total do Custo Incorrido da unidade imobiliária acumulado "
            "até o mês anterior ao da escrituração"
        ),
    )

    VL_CUS_INC_PER_ESC = fields.Monetary(
        string="VL_CUS_INC_PER_ESC",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor Total do Custo Incorrido da unidade imobiliária no mês da "
            "escrituração"
        ),
    )

    VL_CUS_INC_ACUM = fields.Monetary(
        string="Valor Total do Custo Incorrido (VL_CUS_INC_ACUM)",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor Total do Custo Incorrido da unidade imobiliária acumulado "
            "até o mês da escrituração (Campo 02 + 03)"
        ),
    )

    VL_EXC_BC_CUS_INC_ACUM = fields.Monetary(
        string="Parcela do Custo Incorrido sem direito ao crédito",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela do Custo Incorrido sem direito ao crédito da atividade "
            "imobiliária, acumulado até o período."
        ),
    )

    VL_BC_CUS_INC = fields.Monetary(
        string="Valor da Base de Cálculo do Crédito sobre",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Base de Cálculo do Crédito sobre o Custo Incorrido, "
            "acumulado até o período da escrituração (Campo 04 – 05)"
        ),
    )

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help=(
            "Código da Situação Tributária referente ao PIS/PASEP, conforme a "
            "Tabela indicada no item 4.3.3."
        ),
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        required=True,
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP (em percentual)",
    )

    VL_CRED_PIS_ACUM = fields.Monetary(
        string="Valor Total do Crédito Acumulado sobre",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor Total do Crédito Acumulado sobre o custo incorrido – "
            "PIS/PASEP (Campo 06 x 08)"
        ),
    )

    VL_CRED_PIS_DESC_ANT = fields.Monetary(
        string="Parcela do crédito descontada",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela do crédito descontada até o período anterior da "
            "escrituração – PIS/PASEP (proporcional à receita recebida até o "
            "mês anterior)."
        ),
    )

    VL_CRED_PIS_DESC = fields.Monetary(
        string="Parcela a descontar no período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela a descontar no período da escrituração – PIS/PASEP "
            "(proporcional à receita recebida no mês)."
        ),
    )

    VL_CRED_PIS_DESC_FUT = fields.Monetary(
        string="Parcela a descontar",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela a descontar em períodos futuros – PIS/PASEP (Campo 09 – "
            "10 – 11)."
        ),
    )

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente ao COFINS",
        required=True,
        help=(
            "Código da Situação Tributária referente ao COFINS, conforme a "
            "Tabela indicada no item 4.3.4."
        ),
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota do COFINS (em percentual)",
        required=True,
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_CRED_COFINS_ACUM = fields.Monetary(
        string="VL_CRED_COFINS_ACUM",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor Total do Crédito Acumulado sobre o custo incorrido - COFINS"
            " (Campo 06 x 14)"
        ),
    )

    VL_CRED_COFINS_DESC_ANT = fields.Monetary(
        string="VL_CRED_COFINS_DESC_ANT",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela do crédito descontada até o período anterior da "
            "escrituração – COFINS (proporcional à receita recebida até o mês "
            "anterior)."
        ),
    )

    VL_CRED_COFINS_DESC = fields.Monetary(
        string="VL_CRED_COFINS_DESC",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela a descontar no período da escrituração – COFINS "
            "(proporcional à receita recebida no mês)."
        ),
    )

    VL_CRED_COFINS_DESC_FUT = fields.Monetary(
        string="Parcela a descontar em períodos futuros – COFINS",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela a descontar em períodos futuros – COFINS (Campo 15 – 16 –" " 17)."
        ),
    )

    reg_F205_ids_RegistroF200_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.f200",
        string="Operações",
        required=True,
        ondelete="cascade",
        help=("Operações da Atividade Imobiliária – Unidade Imobiliária Vendida"),
    )


class RegistroF210(models.Model):
    """Operações da Atividade Imobiliária – Custo Orçado da Unidade Imobiliária
    Vendida"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.f210"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    VL_CUS_ORC = fields.Monetary(
        string="Valor Total do Custo Orçado para Conclusão",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor Total do Custo Orçado para Conclusão da Unidade Vendida"),
    )

    VL_EXC = fields.Monetary(
        string="Valores Referentes a Pagamentos a Pessoas Físicas",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valores Referentes a Pagamentos a Pessoas Físicas, Encargos "
            "Trabalhistas, Sociais e Previdenciários e à aquisição de bens e "
            "serviços não sujeitos ao pagamento das contribuições"
        ),
    )

    VL_CUS_ORC_AJU = fields.Monetary(
        string="Valor da Base de Calculo do Crédito sobre",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Base de Calculo do Crédito sobre o Custo Orçado Ajustado"
            " (Campo 02 – 03)."
        ),
    )

    VL_BC_CRED = fields.Monetary(
        string="Valor da Base de Cálculo do Crédito sobre",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Base de Cálculo do Crédito sobre o Custo Orçado "
            "referente ao mês da escrituração, proporcionalizada em função da "
            "receita recebida no mês."
        ),
    )

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help=(
            "Código da Situação Tributária referente ao PIS/PASEP, conforme a "
            "Tabela indicada no item 4.3.3."
        ),
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP (em percentual)",
    )

    VL_CRED_PIS_UTIL = fields.Monetary(
        string="Valor do Crédito sobre o custo orçado",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do Crédito sobre o custo orçado a ser utilizado no período "
            "da escrituração - PIS/PASEP (Campo 05 x 07)"
        ),
    )

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente a COFINS",
        required=True,
        help=(
            "Código da Situação Tributária referente a COFINS, conforme a "
            "Tabela indicada no item 4.3.4."
        ),
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota da COFINS (em percentual)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_CRED_COFINS_UTIL = fields.Monetary(
        string="VL_CRED_COFINS_UTIL",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do Crédito sobre o custo orçado a ser utilizado no período "
            "da escrituração - COFINS (Campo 05 x 10)"
        ),
    )

    reg_F210_ids_RegistroF200_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.f200",
        string="Operações",
        required=True,
        ondelete="cascade",
        help=("Operações da Atividade Imobiliária – Unidade Imobiliária Vendida"),
    )


class RegistroF211(models.Model):
    "Processo Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.f211"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório",
        required=True,
        sped_length=20,
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        required=True,
        help=(
            "Indicador da origem do processo: 1 - Justiça Federal; 3 – "
            "Secretaria da Receita Federal do Brasil 9 - Outros."
        ),
    )

    reg_F211_ids_RegistroF200_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.f200",
        string="Operações",
        required=True,
        ondelete="cascade",
        help=("Operações da Atividade Imobiliária – Unidade Imobiliária Vendida"),
    )


class RegistroF500(models.Model):
    """Consolidação das Operações da Pessoa Jurídica Submetida ao Regime de
    Tributação com Base no Lucro Presumido – Incidência do PIS/Pasep e da
    Cofins pelo Regime de Caixa"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.f500"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    VL_REC_CAIXA = fields.Monetary(
        string="Valor total da receita recebida",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total da receita recebida, referente à combinação de CST e "
            "Alíquota."
        ),
    )

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help="Código da Situação Tributária referente ao PIS/PASEP",
    )

    VL_DESC_PIS = fields.Monetary(
        string="Valor do desconto / exclusão da base de cálculo",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_PIS = fields.Monetary(
        string="Valor da base de cálculo do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP (em percentual)",
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente a COFINS", required=True
    )

    VL_DESC_COFINS = fields.Monetary(
        string="VL_DESC_COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_BC_COFINS = fields.Monetary(
        string="Valor da base de cálculo da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota da COFINS (em percentual)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal conforme",
        help="Código do modelo do documento fiscal conforme a Tabela 4.1.1",
    )

    CFOP = fields.Integer(string="Código fiscal de operação e prestação")

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    INFO_COMPL = fields.Char(string="Informação complementar")

    reg_F500_ids_RegistroF010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.f010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )

    reg_F509_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.f509",
        "reg_F509_ids_RegistroF500_id",
        string="F509 Processo Referenciado",
        sped_card="1:N",
    )


class RegistroF509(models.Model):
    "Processo Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.f509"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório",
        required=True,
        sped_length=20,
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        required=True,
        help=(
            "Indicador da origem do processo: 1 - Justiça Federal; 3 – "
            "Secretaria da Receita Federal do Brasil 9 - Outros."
        ),
    )

    reg_F509_ids_RegistroF500_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.f500",
        string="Consolidação das Operações",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação das Operações da Pessoa Jurídica Submetida ao Regime"
            " de Tributação com Base no Lucro Presumido – Incidência do "
            "PIS/Pasep e da Cofins pelo Regime de Caixa"
        ),
    )


class RegistroF510(models.Model):
    """Consolidação das Operações da Pessoa Jurídica Submetida ao Regime de
    Tributação com Base no Lucro Presumido – Incidência do PIS/Pasep e da
    Cofins pelo Regime de Caixa (Apuração da Contribuição por Unidade de
    Medida de Produto)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.f510"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    VL_REC_CAIXA = fields.Monetary(
        string="Valor total da receita recebida",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total da receita recebida, referente à combinação de CST e "
            "Alíquota."
        ),
    )

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help="Código da Situação Tributária referente ao PIS/PASEP",
    )

    VL_DESC_PIS = fields.Monetary(
        string="Valor do desconto / exclusão",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    QUANT_BC_PIS = fields.Float(
        string="Base de cálculo em quantidade",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help="Base de cálculo em quantidade - PIS/PASEP",
    )

    ALIQ_PIS_QUANT = fields.Float(
        string="Alíquota do PIS/PASEP (em reais)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente a COFINS", required=True
    )

    VL_DESC_COFINS = fields.Monetary(
        string="Valor do desconto / exclusão (VL_DESC_COFINS)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    QUANT_BC_COFINS = fields.Float(
        string="Base de cálculo em quantidade (QUANT_BC_COFINS)",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help="Base de cálculo em quantidade - COFINS",
    )

    ALIQ_COFINS_QUANT = fields.Float(
        string="Alíquota da COFINS (em reais)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal conforme",
        help="Código do modelo do documento fiscal conforme a Tabela 4.1.1",
    )

    CFOP = fields.Integer(string="Código fiscal de operação e prestação")

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    INFO_COMPL = fields.Char(string="Informação complementar")

    reg_F510_ids_RegistroF010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.f010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )

    reg_F519_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.f519",
        "reg_F519_ids_RegistroF510_id",
        string="F519 Processo Referenciado",
        sped_card="1:N",
    )


class RegistroF519(models.Model):
    "Processo Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.f519"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório",
        required=True,
        sped_length=20,
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        required=True,
        help=(
            "Indicador da origem do processo: 1 - Justiça Federal; 3 – "
            "Secretaria da Receita Federal do Brasil 9 - Outros."
        ),
    )

    reg_F519_ids_RegistroF510_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.f510",
        string="Consolidação das Operações",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação das Operações da Pessoa Jurídica Submetida ao Regime"
            " de Tributação com Base no Lucro Presumido – Incidência do "
            "PIS/Pasep e da Cofins pelo Regime de Caixa (Apuração da "
            "Contribuição por Unidade de Medida de Produto)"
        ),
    )


class RegistroF525(models.Model):
    """Composição da Receita Escriturada no Período – Detalhamento da Receita
    Recebida pelo Regime de Caixa"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.f525"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    VL_REC = fields.Monetary(
        string="Valor total da receita recebida",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total da receita recebida, correspondente ao indicador "
            "informado no campo 03 (IND_REC)"
        ),
    )

    IND_REC = fields.Char(
        string="Indicador da composição da receita recebida",
        required=True,
        help=(
            "Indicador da composição da receita recebida no período (Campo "
            "02), por: 01- Clientes 02- Administradora de cartão de "
            "débito/crédito"
        ),
    )

    CNPJ_CPF = fields.Char(
        string="CNPJ/CPF do participante",
        sped_length=14,
        help=(
            "CNPJ/CPF do participante (cliente/pessoa física ou jurídica "
            "pagadora) ou da administradora de cartões (vendas por cartão de "
            "débito ou de crédito), no caso de detalhamento da receita "
            "recebida conforme os indicadores “01” ou “02”, respectivamente."
        ),
    )

    NUM_DOC = fields.Char(
        string="Número do título de crédito ou do documento fiscal",
        sped_length=60,
        help=(
            "Número do título de crédito ou do documento fiscal, no caso de "
            "detalhamento da receita recebida conforme os indicadores “03” ou "
            "“04”, respectivamente."
        ),
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help=(
            "Código do item (campo 02 do Registro 0200), no caso de "
            "detalhamento da receita recebida por item vendido, conforme o "
            "indicador “05”."
        ),
    )

    VL_REC_DET = fields.Monetary(
        string="Valor da receita detalhada",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da receita detalhada, correspondente ao conteúdo informado "
            "no campo 04, 05, 06 ou 10."
        ),
    )

    CST_PIS = fields.Integer(string="Código da Situação Tributária do PIS/Pasep")

    CST_COFINS = fields.Integer(string="Código da Situação Tributária da Cofins")

    INFO_COMPL = fields.Char(string="Informação complementar")

    COD_CTA = fields.Char(
        string="Código da conta analítica contábil representativa",
        sped_length=255,
        help=(
            "Código da conta analítica contábil representativa da receita " "recebida"
        ),
    )

    reg_F525_ids_RegistroF010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.f010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )


class RegistroF550(models.Model):
    """Consolidação das Operações da Pessoa Jurídica Submetida ao Regime de
    Tributação com Base no Lucro Presumido – Incidência do PIS/Pasep e da
    Cofins pelo Regime de Competência"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.f550"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    VL_REC_COMP = fields.Monetary(
        string="Valor total da receita auferida",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total da receita auferida, referente à combinação de CST e "
            "Alíquota."
        ),
    )

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help="Código da Situação Tributária referente ao PIS/PASEP",
    )

    VL_DESC_PIS = fields.Monetary(
        string="Valor do desconto / exclusão da base de cálculo",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_PIS = fields.Monetary(
        string="Valor da base de cálculo do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP (em percentual)",
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente a COFINS", required=True
    )

    VL_DESC_COFINS = fields.Monetary(
        string="VL_DESC_COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_BC_COFINS = fields.Monetary(
        string="Valor da base de cálculo da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota da COFINS (em percentual)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal conforme",
        help="Código do modelo do documento fiscal conforme a Tabela 4.1.1",
    )

    CFOP = fields.Integer(string="Código fiscal de operação e prestação")

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada / creditada",
    )

    INFO_COMPL = fields.Char(string="Informação complementar")

    reg_F550_ids_RegistroF010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.f010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )

    reg_F559_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.f559",
        "reg_F559_ids_RegistroF550_id",
        string="F559 Processo Referenciado",
        sped_card="1:N",
    )


class RegistroF559(models.Model):
    "Processo Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.f559"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório",
        required=True,
        sped_length=20,
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        required=True,
        help=(
            "Indicador da origem do processo: 1 - Justiça Federal; 3 – "
            "Secretaria da Receita Federal do Brasil 9 - Outros."
        ),
    )

    reg_F559_ids_RegistroF550_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.f550",
        string="Consolidação das Operações",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação das Operações da Pessoa Jurídica Submetida ao Regime"
            " de Tributação com Base no Lucro Presumido – Incidência do "
            "PIS/Pasep e da Cofins pelo Regime de Competência"
        ),
    )


class RegistroF560(models.Model):
    """Consolidação das Operações da Pessoa Jurídica Submetida ao Regime de
    Tributação com Base no Lucro Presumido – Incidência do PIS/Pasep e da
    Cofins pelo Regime de Competência (Apuração da Contribuição por Unidade
    de Medida de Produto)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.f560"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    VL_REC_COMP = fields.Monetary(
        string="Valor total da receita auferida",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total da receita auferida, referente à combinação de CST e "
            "Alíquota."
        ),
    )

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help="Código da Situação Tributária referente ao PIS/PASEP",
    )

    VL_DESC_PIS = fields.Monetary(
        string="Valor do desconto / exclusão",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    QUANT_BC_PIS = fields.Float(
        string="Base de cálculo em quantidade",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help="Base de cálculo em quantidade - PIS/PASEP",
    )

    ALIQ_PIS_QUANT = fields.Float(
        string="Alíquota do PIS/PASEP (em reais)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente a COFINS", required=True
    )

    VL_DESC_COFINS = fields.Monetary(
        string="Valor do desconto / exclusão (VL_DESC_COFINS)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    QUANT_BC_COFINS = fields.Float(
        string="Base de cálculo em quantidade – COFINS",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    ALIQ_COFINS_QUANT = fields.Float(
        string="Alíquota da COFINS (em reais)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal conforme",
        help="Código do modelo do documento fiscal conforme a Tabela 4.1.1",
    )

    CFOP = fields.Integer(string="Código fiscal de operação e prestação")

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada / creditada",
    )

    INFO_COMPL = fields.Char(string="Informação complementar")

    reg_F560_ids_RegistroF010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.f010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )

    reg_F569_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.f569",
        "reg_F569_ids_RegistroF560_id",
        string="F569 Processo Referenciado",
        sped_card="1:N",
    )


class RegistroF569(models.Model):
    "Processo Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.f569"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório",
        required=True,
        sped_length=20,
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        required=True,
        help=(
            "Indicador da origem do processo: 1 - Justiça Federal; 3 – "
            "Secretaria da Receita Federal do Brasil 9 - Outros."
        ),
    )

    reg_F569_ids_RegistroF560_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.f560",
        string="Consolidação das Operações",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação das Operações da Pessoa Jurídica Submetida ao Regime"
            " de Tributação com Base no Lucro Presumido – Incidência do "
            "PIS/Pasep e da Cofins pelo Regime de Competência (Apuração da "
            "Contribuição por Unidade de Medida de Produto)"
        ),
    )


class RegistroF600(models.Model):
    "Contribuição Retida na Fonte"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.f600"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    IND_NAT_RET = fields.Integer(
        string="Indicador de Natureza da Retenção na Fonte",
        required=True,
        help=(
            "Indicador de Natureza da Retenção na Fonte: 01 - Retenção por "
            "Órgãos, Autarquias e Fundações Federais 02 - Retenção por outras "
            "Entidades da Administração Pública Federal 03 - Retenção por "
            "Pessoas Jurídicas de Direito Privado 04 - Recolhimento por "
            "Sociedade Cooperativa 05 - Retenção por Fabricante de Máquinas e "
            "Veículos 99 - Outras Retenções"
        ),
    )

    DT_RET = fields.Date(string="Data da Retenção", required=True)

    VL_BC_RET = fields.Float(
        string="Base de calculo da retenção ou do recolhimento",
        required=True,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help=(
            "Base de calculo da retenção ou do recolhimento (sociedade " "cooperativa)"
        ),
    )

    VL_RET = fields.Monetary(
        string="Valor Total Retido na Fonte / Recolhido",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor Total Retido na Fonte / Recolhido (sociedade cooperativa)"),
    )

    COD_REC = fields.Char(string="Código da Receita", sped_length=4)

    IND_NAT_REC = fields.Integer(
        string="Indicador da Natureza da Receita",
        help=(
            "Indicador da Natureza da Receita: 0 – Receita de Natureza Não "
            "Cumulativa 1 – Receita de Natureza Cumulativa"
        ),
    )

    CNPJ = fields.Char(
        string="CNPJ referente",
        required=True,
        help=(
            "CNPJ referente a: - Fonte Pagadora Responsável pela Retenção / "
            "Recolhimento (no caso de o registro ser escriturado pela pessoa "
            "jurídica beneficiária da retenção); ou"
        ),
    )

    VL_RET_PIS = fields.Monetary(
        string="Valor Retido na Fonte – Parcela Referente",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor Retido na Fonte – Parcela Referente ao PIS/Pasep",
    )

    VL_RET_COFINS = fields.Monetary(
        string="Valor Retido na Fonte – Parcela Referente a COFINS",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    IND_DEC = fields.Integer(
        string="Indicador da condição",
        required=True,
        help=(
            "Indicador da condição da pessoa jurídica declarante: 0 – "
            "Beneficiária da Retenção / Recolhimento 1- Responsável pelo "
            "Recolhimento"
        ),
    )

    reg_F600_ids_RegistroF010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.f010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )


class RegistroF700(models.Model):
    "Deduções Diversas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.f700"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    IND_ORI_DED = fields.Integer(
        string="Indicador de Origem de Deduções Diversas",
        required=True,
        help=(
            "Indicador de Origem de Deduções Diversas: 01 – Créditos "
            "Presumidos - Medicamentos 02 – Créditos Admitidos no Regime "
            "Cumulativo – Bebidas Frias 03 – Contribuição Paga pelo Substituto"
            " Tributário - ZFM 04 – Substituição Tributária – Não Ocorrência "
            "do Fato Gerador Presumido 99 - Outras Deduções"
        ),
    )

    IND_NAT_DED = fields.Integer(
        string="Indicador da Natureza da Dedução",
        required=True,
        help=(
            "Indicador da Natureza da Dedução: 0 – Dedução de Natureza Não "
            "Cumulativa 1 – Dedução de Natureza Cumulativa"
        ),
    )

    VL_DED_PIS = fields.Monetary(
        string="Valor a Deduzir - PIS/PASEP",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_DED_COFINS = fields.Monetary(
        string="Valor a Deduzir – Cofins",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_OPER = fields.Monetary(
        string="Valor da Base de Cálculo da Operação que ensejou",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Base de Cálculo da Operação que ensejou o Valor a "
            "Deduzir informado nos Campos 04 e 05"
        ),
    )

    CNPJ = fields.Char(
        string="CNPJ da Pessoa Jurídica relacionada à Operação",
        help=(
            "CNPJ da Pessoa Jurídica relacionada à Operação que ensejou o "
            "Valor a Deduzir informado nos Campos 04 e 05."
        ),
    )

    INF_COMP = fields.Char(
        string="Informações Complementares do Documento/Operação",
        sped_length=90,
        help=(
            "Informações Complementares do Documento/Operação que ensejou o "
            "Valor a Deduzir informado nos Campos 04 e 05."
        ),
    )

    reg_F700_ids_RegistroF010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.f010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )


class RegistroF800(models.Model):
    "Créditos Decorrentes de Eventos de Incorporação, Fusão e Cisão"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.f800"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    IND_NAT_EVEN = fields.Integer(
        string="Indicador da Natureza do Evento de Sucessão",
        required=True,
        help=(
            "Indicador da Natureza do Evento de Sucessão: 01 – Incorporação 02"
            " – Fusão 03 – Cisão Total 04 – Cisão Parcial 99 – Outros"
        ),
    )

    DT_EVEN = fields.Date(string="Data do Evento", required=True)

    CNPJ_SUCED = fields.Char(string="CNPJ da Pessoa Jurídica Sucedida", required=True)

    PA_CONT_CRED = fields.Integer(
        string="Período de Apuração do Crédito – Mês/Ano",
        required=True,
        help="Período de Apuração do Crédito – Mês/Ano (MM/AAAA)",
    )

    COD_CRED = fields.Integer(
        string="Código do crédito transferido",
        required=True,
        help="Código do crédito transferido, conforme Tabela 4.3.6",
    )

    VL_CRED_PIS = fields.Monetary(
        string="Valor do Crédito Transferido de PIS/Pasep",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CRED_COFINS = fields.Monetary(
        string="Valor do Crédito Transferido de Cofins",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    PER_CRED_CIS = fields.Float(
        string="Percentual do crédito original transferido",
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Percentual do crédito original transferido, no caso de evento de " "Cisão."
        ),
    )

    reg_F800_ids_RegistroF010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.f010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )


class RegistroI010(models.Model):
    "Identificação da Pessoa Jurídica"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.i010"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    CNPJ = fields.Char(string="Número de inscrição da pessoa jurídica no CNPJ")

    IND_ATIV = fields.Integer(
        string="Indicador de operações realizadas no período",
        help=(
            "Indicador de operações realizadas no período: 01 – Exclusivamente"
            " operações de Instituições Financeiras e Assemelhadas 02 – "
            "Exclusivamente operações de Seguros Privados 03 – Exclusivamente "
            "operações de Previdência Complementar 04 – Exclusivamente "
            "operações de Capitalização 05 – Exclusivamente operações de "
            "Planos de Assistência à Saúde 06 – Realizou operações referentes "
            "a mais de um dos indicadores acima"
        ),
    )

    INFO_COMPL = fields.Char(string="Informação Complementar")

    reg_I100_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.i100",
        "reg_I100_ids_RegistroI010_id",
        string="I100 Consolidação das Operações do Período",
        sped_card="1:N",
    )


class RegistroI100(models.Model):
    "Consolidação das Operações do Período"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.i100"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    VL_REC = fields.Monetary(
        string="Valor Total do Faturamento/Receita Bruta",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor Total do Faturamento/Receita Bruta no Período",
    )

    CST_PIS_COFINS = fields.Integer(
        string="Código de Situação Tributária referente",
        help=(
            "Código de Situação Tributária referente à Receita informada no "
            "Campo 02 (Tabelas 4.3.3 e 4.3.4)"
        ),
    )

    VL_TOT_DED_GER = fields.Monetary(
        string="Valor Total das Deduções e Exclusões",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor Total das Deduções e Exclusões de Caráter Geral",
    )

    VL_TOT_DED_ESP = fields.Monetary(
        string="VL_TOT_DED_ESP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor Total das Deduções e Exclusões de Caráter Específico",
    )

    VL_BC_PIS = fields.Monetary(
        string="Valor da base de cálculo do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        sped_length=8,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Alíquota do PIS/PASEP (em percentual)",
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_COFINS = fields.Monetary(
        string="Valor da base de cálculo da Cofins",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota da COFINS (em percentual)",
        sped_length=8,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    INFO_COMPL = fields.Char(
        string="Informação Complementar dos dados informados",
        help="Informação Complementar dos dados informados no registro",
    )

    reg_I100_ids_RegistroI010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.i010",
        string="Identificação da Pessoa Jurídica",
        required=True,
        ondelete="cascade",
    )

    reg_I199_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.i199",
        "reg_I199_ids_RegistroI100_id",
        string="I199 Processo Referenciado",
        sped_card="1:N",
    )

    reg_I200_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.i200",
        "reg_I200_ids_RegistroI100_id",
        string="I200 Composição das Receitas",
        sped_card="1:N",
        help=("I200 Composição das Receitas, Deduções e/ou Exclusões do Período"),
    )


class RegistroI199(models.Model):
    "Processo Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.i199"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório", sped_length=20
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        help=(
            "Indicador da origem do processo: 1 - Justiça Federal; 3 – "
            "Secretaria da Receita Federal do Brasil 9 – Outros."
        ),
    )

    reg_I199_ids_RegistroI100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.i100",
        string="Consolidação das Operações do Período",
        required=True,
        ondelete="cascade",
    )


class RegistroI200(models.Model):
    "Composição das Receitas, Deduções e/ou Exclusões do Período"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.i200"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_CAMPO = fields.Char(
        string="número do campo do registro “I100”",
        help=(
            "número do campo do registro “I100” (Campos 02, 04 ou 05), objeto "
            "de informação neste registro."
        ),
    )

    COD_DET = fields.Char(
        string="Código do tipo de detalhamento",
        help=("Código do tipo de detalhamento, conforme Tabelas 7.1.1 e/ou 7.1.2"),
    )

    DET_VALOR = fields.Float(
        string="Valor detalhado referente ao campo 03",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=("Valor detalhado referente ao campo 03 (COD_DET) deste registro"),
    )

    COD_CTA = fields.Char(
        string="Código da conta contábil referente",
        sped_length=255,
        help=(
            "Código da conta contábil referente ao valor informado no campo 04"
            " (DET_VALOR)"
        ),
    )

    INFO_COMPL = fields.Char(
        string="Informação Complementar dos dados informados",
        help="Informação Complementar dos dados informados no registro",
    )

    reg_I200_ids_RegistroI100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.i100",
        string="Consolidação das Operações do Período",
        required=True,
        ondelete="cascade",
    )

    reg_I299_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.i299",
        "reg_I299_ids_RegistroI200_id",
        string="I299 Processo Referenciado",
        sped_card="1:N",
    )

    reg_I300_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.i300",
        "reg_I300_ids_RegistroI200_id",
        string="I300 Complemento das Operações – Detalhamento",
        sped_card="1:N",
        help=(
            "I300 Complemento das Operações – Detalhamento das Receitas, "
            "Deduções e/ou Exclusões do Período"
        ),
    )


class RegistroI299(models.Model):
    "Processo Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.i299"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 5

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório", sped_length=20
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        help=(
            "Indicador da origem do processo: 1 - Justiça Federal; 3 – "
            "Secretaria da Receita Federal do Brasil 9 – Outros."
        ),
    )

    reg_I299_ids_RegistroI200_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.i200",
        string="Composição das Receitas",
        required=True,
        ondelete="cascade",
        help="Composição das Receitas, Deduções e/ou Exclusões do Período",
    )


class RegistroI300(models.Model):
    """Complemento das Operações – Detalhamento das Receitas, Deduções e/ou
    Exclusões do Período"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.i300"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 5

    COD_COMP = fields.Char(
        string="Código das Tabelas 7.1.3",
        sped_length=60,
        help=(
            "Código das Tabelas 7.1.3 (Receitas – Visão "
            "Analítica/Referenciada) e/ou 7.1.4 (Deduções e exclusões – Visão "
            "Analítica/Referenciada), objeto de complemento neste registro"
        ),
    )

    DET_VALOR = fields.Float(
        string="Valor da receita",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Valor da receita, dedução ou exclusão, objeto de "
            "complemento/detalhamento neste registro, conforme código "
            "informado no campo 02 (especificados nas tabelas analíticas 7.1.3"
            " e 7.1.4) ou no campo 04 (código da conta contábil)"
        ),
    )

    COD_CTA = fields.Char(
        string="Código da conta contábil referente",
        sped_length=255,
        help=("Código da conta contábil referente ao valor informado no campo 03"),
    )

    INFO_COMPL = fields.Char(
        string="Informação Complementar dos dados informados",
        help="Informação Complementar dos dados informados no registro",
    )

    reg_I300_ids_RegistroI200_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.i200",
        string="Composição das Receitas",
        required=True,
        ondelete="cascade",
        help="Composição das Receitas, Deduções e/ou Exclusões do Período",
    )

    reg_I399_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.i399",
        "reg_I399_ids_RegistroI300_id",
        string="I399 Processo Referenciado",
        sped_card="1:N",
    )


class RegistroI399(models.Model):
    "Processo Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.i399"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 6

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório", sped_length=20
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        help=(
            "Indicador da origem do processo: 1 - Justiça Federal; 3 – "
            "Secretaria da Receita Federal do Brasil 9 – Outros."
        ),
    )

    reg_I399_ids_RegistroI300_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.i300",
        string="Complemento das Operações – Detalhamento",
        required=True,
        ondelete="cascade",
        help=(
            "Complemento das Operações – Detalhamento das Receitas, Deduções "
            "e/ou Exclusões do Período"
        ),
    )


class RegistroM100(models.Model):
    "Crédito de PIS/PASEP Relativo ao Período"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m100"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_CRED = fields.Char(
        string="Código de Tipo de Crédito apurado no período",
        required=True,
        help=(
            "Código de Tipo de Crédito apurado no período, conforme a Tabela " "4.3.6."
        ),
    )

    IND_CRED_ORI = fields.Integer(
        string="Indicador de Crédito Oriundo",
        required=True,
        help=(
            "Indicador de Crédito Oriundo de: 0 – Operações próprias 1 – "
            "Evento de incorporação, cisão ou fusão"
        ),
    )

    VL_BC_PIS = fields.Monetary(
        string="Valor da Base de Cálculo do Crédito",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP (em percentual)",
    )

    QUANT_BC_PIS = fields.Float(
        string="Quantidade – Base de cálculo PIS",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    ALIQ_PIS_QUANT = fields.Float(
        string="Alíquota do PIS (em reais)",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_CRED = fields.Monetary(
        string="Valor total do crédito apurado no período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_AJUS_ACRES = fields.Monetary(
        string="Valor total dos ajustes de acréscimo",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_AJUS_REDUC = fields.Monetary(
        string="Valor total dos ajustes de redução",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CRED_DIF = fields.Monetary(
        string="Valor total do crédito diferido no período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CRED_DISP = fields.Monetary(
        string="Valor Total do Crédito Disponível relativo",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor Total do Crédito Disponível relativo ao Período (08 + 09 – "
            "10 – 11)"
        ),
    )

    IND_DESC_CRED = fields.Char(
        string="Indicador de opção de utilização",
        required=True,
        help=(
            "Indicador de opção de utilização do crédito disponível no "
            "período: 0 – Utilização do valor total para desconto da "
            "contribuição apurada no período, no Registro M200; 1 – Utilização"
            " de valor parcial para desconto da contribuição apurada no "
            "período, no Registro M200."
        ),
    )

    VL_CRED_DESC = fields.Monetary(
        string="Valor do Crédito disponível",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do Crédito disponível, descontado da contribuição apurada "
            "no próprio período. Se IND_DESC_CRED=0, informar o valor total do"
            " Campo 12; Se IND_DESC_CRED=1, informar o valor parcial do Campo "
            "12."
        ),
    )

    SLD_CRED = fields.Float(
        string="Saldo de créditos a utilizar em períodos futuros",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Saldo de créditos a utilizar em períodos futuros (12 – 14)",
    )

    reg_M105_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.m105",
        "reg_M105_ids_RegistroM100_id",
        string="M105 Detalhamento da Base de Cálculo",
        sped_card="1:N",
        help=(
            "M105 Detalhamento da Base de Cálculo do Crédito Apurado no "
            "Período – PIS/PASEP"
        ),
    )

    reg_M110_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.m110",
        "reg_M110_ids_RegistroM100_id",
        string="M110 Ajustes do Crédito de PIS/PASEP Apurado",
        sped_card="1:N",
    )


class RegistroM105(models.Model):
    """Detalhamento da Base de Cálculo do Crédito Apurado no Período –
    PIS/PASEP"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m105"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    NAT_BC_CRED = fields.Char(
        string="Código da Base de Cálculo do Crédito apurado",
        required=True,
        help=(
            "Código da Base de Cálculo do Crédito apurado no período, conforme"
            " a Tabela 4.3.7."
        ),
    )

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente ao crédito",
        required=True,
        help=(
            "Código da Situação Tributária referente ao crédito de PIS/Pasep "
            "(Tabela 4.3.3) vinculado ao tipo de crédito escriturado em M100."
        ),
    )

    VL_BC_PIS_TOT = fields.Monetary(
        string="Valor Total da Base de Cálculo escriturada",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor Total da Base de Cálculo escriturada nos documentos e "
            "operações (Blocos “A”, “C”, “D” e “F”), referente ao CST_PIS "
            "informado no Campo 03."
        ),
    )

    VL_BC_PIS_CUM = fields.Monetary(
        string="Parcela do Valor Total da Base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela do Valor Total da Base de Cálculo informada no Campo 04, "
            "vinculada a receitas com incidência cumulativa. Campo de "
            "preenchimento específico para a pessoa jurídica sujeita ao regime"
            " cumulativo e não- cumulativo da contribuição (COD_INC_TRIB = 3 "
            "do Registro 0110)"
        ),
    )

    VL_BC_PIS_NC = fields.Monetary(
        string="Valor Total da Base de Cálculo do Crédito",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor Total da Base de Cálculo do Crédito, vinculada a receitas "
            "com incidência não-cumulativa (Campo 04 – Campo 05)."
        ),
    )

    VL_BC_PIS = fields.Monetary(
        string="O Valor da Base de Cálculo do Crédito",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "O Valor da Base de Cálculo do Crédito, vinculada ao tipo de "
            "Crédito escriturado em M100. - Para os CST_PIS = “50”, “51”, "
            "“52”, “60”, “61” e “62”: Informar o valor do Campo 06 "
            "(VL_BC_PIS_NC); - Para os CST_PIS = “53”, “54”, “55”, “56”, “63”,"
            " “64” “65” e “66” (Crédito sobre operações vinculadas a mais de "
            "um tipo de receita): Informar a parcela do valor do Campo 06 "
            "(VL_BC_PIS_NC) vinculada especificamente ao tipo de crédito "
            "escriturado em M100. valor deste campo será transportado para o "
            "Campo 04 (VL_BC_PIS) do registro M100."
        ),
    )

    QUANT_BC_PIS_TOT = fields.Float(
        string="Quantidade Total da Base de Cálculo",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help=(
            "Quantidade Total da Base de Cálculo do Crédito apurado em Unidade"
            " de Medida de Produto, escriturada nos documentos e operações "
            "(Blocos “A”, “C”, “D” e “F”), referente ao CST_PIS informado no "
            "Campo 03"
        ),
    )

    QUANT_BC_PIS = fields.Float(
        string="O Parcela da base de cálculo do crédito",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help=(
            "O Parcela da base de cálculo do crédito em quantidade (campo 08) "
            "vinculada ao tipo de crédito escriturado em M100. - Para os "
            "CST_PIS = “50”, “51” e “52”: Informar o valor do Campo 08 "
            "(QUANT_BC_PIS); - Para os CST_PIS = “53”, “54”, “55” e “56” "
            "(crédito vinculado a mais de um tipo de receita): Informar a "
            "parcela do valor do Campo 08 (QUANT_BC_PIS) vinculada ao tipo de "
            "crédito escriturado em M100. valor deste campo será transportado "
            "para o Campo 06 (QUANT_BC_PIS) do registro M100."
        ),
    )

    DESC_CRED = fields.Char(string="Descrição do crédito", sped_length=60)

    reg_M105_ids_RegistroM100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.m100",
        string="Crédito de PIS/PASEP Relativo ao Período",
        required=True,
        ondelete="cascade",
    )


class RegistroM110(models.Model):
    "Ajustes do Crédito de PIS/PASEP Apurado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m110"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    IND_AJ = fields.Char(
        string="Indicador do tipo de ajuste",
        required=True,
        help="Indicador do tipo de ajuste: 0- Ajuste de redução;",
    )

    VL_AJ = fields.Monetary(
        string="Valor do ajuste",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_AJ = fields.Char(
        string="Código do ajuste",
        required=True,
        help="Código do ajuste, conforme a Tabela indicada no item 4.3.8.",
    )

    NUM_DOC = fields.Char(
        string="Número do processo",
        help=(
            "Número do processo, documento ou ato concessório ao qual o ajuste"
            " está vinculado, se houver."
        ),
    )

    DESCR_AJ = fields.Char(string="Descrição resumida do ajuste")

    DT_REF = fields.Date(
        string="Data de referência do ajuste",
        help="Data de referência do ajuste (ddmmaaaa)",
    )

    reg_M110_ids_RegistroM100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.m100",
        string="Crédito de PIS/PASEP Relativo ao Período",
        required=True,
        ondelete="cascade",
    )

    reg_M115_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.m115",
        "reg_M115_ids_RegistroM110_id",
        string="M115 Detalhamento dos Ajustes do Crédito",
        sped_card="1:N",
        help=(
            "M115 Detalhamento dos Ajustes do Crédito de Pis/Pasep Apurado "
            "(Disponibilizado na versão 2.0.12 do PVA, para período de "
            "apuração a partir de 01/10/2015)"
        ),
    )


class RegistroM115(models.Model):
    """Detalhamento dos Ajustes do Crédito de Pis/Pasep Apurado
    (Disponibilizado na versão 2.0.12 do PVA, para período de apuração a
    partir de 01/10/2015)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m115"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    DET_VALOR_AJ = fields.Float(
        string="Detalhamento do valor do crédito reduzido",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Detalhamento do valor do crédito reduzido ou acrescido, informado"
            " no Campo 03 (VL_AJ) do registro M110."
        ),
    )

    CST_PIS = fields.Integer(
        string="Código de Situação Tributária referente",
        help=(
            "Código de Situação Tributária referente à operação detalhada "
            "neste registro."
        ),
    )

    DET_BC_CRED = fields.Float(
        string="Detalhamento da base de cálculo geradora de ajuste",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help=("Detalhamento da base de cálculo geradora de ajuste de crédito"),
    )

    DET_ALIQ = fields.Float(
        string="Detalhamento da alíquota a que se refere o ajuste",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Detalhamento da alíquota a que se refere o ajuste de crédito",
    )

    DT_OPER_AJ = fields.Date(
        string="Data da operação a que se refere",
        required=True,
        help=("Data da operação a que se refere o ajuste informado neste " "registro."),
    )

    DESC_AJ = fields.Char(
        string="Descrição da(s) operação(ões) a que se refere",
        help=(
            "Descrição da(s) operação(ões) a que se refere o valor informado "
            "no Campo 02 (DET_VALOR_AJ)"
        ),
    )

    COD_CTA = fields.Char(
        string="Código da conta contábil debitada/creditada", sped_length=255
    )

    INFO_COMPL = fields.Char(string="Informação complementar")

    reg_M115_ids_RegistroM110_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.m110",
        string="Ajustes do Crédito de PIS/PASEP Apurado",
        required=True,
        ondelete="cascade",
    )


class RegistroM200(models.Model):
    "Consolidação da Contribuição para o PIS/PASEP do Período"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m200"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    VL_TOT_CONT_NC_PER = fields.Monetary(
        string="Valor Total da Contribuição Não Cumulativa",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor Total da Contribuição Não Cumulativa do Período (recuperado"
            " do campo 13 do Registro M210, quando o campo “COD_CONT” = 01, "
            "02, 03, 04, 32 e 71)"
        ),
    )

    VL_TOT_CRED_DESC = fields.Monetary(
        string="Valor do Crédito Descontado",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do Crédito Descontado, Apurado no Próprio Período da "
            "Escrituração (recuperado do campo 14 do Registro M100)"
        ),
    )

    VL_TOT_CRED_DESC_ANT = fields.Monetary(
        string="Valor do Crédito Descontado (VL_TOT_CRED_DESC_ANT)",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do Crédito Descontado, Apurado em Período de Apuração "
            "Anterior (recuperado do campo 13 do Registro 1100)"
        ),
    )

    VL_TOT_CONT_NC_DEV = fields.Monetary(
        string="Valor Total da Contribuição Não Cumulativa Devida",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor Total da Contribuição Não Cumulativa Devida (02 – 03 - 04)"),
    )

    VL_RET_NC = fields.Monetary(
        string="Valor Retido na Fonte Deduzido no Período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_OUT_DED_NC = fields.Monetary(
        string="Outras Deduções no Período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CONT_NC_REC = fields.Monetary(
        string="Valor da Contribuição Não Cumulativa",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Contribuição Não Cumulativa a Recolher/Pagar (05 – 06 - " "07)"
        ),
    )

    VL_TOT_CONT_CUM_PER = fields.Monetary(
        string="Valor Total da Contribuição Cumulativa do Período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor Total da Contribuição Cumulativa do Período (recuperado do "
            "campo 13 do Registro M210, quando o campo “COD_CONT” = 31, 32, "
            "51, 52, 53, 54 e 72)"
        ),
    )

    VL_RET_CUM = fields.Monetary(
        string="VL_RET_CUM",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_OUT_DED_CUM = fields.Monetary(
        string="Outras Deduções no Período (VL_OUT_DED_CUM)",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CONT_CUM_REC = fields.Monetary(
        string="Valor da Contribuição Cumulativa a Recolher/Pagar",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor da Contribuição Cumulativa a Recolher/Pagar (09 - 10 – 11)"),
    )

    VL_TOT_CONT_REC = fields.Monetary(
        string="Valor Total da Contribuição a Recolher/Pagar",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor Total da Contribuição a Recolher/Pagar no Período (08 + 12)"),
    )

    reg_M205_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.m205",
        "reg_M205_ids_RegistroM200_id",
        string="M205 Contribuição para o PIS/Pasep",
        sped_card="1:N",
        help=(
            "M205 Contribuição para o PIS/Pasep a Recolher – Detalhamento por "
            "Código de Receita (Visão Débito DCTF)"
        ),
    )

    reg_M210_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.m210",
        "reg_M210_ids_RegistroM200_id",
        string="M210 Detalhamento da Contribuição para o PIS/PASEP",
        sped_card="1:N",
        help=("M210 Detalhamento da Contribuição para o PIS/PASEP do Período"),
    )


class RegistroM205(models.Model):
    """Contribuição para o PIS/Pasep a Recolher – Detalhamento por Código de
    Receita (Visão Débito DCTF)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m205"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    NUM_CAMPO = fields.Char(
        string="número do campo do registro “M200”",
        required=True,
        help=(
            "número do campo do registro “M200” (Campo 08 (contribuição não "
            "cumulativa) ou Campo 12 (contribuição cumulativa)), objeto de "
            "detalhamento neste registro."
        ),
    )

    COD_REC = fields.Char(
        string="código da receita referente à contribuição",
        required=True,
        help=(
            "código da receita referente à contribuição a recolher, detalhada "
            "neste registro."
        ),
    )

    VL_DEBITO = fields.Monetary(
        string="Valor do Débito correspondente ao código",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do Débito correspondente ao código do Campo 03, conforme "
            "informação na DCTF."
        ),
    )

    reg_M205_ids_RegistroM200_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.m200",
        string="Consolidação da Contribuição para o PIS/PASEP",
        required=True,
        ondelete="cascade",
        help="Consolidação da Contribuição para o PIS/PASEP do Período",
    )


class RegistroM210(models.Model):
    "Detalhamento da Contribuição para o PIS/PASEP do Período"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m210"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_CONT = fields.Char(
        string="Código da contribuição social apurada no período",
        required=True,
        help=(
            "Código da contribuição social apurada no período, conforme a "
            "Tabela 4.3.5."
        ),
    )

    VL_REC_BRT = fields.Monetary(
        string="Valor da Receita Bruta",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_CONT = fields.Monetary(
        string="Valor da Base de Cálculo da Contribuição",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP (em percentual)",
    )

    QUANT_BC_PIS = fields.Float(
        string="Quantidade – Base de cálculo PIS",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    ALIQ_PIS_QUANT = fields.Float(
        string="Alíquota do PIS (em reais)",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_CONT_APUR = fields.Monetary(
        string="Valor total da contribuição social apurada",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_AJUS_ACRES = fields.Monetary(
        string="Valor total dos ajustes de acréscimo",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_AJUS_REDUC = fields.Monetary(
        string="Valor total dos ajustes de redução",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CONT_DIFER = fields.Monetary(
        string="Valor da contribuição a diferir no período",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CONT_DIFER_ANT = fields.Monetary(
        string="Valor da contribuição diferida",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor da contribuição diferida em períodos anteriores",
    )

    VL_CONT_PER = fields.Monetary(
        string="Valor Total da Contribuição do Período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor Total da Contribuição do Período (08 + 09 – 10 – 11+12)"),
    )

    VL_CONT_DIFER = fields.Monetary(
        string="VL_CONT_DIFER", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_CONT_DIFER_ANT = fields.Monetary(
        string="Valor da contribuição diferida (VL_CONT_DIFER_ANT)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor da contribuição diferida em períodos anteriores",
    )

    VL_CONT_PER = fields.Monetary(
        string="VL_CONT_PER",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor Total da Contribuição do Período (11 + 12 – 13 – 14+15)"),
    )

    reg_M210_ids_RegistroM200_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.m200",
        string="Consolidação da Contribuição para o PIS/PASEP",
        required=True,
        ondelete="cascade",
        help="Consolidação da Contribuição para o PIS/PASEP do Período",
    )

    reg_M211_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.m211",
        "reg_M211_ids_RegistroM210_id",
        string="M211 Sociedades Cooperativas – Composição da Base",
        sped_card="1:1",
        help=(
            "M211 Sociedades Cooperativas – Composição da Base de Cálculo – "
            "PIS/PASEP"
        ),
    )

    reg_M215_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.m215",
        "reg_M215_ids_RegistroM210_id",
        string="M215 Detalhamento dos Ajustes da Base",
        sped_card="1:N",
        help=(
            "M215 Detalhamento dos Ajustes da Base de Cálculo Mensal de "
            "PIS/Pasep Apurada"
        ),
    )

    reg_M220_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.m220",
        "reg_M220_ids_RegistroM210_id",
        string="M220 Ajustes da Contribuição",
        sped_card="1:N",
        help="M220 Ajustes da Contribuição para o PIS/PASEP Apurada",
    )

    reg_M230_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.m230",
        "reg_M230_ids_RegistroM210_id",
        string="M230 Informações Adicionais de Diferimento",
        sped_card="1:N",
    )


class RegistroM211(models.Model):
    "Sociedades Cooperativas – Composição da Base de Cálculo – PIS/PASEP"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m211"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    IND_TIP_COOP = fields.Integer(
        string="Indicador do Tipo de Sociedade Cooperativa",
        required=True,
        help=(
            "Indicador do Tipo de Sociedade Cooperativa: 01 – Cooperativa de "
            "Produção Agropecuária; 02 – Cooperativa de Consumo; 03 – "
            "Cooperativa de Crédito; 04 – Cooperativa de Eletrificação Rural; "
            "05 – Cooperativa de Transporte Rodoviário de Cargas; 06 – "
            "Cooperativa de Médicos; 99 – Outras."
        ),
    )

    VL_BC_CONT_ANT_EXC_COOP = fields.Monetary(
        string="Valor da Base de Cálculo da Contribuição",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Base de Cálculo da Contribuição, conforme Registros "
            "escriturados nos Blocos A, C, D e F, antes das Exclusões das "
            "Cooperativas."
        ),
    )

    VL_EXC_COOP_GER = fields.Monetary(
        string="Valor de Exclusão Especifica das Cooperativas",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor de Exclusão Especifica das Cooperativas em Geral, "
            "decorrente das Sobras Apuradas na DRE, destinadas a constituição "
            "do Fundo de Reserva e do FATES."
        ),
    )

    VL_EXC_ESP_COOP = fields.Monetary(
        string="Valor das Exclusões da Base de Cálculo Especifica",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor das Exclusões da Base de Cálculo Especifica do Tipo da "
            "Sociedade Cooperativa, conforme Campo 02 (IND_TIP_COOP)."
        ),
    )

    VL_BC_CONT = fields.Monetary(
        string="Valor da Base de Cálculo",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Base de Cálculo, Após as Exclusões Especificas da "
            "Sociedade Cooperativa (04 – 05 – 06) – Transportar para M210."
        ),
    )

    reg_M211_ids_RegistroM210_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.m210",
        string="Detalhamento da Contribuição para o PIS/PASEP",
        required=True,
        ondelete="cascade",
        help="Detalhamento da Contribuição para o PIS/PASEP do Período",
    )


class RegistroM215(models.Model):
    """Detalhamento dos Ajustes da Base de Cálculo Mensal de PIS/Pasep
    Apurada"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m215"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    IND_AJ_BC = fields.Char(
        string="Indicador do tipo de ajuste da base de cálculo",
        required=True,
        help=(
            "Indicador do tipo de ajuste da base de cálculo: 0 - Ajuste de "
            "redução; 1 - Ajuste de acréscimo."
        ),
    )

    VL_AJ_BC = fields.Monetary(
        string="Valor do ajuste de base de cálculo",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_AJ_BC = fields.Char(
        string="Código do ajuste",
        required=True,
        help="Código do ajuste, conforme a Tabela indicada no item 4.3.18",
    )

    NUM_DOC = fields.Char(
        string="Número do processo",
        help=(
            "Número do processo, documento ou ato concessório ao qual o ajuste"
            " está vinculado, se houver."
        ),
    )

    DESCR_AJ_BC = fields.Char(string="Descrição resumida do ajuste na base de cálculo")

    DT_REF = fields.Date(
        string="Data de referência do ajuste",
        help="Data de referência do ajuste (ddmmaaaa)",
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    CNPJ = fields.Char(
        string="CNPJ do estabelecimento a que se refere o ajuste", required=True
    )

    INFO_COMPL = fields.Char(string="Informação complementar do registro")

    reg_M215_ids_RegistroM210_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.m210",
        string="Detalhamento da Contribuição para o PIS/PASEP",
        required=True,
        ondelete="cascade",
        help="Detalhamento da Contribuição para o PIS/PASEP do Período",
    )


class RegistroM220(models.Model):
    "Ajustes da Contribuição para o PIS/PASEP Apurada"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m220"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    IND_AJ = fields.Char(
        string="Indicador do tipo de ajuste",
        required=True,
        help=(
            "Indicador do tipo de ajuste: 0- Ajuste de redução; 1- Ajuste de "
            "acréscimo."
        ),
    )

    VL_AJ = fields.Monetary(
        string="Valor do ajuste",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_AJ = fields.Char(
        string="Código do ajuste",
        required=True,
        help="Código do ajuste, conforme a Tabela indicada no item 4.3.8.",
    )

    NUM_DOC = fields.Char(
        string="Número do processo",
        help=(
            "Número do processo, documento ou ato concessório ao qual o ajuste"
            " está vinculado, se houver."
        ),
    )

    DESCR_AJ = fields.Char(string="Descrição resumida do ajuste")

    DT_REF = fields.Date(
        string="Data de referência do ajuste",
        help="Data de referência do ajuste (ddmmaaaa)",
    )

    reg_M220_ids_RegistroM210_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.m210",
        string="Detalhamento da Contribuição para o PIS/PASEP",
        required=True,
        ondelete="cascade",
        help="Detalhamento da Contribuição para o PIS/PASEP do Período",
    )

    reg_M225_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.m225",
        "reg_M225_ids_RegistroM220_id",
        string="M225 Detalhamento dos Ajustes da Contribuição",
        sped_card="1:N",
        help=(
            "M225 Detalhamento dos Ajustes da Contribuição para o PIS/Pasep "
            "Apurada (Disponibilizado na versão 2.0.12 do PVA, para período de"
            " apuração a partir de 01/10/2015)"
        ),
    )


class RegistroM225(models.Model):
    """Detalhamento dos Ajustes da Contribuição para o PIS/Pasep Apurada
    (Disponibilizado na versão 2.0.12 do PVA, para período de apuração a
    partir de 01/10/2015)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m225"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 5

    DET_VALOR_AJ = fields.Float(
        string="Detalhamento do valor da contribuição reduzida",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Detalhamento do valor da contribuição reduzida ou acrescida, "
            "informado no Campo 03 (VL_AJ) do registro M220."
        ),
    )

    CST_PIS = fields.Integer(
        string="Código de Situação Tributária referente",
        help=(
            "Código de Situação Tributária referente à operação detalhada "
            "neste registro."
        ),
    )

    DET_BC_CRED = fields.Float(
        string="Detalhamento da base de cálculo geradora de ajuste",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help=("Detalhamento da base de cálculo geradora de ajuste de " "contribuição"),
    )

    DET_ALIQ = fields.Float(
        string="Detalhamento da alíquota a que se refere o ajuste",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help=("Detalhamento da alíquota a que se refere o ajuste de contribuição"),
    )

    DT_OPER_AJ = fields.Date(
        string="Data da operação a que se refere",
        required=True,
        help=("Data da operação a que se refere o ajuste informado neste " "registro."),
    )

    DESC_AJ = fields.Char(
        string="Descrição da(s) operação(ões) a que se refere",
        help=(
            "Descrição da(s) operação(ões) a que se refere o valor informado "
            "no Campo 02 (DET_VALOR_AJ)"
        ),
    )

    COD_CTA = fields.Char(
        string="Código da conta contábil debitada/creditada", sped_length=255
    )

    INFO_COMPL = fields.Char(string="Informação complementar")

    reg_M225_ids_RegistroM220_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.m220",
        string="Ajustes da Contribuição para o PIS/PASEP Apurada",
        required=True,
        ondelete="cascade",
    )


class RegistroM230(models.Model):
    "Informações Adicionais de Diferimento"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m230"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    CNPJ = fields.Char(
        string="CNPJ da pessoa jurídica de direito público",
        required=True,
        help=(
            "CNPJ da pessoa jurídica de direito público, empresa pública, "
            "sociedade de economia mista ou suas subsidiárias."
        ),
    )

    VL_VEND = fields.Monetary(
        string="Valor Total das vendas no período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_NAO_RECEB = fields.Monetary(
        string="Valor Total não recebido no período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CONT_DIF = fields.Monetary(
        string="Valor da Contribuição diferida no período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CRED_DIF = fields.Monetary(
        string="Valor do Crédito diferido no período",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_CRED = fields.Char(
        string="Código de Tipo de Crédito diferido no período",
        help=(
            "Código de Tipo de Crédito diferido no período, conforme a Tabela " "4.3.6."
        ),
    )

    reg_M230_ids_RegistroM210_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.m210",
        string="Detalhamento da Contribuição para o PIS/PASEP",
        required=True,
        ondelete="cascade",
        help="Detalhamento da Contribuição para o PIS/PASEP do Período",
    )


class RegistroM300(models.Model):
    """Contribuição de PIS/PASEP Diferida em Períodos Anteriores - Valores a
    Pagar no Período"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m300"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_CONT = fields.Char(
        string="Código da contribuição social diferida",
        required=True,
        sped_length=2,
        help=(
            "Código da contribuição social diferida em períodos anteriores, "
            "conforme a Tabela 4.3.5."
        ),
    )

    VL_CONT_APUR_DIFER = fields.Monetary(
        string="Valor da Contribuição Apurada",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor da Contribuição Apurada, diferida em períodos anteriores."),
    )

    NAT_CRED_DESC = fields.Char(
        string="Natureza do Crédito Diferido",
        sped_length=2,
        help=(
            "Natureza do Crédito Diferido, vinculado à receita tributada no "
            "mercado interno, a descontar: 01 – Crédito a Alíquota Básica; 02 "
            "– Crédito a Alíquota Diferenciada; 03 – Crédito a Alíquota por "
            "Unidade de Produto; 04 – Crédito Presumido da Agroindústria."
        ),
    )

    VL_CRED_DESC_DIFER = fields.Monetary(
        string="Valor do Crédito a Descontar vinculado",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor do Crédito a Descontar vinculado à contribuição diferida."),
    )

    VL_CONT_DIFER_ANT = fields.Monetary(
        string="Valor da Contribuição a Recolher",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Contribuição a Recolher, diferida em períodos anteriores"
            " (Campo 03 – Campo 05)"
        ),
    )

    PER_APUR = fields.Integer(
        string="Período de apuração da contribuição social",
        required=True,
        help=(
            "Período de apuração da contribuição social e dos créditos "
            "diferidos (MMAAAA)"
        ),
    )

    DT_RECEB = fields.Date(
        string="Data de recebimento da receita",
        help="Data de recebimento da receita, objeto de diferimento",
    )


class RegistroM350(models.Model):
    "PIS/PASEP - Folha de Salários"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m350"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    VL_TOT_FOL = fields.Monetary(
        string="Valor Total da Folha de Salários",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_EXC_BC = fields.Monetary(
        string="Valor Total das Exclusões à Base de Cálculo",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_TOT_BC = fields.Monetary(
        string="Valor Total da Base de Cálculo",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_PIS_FOL = fields.Float(
        string="Alíquota do PIS/PASEP – Folha de Salários",
        required=True,
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_TOT_CONT_FOL = fields.Monetary(
        string="Valor Total da Contribuição Social sobre a Folha",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor Total da Contribuição Social sobre a Folha de Salários",
    )


class RegistroM400(models.Model):
    """Receitas Isentas, Não Alcançadas pela Incidência da Contribuição,
    Sujeitas à Alíquota Zero ou de Vendas com Suspensão – PIS/PASEP"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m400"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    CST_PIS = fields.Char(
        string="Código de Situação Tributária – CST",
        required=True,
        help=(
            "Código de Situação Tributária – CST das demais receitas auferidas"
            " no período, sem incidência da contribuição, ou sem contribuição "
            "apurada a pagar, conforme a Tabela 4.3.3."
        ),
    )

    VL_TOT_REC = fields.Monetary(
        string="Valor total da receita bruta no período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada.",
    )

    DESC_COMPL = fields.Char(string="Descrição Complementar da Natureza da Receita")

    reg_M410_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.m410",
        "reg_M410_ids_RegistroM400_id",
        string="M410 Detalhamento das Receitas Isentas",
        sped_card="1:N",
        help=(
            "M410 Detalhamento das Receitas Isentas, Não Alcançadas pela "
            "Incidência da Contribuição, Sujeitas à Alíquota Zero ou de Vendas"
            " com Suspensão – PIS/PASEP"
        ),
    )


class RegistroM410(models.Model):
    """Detalhamento das Receitas Isentas, Não Alcançadas pela Incidência da
    Contribuição, Sujeitas à Alíquota Zero ou de Vendas com Suspensão –
    PIS/PASEP"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m410"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    NAT_REC = fields.Char(
        string="Natureza da Receita",
        required=True,
        help=(
            "Natureza da Receita, conforme relação constante nas Tabelas de "
            "Detalhamento da Natureza da Receita por Situação Tributária "
            "abaixo: - Tabela 4.3.10: Produtos Sujeitos à Incidência "
            "Monofásica da Contribuição Social – Alíquotas Diferenciadas (CST "
            "04 - Revenda);"
        ),
    )

    VL_REC = fields.Monetary(
        string="Valor da receita bruta no período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da receita bruta no período, relativo a natureza da receita"
            " (NAT_REC)"
        ),
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada.",
    )

    DESC_COMPL = fields.Char(string="Descrição Complementar da Natureza da Receita")

    reg_M410_ids_RegistroM400_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.m400",
        string="Receitas Isentas",
        required=True,
        ondelete="cascade",
        help=(
            "Receitas Isentas, Não Alcançadas pela Incidência da Contribuição,"
            " Sujeitas à Alíquota Zero ou de Vendas com Suspensão – PIS/PASEP"
        ),
    )


class RegistroM500(models.Model):
    "Crédito de COFINS Relativo ao Período"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m500"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_CRED = fields.Char(
        string="Código de Tipo de Crédito apurado no período",
        required=True,
        help=(
            "Código de Tipo de Crédito apurado no período, conforme a Tabela " "4.3.6."
        ),
    )

    IND_CRED_ORI = fields.Integer(
        string="Indicador de Crédito Oriundo",
        required=True,
        help=(
            "Indicador de Crédito Oriundo de: 0 – Operações próprias 1 – "
            "Evento de incorporação, cisão ou fusão"
        ),
    )

    VL_BC_COFINS = fields.Monetary(
        string="Valor da Base de Cálculo do Crédito",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota da COFINS (em percentual)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    QUANT_BC_COFINS = fields.Float(
        string="Quantidade – Base de cálculo COFINS",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    ALIQ_COFINS_QUANT = fields.Float(
        string="Alíquota da COFINS (em reais)",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_CRED = fields.Monetary(
        string="Valor total do crédito apurado no período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_AJUS_ACRES = fields.Monetary(
        string="Valor total dos ajustes de acréscimo",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_AJUS_REDUC = fields.Monetary(
        string="Valor total dos ajustes de redução",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CRED_DIFER = fields.Monetary(
        string="Valor total do crédito diferido no período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CRED_DISP = fields.Monetary(
        string="Valor Total do Crédito Disponível relativo",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor Total do Crédito Disponível relativo ao Período (08 + 09 – "
            "10 – 11)"
        ),
    )

    IND_DESC_CRED = fields.Char(
        string="Indicador de utilização do crédito disponível",
        required=True,
        help=(
            "Indicador de utilização do crédito disponível no período: 0 – "
            "Utilização do valor total para desconto da contribuição apurada "
            "no período, no Registro M600; 1 – Utilização de valor parcial "
            "para desconto da contribuição apurada no período, no Registro "
            "M600."
        ),
    )

    VL_CRED_DESC = fields.Monetary(
        string="Valor do Crédito disponível",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do Crédito disponível, descontado da contribuição apurada "
            "no próprio período. Se IND_DESC_CRED=0, informar o valor total do"
            " Campo 12; Se IND_DESC_CRED=1, informar o valor parcial do Campo "
            "12."
        ),
    )

    SLD_CRED = fields.Float(
        string="Saldo de créditos a utilizar em períodos futuros",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Saldo de créditos a utilizar em períodos futuros (12 – 14)",
    )

    reg_M505_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.m505",
        "reg_M505_ids_RegistroM500_id",
        string="M505 Detalhamento da Base de Cálculo",
        sped_card="1:N",
        help=(
            "M505 Detalhamento da Base de Cálculo do Crédito Apurado no "
            "Período – COFINS"
        ),
    )

    reg_M510_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.m510",
        "reg_M510_ids_RegistroM500_id",
        string="M510 Ajustes do Crédito de COFINS Apurado",
        sped_card="1:N",
    )


class RegistroM505(models.Model):
    """Detalhamento da Base de Cálculo do Crédito Apurado no Período –
    COFINS"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m505"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    NAT_BC_CRED = fields.Char(
        string="Código da Base de Cálculo do Crédito apurado",
        required=True,
        help=(
            "Código da Base de Cálculo do Crédito apurado no período, conforme"
            " a Tabela 4.3.7."
        ),
    )

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente ao crédito",
        required=True,
        help=(
            "Código da Situação Tributária referente ao crédito de COFINS "
            "(Tabela 4.3.4) vinculado ao tipo de crédito escriturado em M500."
        ),
    )

    VL_BC_COFINS_TOT = fields.Monetary(
        string="Valor Total da Base de Cálculo escriturada",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor Total da Base de Cálculo escriturada nos documentos e "
            "operações (Blocos “A”, “C”, “D” e “F”), referente ao CST_COFINS "
            "informado no Campo 03."
        ),
    )

    VL_BC_COFINS_CUM = fields.Monetary(
        string="Parcela do Valor Total da Base",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela do Valor Total da Base de Cálculo informada no Campo 04, "
            "vinculada a receitas com incidência cumulativa. Campo de "
            "preenchimento específico para a pessoa jurídica sujeita ao regime"
            " cumulativo e não- cumulativo da contribuição (COD_INC_TRIB = 3 "
            "do Registro 0110)"
        ),
    )

    VL_BC_COFINS_NC = fields.Monetary(
        string="Valor Total da Base de Cálculo do Crédito",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor Total da Base de Cálculo do Crédito, vinculada a receitas "
            "com incidência não-cumulativa (Campo 04 – Campo 05)."
        ),
    )

    VL_BC_COFINS = fields.Monetary(
        string="Valor da Base de Cálculo do Crédito",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Base de Cálculo do Crédito, vinculada ao tipo de Crédito"
            " escriturado em M500. - Para os CST_COFINS = “50”, “51”, “52”, "
            "“60”, “61” e “62”: Informar o valor do Campo 06 "
            "(VL_BC_COFINS_NC); - Para os CST_COFINS = “53”, “54”, “55”, “56”,"
            " “63”, “64” “65” e “66” (Crédito sobre operações vinculadas a "
            "mais de um tipo de receita): Informar a"
        ),
    )

    QUANT_BC_COFINS_TOT = fields.Float(
        string="Quantidade Total da Base de Cálculo",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help=(
            "Quantidade Total da Base de Cálculo do Crédito apurado em Unidade"
            " de Medida de Produto, escriturada nos documentos e operações "
            "(Blocos “A”, “C”, “D” e “F”), referente ao CST_COFINS informado "
            "no Campo 03"
        ),
    )

    QUANT_BC_COFINS = fields.Float(
        string="O Parcela da base de cálculo do crédito",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help=(
            "O Parcela da base de cálculo do crédito em quantidade (campo 08) "
            "vinculada ao tipo de crédito escriturado em M500. - Para os "
            "CST_COFINS = “50”, “51” e “52”: Informar o valor do Campo 08 "
            "(QUANT_BC_COFINS); - Para os CST_COFINS = “53”, “54”, “55” e “56”"
            " (crédito vinculado a mais de um tipo de receita): Informar a "
            "parcela do valor do Campo 08 (QUANT_BC_COFINS) vinculada ao tipo "
            "de crédito escriturado em M500. valor deste campo será "
            "transportado para o Campo 06 (QUANT_BC_COFINS) do registro M500."
        ),
    )

    DESC_CRED = fields.Char(string="Descrição do crédito", sped_length=60)

    reg_M505_ids_RegistroM500_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.m500",
        string="Crédito de COFINS Relativo ao Período",
        required=True,
        ondelete="cascade",
    )


class RegistroM510(models.Model):
    "Ajustes do Crédito de COFINS Apurado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m510"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    IND_AJ = fields.Char(
        string="Indicador do tipo de ajuste",
        required=True,
        help=(
            "Indicador do tipo de ajuste: 0- Ajuste de redução; 1- Ajuste de "
            "acréscimo."
        ),
    )

    VL_AJ = fields.Monetary(
        string="Valor do ajuste",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_AJ = fields.Char(
        string="Código do ajuste",
        required=True,
        help="Código do ajuste, conforme a Tabela indicada no item 4.3.8.",
    )

    NUM_DOC = fields.Char(
        string="Número do processo",
        help=(
            "Número do processo, documento ou ato concessório ao qual o ajuste"
            " está vinculado, se houver."
        ),
    )

    DESCR_AJ = fields.Char(string="Descrição resumida do ajuste")

    DT_REF = fields.Date(
        string="Data de referência do ajuste",
        help="Data de referência do ajuste (ddmmaaaa)",
    )

    reg_M510_ids_RegistroM500_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.m500",
        string="Crédito de COFINS Relativo ao Período",
        required=True,
        ondelete="cascade",
    )

    reg_M515_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.m515",
        "reg_M515_ids_RegistroM510_id",
        string="M515 Detalhamento dos Ajustes do Crédito",
        sped_card="1:N",
        help=(
            "M515 Detalhamento dos Ajustes do Crédito de Cofins Apurado "
            "(Disponibilizado na versão 2.0.12 do PVA, para período de "
            "apuração a partir de 01/10/2015)"
        ),
    )


class RegistroM515(models.Model):
    """Detalhamento dos Ajustes do Crédito de Cofins Apurado (Disponibilizado
    na versão 2.0.12 do PVA, para período de apuração a partir de
    01/10/2015)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m515"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    DET_VALOR_AJ = fields.Float(
        string="Detalhamento do valor do crédito reduzido",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Detalhamento do valor do crédito reduzido ou acrescido, informado"
            " no Campo 03 (VL_AJ) do registro M510."
        ),
    )

    CST_COFINS = fields.Integer(
        string="Código de Situação Tributária referente",
        help=(
            "Código de Situação Tributária referente à operação detalhada "
            "neste registro."
        ),
    )

    DET_BC_CRED = fields.Float(
        string="Detalhamento da base de cálculo geradora de ajuste",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help=("Detalhamento da base de cálculo geradora de ajuste de crédito"),
    )

    DET_ALIQ = fields.Float(
        string="Detalhamento da alíquota a que se refere o ajuste",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Detalhamento da alíquota a que se refere o ajuste de crédito",
    )

    DT_OPER_AJ = fields.Date(
        string="Data da operação a que se refere",
        required=True,
        help=("Data da operação a que se refere o ajuste informado neste " "registro."),
    )

    DESC_AJ = fields.Char(
        string="Descrição da(s) operação(ões) a que se refere",
        help=(
            "Descrição da(s) operação(ões) a que se refere o valor informado "
            "no Campo 02 (DET_VALOR_AJ)"
        ),
    )

    COD_CTA = fields.Char(
        string="Código da conta contábil debitada/creditada", sped_length=255
    )

    INFO_COMPL = fields.Char(string="Informação complementar")

    reg_M515_ids_RegistroM510_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.m510",
        string="Ajustes do Crédito de COFINS Apurado",
        required=True,
        ondelete="cascade",
    )


class RegistroM600(models.Model):
    """Consolidação da Contribuição para a Seguridade Social - COFINS do
    Período"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m600"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    VL_TOT_CONT_NC_PER = fields.Monetary(
        string="Valor Total da Contribuição Não Cumulativa",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor Total da Contribuição Não Cumulativa do Período (recuperado"
            " do campo 13 do Registro M610, quando o campo “COD_CONT” = 01, "
            "02, 03, 04, 32 e 71)"
        ),
    )

    VL_TOT_CRED_DESC = fields.Monetary(
        string="Valor do Crédito Descontado",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do Crédito Descontado, Apurado no Próprio Período da "
            "Escrituração (recuperado do campo 14 do Registro M500)"
        ),
    )

    VL_TOT_CRED_DESC_ANT = fields.Monetary(
        string="Valor do Crédito Descontado (VL_TOT_CRED_DESC_ANT)",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do Crédito Descontado, Apurado em Período de Apuração "
            "Anterior (recuperado do campo 13 do Registro 1500)"
        ),
    )

    VL_TOT_CONT_NC_DEV = fields.Monetary(
        string="Valor Total da Contribuição Não Cumulativa Devida",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor Total da Contribuição Não Cumulativa Devida (02 - 03 - 04)"),
    )

    VL_RET_NC = fields.Monetary(
        string="Valor Retido na Fonte Deduzido no Período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_OUT_DED_NC = fields.Monetary(
        string="Outras Deduções no Período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CONT_NC_REC = fields.Monetary(
        string="Valor da Contribuição Não Cumulativa",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Contribuição Não Cumulativa a Recolher/Pagar (05 - 06 - " "07)"
        ),
    )

    VL_TOT_CONT_CUM_PER = fields.Monetary(
        string="Valor Total da Contribuição Cumulativa do Período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor Total da Contribuição Cumulativa do Período (recuperado do "
            "campo 13 do Registro M610, quando o campo “COD_CONT” = 31, 32, "
            "51, 52, 53, 54 e 72)"
        ),
    )

    VL_RET_CUM = fields.Monetary(
        string="VL_RET_CUM",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_OUT_DED_CUM = fields.Monetary(
        string="Outras Deduções no Período (VL_OUT_DED_CUM)",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CONT_CUM_REC = fields.Monetary(
        string="Valor da Contribuição Cumulativa a Recolher/Pagar",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor da Contribuição Cumulativa a Recolher/Pagar (09 - 10 - 11)"),
    )

    VL_TOT_CONT_REC = fields.Monetary(
        string="Valor Total da Contribuição a Recolher/Pagar",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor Total da Contribuição a Recolher/Pagar no Período (08 + 12)"),
    )

    reg_M605_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.m605",
        "reg_M605_ids_RegistroM600_id",
        string="M605 Contribuição para a Seguridade Social",
        sped_card="1:N",
        help=(
            "M605 Contribuição para a Seguridade Social - COFINS a Recolher – "
            "Detalhamento por Código de Receita (Visão Débito DCTF)"
        ),
    )

    reg_M610_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.m610",
        "reg_M610_ids_RegistroM600_id",
        string="M610 Detalhamento da Contribuição",
        sped_card="1:N",
        help=(
            "M610 Detalhamento da Contribuição para a Seguridade Social - "
            "COFINS do Período"
        ),
    )


class RegistroM605(models.Model):
    """Contribuição para a Seguridade Social - COFINS a Recolher – Detalhamento
    por Código de Receita (Visão Débito DCTF)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m605"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    NUM_CAMPO = fields.Char(
        string="número do campo do registro “M600”",
        required=True,
        help=(
            "número do campo do registro “M600” (Campo 08 (contribuição não "
            "cumulativa) ou Campo 12 (contribuição cumulativa)), objeto de "
            "detalhamento neste registro."
        ),
    )

    COD_REC = fields.Char(
        string="código da receita referente à contribuição",
        required=True,
        help=(
            "código da receita referente à contribuição a recolher, detalhada "
            "neste registro."
        ),
    )

    VL_DEBITO = fields.Monetary(
        string="Valor do Débito correspondente ao código",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do Débito correspondente ao código do Campo 03, conforme "
            "informação na DCTF."
        ),
    )

    reg_M605_ids_RegistroM600_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.m600",
        string="Consolidação da Contribuição",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação da Contribuição para a Seguridade Social - COFINS do"
            " Período"
        ),
    )


class RegistroM610(models.Model):
    """Detalhamento da Contribuição para a Seguridade Social - COFINS do
    Período"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m610"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_CONT = fields.Char(
        string="Código da contribuição social apurada no período",
        required=True,
        sped_length=2,
        help=(
            "Código da contribuição social apurada no período, conforme a "
            "Tabela 4.3.5."
        ),
    )

    VL_REC_BRT = fields.Monetary(
        string="Valor da Receita Bruta",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_CONT = fields.Monetary(
        string="Valor da Base de Cálculo da Contribuição",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota do COFINS (em percentual)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    QUANT_BC_COFINS = fields.Float(
        string="Quantidade – Base de cálculo COFINS",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
    )

    ALIQ_COFINS_QUANT = fields.Float(
        string="Alíquota do COFINS (em reais)",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
    )

    VL_CONT_APUR = fields.Monetary(
        string="Valor total da contribuição social apurada",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_AJUS_ACRES = fields.Monetary(
        string="Valor total dos ajustes de acréscimo",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_AJUS_REDUC = fields.Monetary(
        string="Valor total dos ajustes de redução",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CONT_DIFER = fields.Monetary(
        string="Valor da contribuição a diferir no período",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CONT_DIFER_ANT = fields.Monetary(
        string="Valor da contribuição diferida",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor da contribuição diferida em períodos anteriores",
    )

    VL_CONT_PER = fields.Monetary(
        string="Valor Total da Contribuição do Período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor Total da Contribuição do Período (08 + 09 – 10 – 11 +12)"),
    )

    VL_CONT_DIFER = fields.Monetary(
        string="VL_CONT_DIFER", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_CONT_DIFER_ANT = fields.Monetary(
        string="Valor da contribuição diferida (VL_CONT_DIFER_ANT)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor da contribuição diferida em períodos anteriores",
    )

    VL_CONT_PER = fields.Monetary(
        string="VL_CONT_PER",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor Total da Contribuição do Período (11 + 12 – 13 – 14+15)"),
    )

    reg_M610_ids_RegistroM600_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.m600",
        string="Consolidação da Contribuição",
        required=True,
        ondelete="cascade",
        help=(
            "Consolidação da Contribuição para a Seguridade Social - COFINS do"
            " Período"
        ),
    )

    reg_M611_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.m611",
        "reg_M611_ids_RegistroM610_id",
        string="M611 Sociedades Cooperativas – Composição da Base",
        sped_card="1:1",
        help=(
            "M611 Sociedades Cooperativas – Composição da Base de Cálculo – " "COFINS"
        ),
    )

    reg_M615_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.m615",
        "reg_M615_ids_RegistroM610_id",
        string="M615 Detalhamento dos Ajustes da Base",
        sped_card="1:N",
        help=(
            "M615 Detalhamento dos Ajustes da Base de Cálculo Mensal da COFINS"
            " Apurada"
        ),
    )

    reg_M620_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.m620",
        "reg_M620_ids_RegistroM610_id",
        string="M620 Ajustes da COFINS Apurada",
        sped_card="1:N",
    )

    reg_M630_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.m630",
        "reg_M630_ids_RegistroM610_id",
        string="M630 Informações Adicionais de Diferimento",
        sped_card="1:N",
    )


class RegistroM611(models.Model):
    "Sociedades Cooperativas – Composição da Base de Cálculo – COFINS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m611"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    IND_TIP_COOP = fields.Integer(
        string="Indicador do Tipo de Sociedade Cooperativa",
        required=True,
        help=(
            "Indicador do Tipo de Sociedade Cooperativa: 01 – Cooperativa de "
            "Produção Agropecuária; 02 – Cooperativa de Consumo; 03 – "
            "Cooperativa de Crédito; 04 – Cooperativa de Eletrificação Rural; "
            "05 – Cooperativa de Transporte Rodoviário de Cargas; 06 – "
            "Cooperativa de Médicos;"
        ),
    )

    VL_BC_CONT_ANT_EXC_COOP = fields.Monetary(
        string="Valor da Base de Cálculo da Contribuição",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Base de Cálculo da Contribuição, conforme Registros "
            "escriturados nos Blocos A, C, D e F, antes das Exclusões das "
            "Sociedades Cooperativas."
        ),
    )

    VL_EXC_COOP_GER = fields.Monetary(
        string="Valor de Exclusão Especifica das Cooperativas",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor de Exclusão Especifica das Cooperativas em Geral, "
            "decorrente das Sobras Apuradas na DRE, destinadas a constituição "
            "do Fundo de Reserva e do FATES."
        ),
    )

    VL_EXC_ESP_COOP = fields.Monetary(
        string="Valor das Exclusões da Base de Cálculo Especifica",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor das Exclusões da Base de Cálculo Especifica do Tipo da "
            "Sociedade Cooperativa, conforme Campo 02 (IND_TIP_COOP)."
        ),
    )

    VL_BC_CONT = fields.Monetary(
        string="Valor da Base de Cálculo",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Base de Cálculo, Após as Exclusões Especificas da "
            "Sociedade Cooperativa (04 – 05 – 06) – Transportar para M610."
        ),
    )

    reg_M611_ids_RegistroM610_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.m610",
        string="Detalhamento da Contribuição",
        required=True,
        ondelete="cascade",
        help=(
            "Detalhamento da Contribuição para a Seguridade Social - COFINS do"
            " Período"
        ),
    )


class RegistroM615(models.Model):
    """Detalhamento dos Ajustes da Base de Cálculo Mensal da COFINS Apurada"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m615"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    IND_AJ_BC = fields.Char(
        string="Indicador do tipo de ajuste da base de cálculo",
        required=True,
        help=(
            "Indicador do tipo de ajuste da base de cálculo: 0 - Ajuste de "
            "redução; 1 - Ajuste de acréscimo."
        ),
    )

    VL_AJ_BC = fields.Monetary(
        string="Valor do ajuste de base de cálculo",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_AJ_BC = fields.Char(
        string="Código do ajuste",
        required=True,
        help="Código do ajuste, conforme a Tabela indicada no item 4.3.18",
    )

    NUM_DOC = fields.Char(
        string="Número do processo",
        help=(
            "Número do processo, documento ou ato concessório ao qual o ajuste"
            " está vinculado, se houver."
        ),
    )

    DESCR_AJ_BC = fields.Char(string="Descrição resumida do ajuste na base de cálculo")

    DT_REF = fields.Date(
        string="Data de referência do ajuste",
        help="Data de referência do ajuste (ddmmaaaa)",
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    CNPJ = fields.Char(
        string="CNPJ do estabelecimento a que se refere o ajuste", required=True
    )

    INFO_COMPL = fields.Char(string="Informação complementar do registro")

    reg_M615_ids_RegistroM610_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.m610",
        string="Detalhamento da Contribuição",
        required=True,
        ondelete="cascade",
        help=(
            "Detalhamento da Contribuição para a Seguridade Social - COFINS do"
            " Período"
        ),
    )


class RegistroM620(models.Model):
    "Ajustes da COFINS Apurada"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m620"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    IND_AJ = fields.Char(
        string="Indicador do tipo de ajuste",
        required=True,
        help=(
            "Indicador do tipo de ajuste: 0- Ajuste de redução; 1- Ajuste de "
            "acréscimo."
        ),
    )

    VL_AJ = fields.Monetary(
        string="Valor do ajuste",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_AJ = fields.Char(
        string="Código do ajuste",
        required=True,
        help="Código do ajuste, conforme a Tabela indicada no item 4.3.8.",
    )

    NUM_DOC = fields.Char(
        string="Número do processo",
        help=(
            "Número do processo, documento ou ato concessório ao qual o ajuste"
            " está vinculado, se houver."
        ),
    )

    DESCR_AJ = fields.Char(string="Descrição resumida do ajuste")

    DT_REF = fields.Date(
        string="Data de referência do ajuste",
        help="Data de referência do ajuste (ddmmaaaa)",
    )

    reg_M620_ids_RegistroM610_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.m610",
        string="Detalhamento da Contribuição",
        required=True,
        ondelete="cascade",
        help=(
            "Detalhamento da Contribuição para a Seguridade Social - COFINS do"
            " Período"
        ),
    )

    reg_M625_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.m625",
        "reg_M625_ids_RegistroM620_id",
        string="M625 Detalhamento dos Ajustes da Cofins Apurada",
        sped_card="1:N",
        help=(
            "M625 Detalhamento dos Ajustes da Cofins Apurada (Disponibilizado "
            "na versão 2.0.12 do PVA, para período de apuração a partir de "
            "01/10/2015)"
        ),
    )


class RegistroM625(models.Model):
    """Detalhamento dos Ajustes da Cofins Apurada (Disponibilizado na versão
    2.0.12 do PVA, para período de apuração a partir de 01/10/2015)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m625"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 5

    DET_VALOR_AJ = fields.Float(
        string="Detalhamento do valor da contribuição reduzida",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Detalhamento do valor da contribuição reduzida ou acrescida, "
            "informado no Campo 03 (VL_AJ) do registro M620."
        ),
    )

    CST_COFINS = fields.Integer(
        string="Código de Situação Tributária referente",
        help=(
            "Código de Situação Tributária referente à operação detalhada "
            "neste registro."
        ),
    )

    DET_BC_CRED = fields.Float(
        string="Detalhamento da base de cálculo geradora de ajuste",
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help=("Detalhamento da base de cálculo geradora de ajuste de " "contribuição"),
    )

    DET_ALIQ = fields.Float(
        string="Detalhamento da alíquota a que se refere o ajuste",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help=("Detalhamento da alíquota a que se refere o ajuste de contribuição"),
    )

    DT_OPER_AJ = fields.Date(
        string="Data da operação a que se refere",
        required=True,
        help=("Data da operação a que se refere o ajuste informado neste " "registro."),
    )

    DESC_AJ = fields.Char(
        string="Descrição da(s) operação(ões) a que se refere",
        help=(
            "Descrição da(s) operação(ões) a que se refere o valor informado "
            "no Campo 02 (DET_VALOR_AJ)"
        ),
    )

    COD_CTA = fields.Char(
        string="Código da conta contábil debitada/creditada", sped_length=255
    )

    INFO_COMPL = fields.Char(string="Informação complementar")

    reg_M625_ids_RegistroM620_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.m620",
        string="Ajustes da COFINS Apurada",
        required=True,
        ondelete="cascade",
    )


class RegistroM630(models.Model):
    "Informações Adicionais de Diferimento"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m630"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    CNPJ = fields.Char(
        string="CNPJ da pessoa jurídica de direito público",
        required=True,
        help=(
            "CNPJ da pessoa jurídica de direito público, empresa pública, "
            "sociedade de economia mista ou suas subsidiárias."
        ),
    )

    VL_VEND = fields.Monetary(
        string="Valor Total das vendas no período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_NAO_RECEB = fields.Monetary(
        string="Valor Total não recebido no período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CONT_DIF = fields.Monetary(
        string="Valor da Contribuição diferida no período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CRED_DIF = fields.Monetary(
        string="Valor do Crédito diferido no período",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_CRED = fields.Char(
        string="Código de Tipo de Crédito diferido no período",
        help=(
            "Código de Tipo de Crédito diferido no período, conforme a Tabela " "4.3.6."
        ),
    )

    reg_M630_ids_RegistroM610_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.m610",
        string="Detalhamento da Contribuição",
        required=True,
        ondelete="cascade",
        help=(
            "Detalhamento da Contribuição para a Seguridade Social - COFINS do"
            " Período"
        ),
    )


class RegistroM700(models.Model):
    "COFINS Diferida em Períodos Anteriores – Valores a Pagar no Período"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m700"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    COD_CONT = fields.Char(
        string="Código da contribuição social diferida",
        required=True,
        sped_length=2,
        help=(
            "Código da contribuição social diferida em períodos anteriores, "
            "conforme a Tabela 4.3.5."
        ),
    )

    VL_CONT_APUR_DIFER = fields.Monetary(
        string="Valor da Contribuição Apurada",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor da Contribuição Apurada, diferida em períodos anteriores."),
    )

    NAT_CRED_DESC = fields.Char(
        string="Natureza do Crédito Diferido",
        sped_length=2,
        help=(
            "Natureza do Crédito Diferido, vinculado à receita tributada no "
            "mercado interno, a descontar: 01 – Crédito a Alíquota Básica; 02 "
            "– Crédito a Alíquota Diferenciada; 03 – Crédito a Alíquota por "
            "Unidade de Produto; 04 – Crédito Presumido da Agroindústria."
        ),
    )

    VL_CRED_DESC_DIFER = fields.Monetary(
        string="Valor do Crédito a Descontar vinculado",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor do Crédito a Descontar vinculado à contribuição diferida."),
    )

    VL_CONT_DIFER_ANT = fields.Monetary(
        string="Valor da Contribuição a Recolher",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Contribuição a Recolher, diferida em períodos anteriores"
            " (Campo 03 – Campo 05)"
        ),
    )

    PER_APUR = fields.Integer(
        string="Período de apuração da contribuição social",
        required=True,
        help=(
            "Período de apuração da contribuição social e dos créditos "
            "diferidos (MMAAAA)."
        ),
    )

    DT_RECEB = fields.Date(
        string="Data de recebimento da receita",
        help="Data de recebimento da receita, objeto de diferimento.",
    )


class RegistroM800(models.Model):
    """Receitas Isentas, Não Alcançadas pela Incidência da Contribuição,
    Sujeitas à Alíquota Zero ou de Vendas com Suspensão – COFINS"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m800"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    CST_COFINS = fields.Char(
        string="Código de Situação Tributária – CST",
        required=True,
        help=(
            "Código de Situação Tributária – CST das demais receitas auferidas"
            " no período, sem incidência da contribuição, ou sem contribuição "
            "apurada a pagar, conforme a Tabela 4.3.4."
        ),
    )

    VL_TOT_REC = fields.Monetary(
        string="Valor total da receita bruta no período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada.",
    )

    DESC_COMPL = fields.Char(string="Descrição Complementar da Natureza da Receita")

    reg_M810_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.m810",
        "reg_M810_ids_RegistroM800_id",
        string="M810 Detalhamento das Receitas Isentas",
        sped_card="1:N",
        help=(
            "M810 Detalhamento das Receitas Isentas, Não Alcançadas pela "
            "Incidência da Contribuição,"
        ),
    )


class RegistroM810(models.Model):
    """Detalhamento das Receitas Isentas, Não Alcançadas pela Incidência da
    Contribuição,"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.m810"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    NAT_REC = fields.Char(
        string="Natureza da Receita",
        required=True,
        help=(
            "Natureza da Receita, conforme relação constante nas Tabelas de "
            "Detalhamento da Natureza da Receita por Situação Tributária "
            "abaixo: - Tabela 4.3.10: Produtos Sujeitos à Incidência "
            "Monofásica da Contribuição Social – Alíquotas Diferenciadas (CST "
            "04 - Revenda); - Tabela 4.3.11: Produtos Sujeitos à Incidência "
            "Monofásica da Contribuição Social – Alíquotas por Unidade de "
            "Medida de Produto (CST 04 - Revenda); - Tabela 4.3.12: Produtos "
            "Sujeitos à Substituição Tributária da Contribuição Social (CST 05"
            " - Revenda); - Tabela 4.3.13: Produtos Sujeitos à Alíquota Zero "
            "da Contribuição Social (CST 06); - Tabela 4.3.14: Operações com "
            "Isenção da Contribuição Social (CST 07); - Tabela 4.3.15: "
            "Operações sem Incidência da Contribuição Social (CST 08); - "
            "Tabela 4.3.16: Operações com Suspensão da Contribuição Social "
            "(CST 09)."
        ),
    )

    VL_REC = fields.Monetary(
        string="Valor da receita bruta no período",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da receita bruta no período, relativo a natureza da receita"
            " (NAT_REC)"
        ),
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada.",
    )

    DESC_COMPL = fields.Char(string="Descrição Complementar da Natureza da Receita")

    reg_M810_ids_RegistroM800_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.m800",
        string="Receitas Isentas",
        required=True,
        ondelete="cascade",
        help=(
            "Receitas Isentas, Não Alcançadas pela Incidência da Contribuição,"
            " Sujeitas à Alíquota Zero ou de Vendas com Suspensão – COFINS"
        ),
    )


class RegistroP010(models.Model):
    "Identificação do Estabelecimento"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.p010"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    CNPJ = fields.Char(
        string="Número de inscrição do estabelecimento no CNPJ", required=True
    )

    reg_P100_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.p100",
        "reg_P100_ids_RegistroP010_id",
        string="P100 Contribuição Previdenciária sobre",
        sped_card="1:N",
        help="P100 Contribuição Previdenciária sobre a Receita Bruta",
    )


class RegistroP100(models.Model):
    "Contribuição Previdenciária sobre a Receita Bruta"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.p100"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    DT_INI = fields.Date(
        string="Data inicial a que a apuração se refere", required=True
    )

    DT_FIN = fields.Date(string="Data final a que a apuração se refere", required=True)

    VL_REC_TOT_EST = fields.Monetary(
        string="Valor da Receita Bruta Total do Estabelecimento",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor da Receita Bruta Total do Estabelecimento no Período",
    )

    COD_ATIV_ECON = fields.Char(
        string="Código indicador correspondente",
        required=True,
        help=(
            "Código indicador correspondente à atividade sujeita a incidência "
            "da Contribuição Previdenciária sobre a Receita Bruta, conforme "
            "Tabela 5.1.1."
        ),
    )

    VL_REC_ATIV_ESTAB = fields.Monetary(
        string="Valor da Receita Bruta do Estabelecimento",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Receita Bruta do Estabelecimento, correspondente às "
            "atividades/produtos referidos no Campo 05 (COD_ATIV_ECON)"
        ),
    )

    VL_EXC = fields.Monetary(
        string="Valor das Exclusões da Receita Bruta informada",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor das Exclusões da Receita Bruta informada no Campo 06",
    )

    VL_BC_CONT = fields.Monetary(
        string="Valor da Base de Cálculo",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Base de Cálculo da Contribuição Previdenciária sobre a "
            "Receita Bruta (Campo 08 = Campo 06 – Campo 07)"
        ),
    )

    ALIQ_CONT = fields.Float(
        string="Alíquota da Contribuição Previdenciária sobre",
        required=True,
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help=("Alíquota da Contribuição Previdenciária sobre a Receita B ruta"),
    )

    VL_CONT_APU = fields.Monetary(
        string="Valor da Contribuição Previdenciária Apurada sobre",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor da Contribuição Previdenciária Apurada sobre a Receita " "Bruta"),
    )

    COD_CTA = fields.Char(
        string="Código da conta analítica contábil referente",
        sped_length=255,
        help=(
            "Código da conta analítica contábil referente à Contribuição "
            "Previdenciária sobre a Receita Bruta"
        ),
    )

    INFO_COMPL = fields.Char(string="Informação complementar do registro")

    reg_P100_ids_RegistroP010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.p010",
        string="Identificação do Estabelecimento",
        required=True,
        ondelete="cascade",
    )

    reg_P110_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.p110",
        "reg_P110_ids_RegistroP100_id",
        string="P110 Complemento da Escrituração – Detalhamento",
        sped_card="1:N",
        help=(
            "P110 Complemento da Escrituração – Detalhamento da Apuração da "
            "Contribuição"
        ),
    )

    reg_P199_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.p199",
        "reg_P199_ids_RegistroP100_id",
        string="P199 Processo Referenciado",
        sped_card="1:N",
    )


class RegistroP110(models.Model):
    """Complemento da Escrituração – Detalhamento da Apuração da
    Contribuição"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.p110"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_CAMPO = fields.Char(
        string="número do campo do registro “P100”",
        required=True,
        help=(
            "número do campo do registro “P100”, objeto de detalhamento neste "
            "registro."
        ),
    )

    COD_DET = fields.Char(
        string="Código do tipo de detalhamento",
        help="Código do tipo de detalhamento, conforme Tabela 5.1.2",
    )

    DET_VALOR = fields.Float(
        string="Valor detalhado referente",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help="Valor detalhado referente ao campo 02 deste registro",
    )

    INF_COMPL = fields.Char(string="Informação complementar do detalhamento")

    reg_P110_ids_RegistroP100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.p100",
        string="Contribuição Previdenciária sobre a Receita Bruta",
        required=True,
        ondelete="cascade",
    )


class RegistroP199(models.Model):
    "Processo Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.p199"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório",
        required=True,
        sped_length=20,
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        required=True,
        help=(
            "Indicador da origem do processo: 1 - Justiça Federal; 3 – "
            "Secretaria da Receita Federal do Brasil 9 – Outros."
        ),
    )

    reg_P199_ids_RegistroP100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.p100",
        string="Contribuição Previdenciária sobre a Receita Bruta",
        required=True,
        ondelete="cascade",
    )


class RegistroP200(models.Model):
    "Consolidação da Contribuição Previdenciária sobre a Receita Bruta"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.p200"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    PER_REF = fields.Integer(
        string="Período de referencia da escrituração",
        required=True,
        help="Período de referencia da escrituração (MMAAAA)",
    )

    VL_TOT_CONT_APU = fields.Monetary(
        string="Valor total apurado",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total apurado da Contribuição Previdenciária sobre a "
            "Receita Bruta (Somatório do Campo 10 “VL_CONT_APU“, do(s) "
            "Registro(s) P100)"
        ),
    )

    VL_TOT_AJ_REDUC = fields.Monetary(
        string="Valor total de “Ajustes de redução”",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total de “Ajustes de redução” (Registro P210, Campo 03, "
            "quando Campo 02 = “0”)"
        ),
    )

    VL_TOT_AJ_ACRES = fields.Monetary(
        string="Valor total de “Ajustes de acréscimo”",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total de “Ajustes de acréscimo” (Registro P210, Campo 03, "
            "quando Campo 02 = “1”)"
        ),
    )

    VL_TOT_CONT_DEV = fields.Monetary(
        string="Valor total da Contribuição Previdenciária sobre",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total da Contribuição Previdenciária sobre a Receita Bruta "
            "a recolher (Campo 03 – Campo 04 + Campo 05)"
        ),
    )

    COD_REC = fields.Char(
        string="Código de Receita referente",
        required=True,
        help=(
            "Código de Receita referente à Contribuição Previdenciária, "
            "conforme informado em DCTF"
        ),
    )

    reg_P210_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.p210",
        "reg_P210_ids_RegistroP200_id",
        string="P210 Ajuste",
        sped_card="1:N",
        help=(
            "P210 Ajuste da Contribuição Previdenciária Apurada sobre a "
            "Receita Bruta"
        ),
    )


class RegistroP210(models.Model):
    "Ajuste da Contribuição Previdenciária Apurada sobre a Receita Bruta"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.p210"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    IND_AJ = fields.Char(
        string="Indicador do tipo de ajuste",
        required=True,
        help=(
            "Indicador do tipo de ajuste: 0- Ajuste de redução; 1- Ajuste de "
            "acréscimo."
        ),
    )

    VL_AJ = fields.Monetary(
        string="Valor do ajuste",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_AJ = fields.Char(
        string="Código do ajuste",
        required=True,
        help=(
            "Código do ajuste, conforme a Tabela indicada no item 4.3.8., "
            "versão 1.01"
        ),
    )

    NUM_DOC = fields.Char(
        string="Número do processo",
        help=(
            "Número do processo, documento ou ato concessório ao qual o ajuste"
            " está vinculado, se houver."
        ),
    )

    DESCR_AJ = fields.Char(string="Descrição resumida do ajuste")

    DT_REF = fields.Date(
        string="Data de referência do ajuste",
        help="Data de referência do ajuste (ddmmaaaa)",
    )

    reg_P210_ids_RegistroP200_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.p200",
        string="Consolidação da Contribuição Previdenciária sobre",
        required=True,
        ondelete="cascade",
        help=("Consolidação da Contribuição Previdenciária sobre a Receita Bruta"),
    )


class Registro1010(models.Model):
    "Processo Referenciado – Ação Judicial"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.1010"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    NUM_PROC = fields.Char(
        string="Identificação do Número do Processo Judicial",
        required=True,
        sped_length=20,
    )

    ID_SEC_JUD = fields.Char(string="Identificação da Seção Judiciária", required=True)

    ID_VARA = fields.Char(string="Identificação da Vara", required=True, sped_length=2)

    IND_NAT_ACAO = fields.Char(
        string="Indicador da Natureza da Ação Judicial",
        required=True,
        help=(
            "Indicador da Natureza da Ação Judicial, impetrada na Justiça "
            "Federal: 01 – Decisão judicial transitada em julgado, a favor da "
            "pessoa jurídica. 02 – Decisão judicial não transitada em julgado,"
            " a favor da pessoa jurídica. 03 – Decisão judicial oriunda de "
            "liminar em mandado de segurança. 04 – Decisão judicial oriunda de"
            " liminar em medida cautelar. 05 – Decisão judicial oriunda de "
            "antecipação de tutela. 06 - Decisão judicial vinculada a depósito"
            " administrativo ou judicial em montante integral."
        ),
    )

    DESC_DEC_JUD = fields.Char(
        string="Descrição Resumida",
        sped_length=100,
        help=(
            "Descrição Resumida dos Efeitos Tributários abrangidos pela "
            "Decisão Judicial proferida."
        ),
    )

    DT_SENT_JUD = fields.Date(string="Data da Sentença/Decisão Judicial")

    reg_1011_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.1011",
        "reg_1011_ids_Registro1010_id",
        string="1011 Detalhamento das Contribuições",
        sped_card="1:N",
        help=("1011 Detalhamento das Contribuições com Exigibilidade Suspensa"),
    )


class Registro1011(models.Model):
    "Detalhamento das Contribuições com Exigibilidade Suspensa"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.1011"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    REG_REF = fields.Char(
        string="Registro da escrituração que terá o detalhamento",
        help=(
            "Registro da escrituração que terá o detalhamento das "
            "contribuições sociais com exigibilidade suspensa (Blocos A, C, D,"
            " F e I, 1800)"
        ),
    )

    CHAVE_DOC = fields.Char(string="Chave do documento eletrônico", sped_length=90)

    COD_PART = fields.Char(
        string="Código do participante",
        sped_length=60,
        help="Código do participante (Campo 02 do Registro 0150)",
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    DT_OPER = fields.Date(string="Data da Operação (ddmmaaaa)", required=True)

    VL_OPER = fields.Monetary(
        string="Valor da Operação/Item",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CST_PIS = fields.Integer(
        string="Código",
        required=True,
        help=(
            "Código da Situação Tributária conforme escrituração, referente ao"
            " PIS/PASEP, conforme a Tabela indicada no item 4.3.3."
        ),
    )

    VL_BC_PIS = fields.Float(
        string="Base de cálculo do PIS/PASEP",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Base de cálculo do PIS/PASEP, conforme escrituração",
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP, conforme escrituração",
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor do PIS/PASEP, conforme escrituração",
    )

    CST_COFINS = fields.Integer(
        string="Código (CST_COFINS)",
        required=True,
        help=(
            "Código da Situação Tributária conforme escrituração, referente a "
            "COFINS, conforme a Tabela indicada no item 4.3.4."
        ),
    )

    VL_BC_COFINS = fields.Float(
        string="Base de cálculo da COFINS",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Base de cálculo da COFINS, conforme escrituração",
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota da COFINS",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota da COFINS, conforme escrituração",
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor da COFINS, conforme escrituração",
    )

    CST_PIS_SUSP = fields.Integer(
        string="Código (CST_PIS_SUSP)",
        required=True,
        help=(
            "Código da Situação Tributária conforme decisão judicial, "
            "referente ao PIS/PASEP, conforme a Tabela indicada no item 4.3.3."
        ),
    )

    VL_BC_PIS_SUSP = fields.Float(
        string="Base de cálculo do PIS/PASEP (VL_BC_PIS_SUSP)",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Base de cálculo do PIS/PASEP, conforme decisão judicial",
    )

    ALIQ_PIS_SUSP = fields.Float(
        string="Alíquota do PIS/PASEP (ALIQ_PIS_SUSP)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP, conforme decisão judicial",
    )

    VL_PIS_SUSP = fields.Monetary(
        string="Valor do PIS/PASEP (VL_PIS_SUSP)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor do PIS/PASEP, conforme decisão judicial",
    )

    CST_COFINS_SUSP = fields.Integer(
        string="Código (CST_COFINS_SUSP)",
        required=True,
        help=(
            "Código da Situação Tributária conforme decisão judicial, "
            "referente a COFINS, conforme a Tabela indicada no item 4.3.4."
        ),
    )

    VL_BC_COFINS_SUSP = fields.Float(
        string="Base de cálculo da COFINS (VL_BC_COFINS_SUSP)",
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Base de cálculo da COFINS, conforme decisão judicial",
    )

    ALIQ_COFINS_SUSP = fields.Float(
        string="Alíquota da COFINS (ALIQ_COFINS_SUSP)",
        sped_length=8,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota da COFINS, conforme decisão judicial",
    )

    VL_COFINS_SUSP = fields.Monetary(
        string="Valor da COFINS (VL_COFINS_SUSP)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor da COFINS, conforme decisão judicial",
    )

    COD_CTA = fields.Char(
        string="Código (COD_CTA)",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    COD_CCUS = fields.Char(string="Código do Centro de Custos", sped_length=255)

    DESC_DOC_OPER = fields.Char(string="Descrição do Documento/Operação")

    reg_1011_ids_Registro1010_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.1010",
        string="Processo Referenciado – Ação Judicial",
        required=True,
        ondelete="cascade",
    )


class Registro1020(models.Model):
    "Processo Referenciado – Processo Administrativo"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.1020"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    NUM_PROC = fields.Char(
        string="Identificação do Processo Administrativo",
        required=True,
        sped_length=20,
        help=(
            "Identificação do Processo Administrativo ou da Decisão " "Administrativa"
        ),
    )

    IND_NAT_ACAO = fields.Char(
        string="Indicador da Natureza da Ação",
        required=True,
        help=(
            "Indicador da Natureza da Ação, decorrente de Processo "
            "Administrativo na Secretaria da Receita Federal do Brasil: 01 – "
            "Processo Administrativo de Consulta 02 – Despacho Decisório 03 – "
            "Ato Declaratório Executivo 04 – Ato Declaratório Interpretativo "
            "05 – Decisão Administrativa de DRJ ou do CARF 06 – Auto de "
            "Infração 99 – Outros"
        ),
    )

    DT_DEC_ADM = fields.Date(
        string="Data do Despacho/Decisão Administrativa", required=True
    )


class Registro1050(models.Model):
    """Detalhamento dos Ajustes da Base de Cálculo Mensal de PIS/Pasep e COFINS
    – Valores Extra Apuração"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.1050"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    DT_REF = fields.Date(
        string="Data de referência do ajuste",
        required=True,
        help="Data de referência do ajuste (ddmmaaaa)",
    )

    IND_AJ_BC = fields.Char(
        string="Indicador da natureza do ajuste da base de cálculo",
        required=True,
        help=(
            "Indicador da natureza do ajuste da base de cálculo, conforme "
            "Tabela Externa 4.3.18"
        ),
    )

    CNPJ = fields.Char(
        string="CNPJ do estabelecimento a que se refere o ajuste", required=True
    )

    VL_AJ_TOT = fields.Monetary(
        string="Valor total do ajuste",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_AJ_CST01 = fields.Monetary(
        string="Parcela do ajuste a apropriar na base",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela do ajuste a apropriar na base de cálculo referente ao CST" " 01"
        ),
    )

    VL_AJ_CST02 = fields.Monetary(
        string="VL_AJ_CST02",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela do ajuste a apropriar na base de cálculo referente ao CST" " 02"
        ),
    )

    VL_AJ_CST03 = fields.Monetary(
        string="VL_AJ_CST03",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela do ajuste a apropriar na base de cálculo referente ao CST" " 03"
        ),
    )

    VL_AJ_CST04 = fields.Monetary(
        string="VL_AJ_CST04",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela do ajuste a apropriar na base de cálculo referente ao CST" " 04"
        ),
    )

    VL_AJ_CST05 = fields.Monetary(
        string="VL_AJ_CST05",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela do ajuste a apropriar na base de cálculo referente ao CST" " 05"
        ),
    )

    VL_AJ_CST06 = fields.Monetary(
        string="VL_AJ_CST06",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela do ajuste a apropriar na base de cálculo referente ao CST" " 06"
        ),
    )

    VL_AJ_CST07 = fields.Monetary(
        string="VL_AJ_CST07",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela do ajuste a apropriar na base de cálculo referente ao CST" " 07"
        ),
    )

    VL_AJ_CST08 = fields.Monetary(
        string="VL_AJ_CST08",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela do ajuste a apropriar na base de cálculo referente ao CST" " 08"
        ),
    )

    VL_AJ_CST09 = fields.Monetary(
        string="VL_AJ_CST09",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela do ajuste a apropriar na base de cálculo referente ao CST" " 09"
        ),
    )

    VL_AJ_CST49 = fields.Monetary(
        string="VL_AJ_CST49",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela do ajuste a apropriar na base de cálculo referente ao CST" " 49"
        ),
    )

    VL_AJ_CST99 = fields.Monetary(
        string="VL_AJ_CST99",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela do ajuste a apropriar na base de cálculo referente ao CST" " 99"
        ),
    )

    IND_APROP = fields.Char(
        string="Indicador de apropriação do ajuste",
        required=True,
        help=(
            "Indicador de apropriação do ajuste: 01 – Referente ao PIS/Pasep e"
            " a Cofins 02 – Referente unicamente ao PIS/Pasep 03 – Referente "
            "unicamente à Cofins"
        ),
    )

    NUM_REC = fields.Char(
        string="Número do recibo da escrituração a que se refere",
        sped_length=80,
        help="Número do recibo da escrituração a que se refere o ajuste",
    )

    INFO_COMPL = fields.Char(string="Informação complementar do registro")


class Registro1100(models.Model):
    "Controle de Créditos Fiscais – PIS/PASEP"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.1100"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    PER_APU_CRED = fields.Integer(
        string="Período de Apuração do Crédito",
        required=True,
        sped_length=6,
        help="Período de Apuração do Crédito (MM/AAAA)",
    )

    ORIG_CRED = fields.Integer(
        string="Indicador da origem do crédito",
        required=True,
        help=(
            "Indicador da origem do crédito: 01 – Crédito decorrente de "
            "operações próprias; 02 – Crédito transferido por pessoa jurídica "
            "sucedida."
        ),
    )

    CNPJ_SUC = fields.Char(
        string="CNPJ da pessoa jurídica cedente do crédito",
        help=("CNPJ da pessoa jurídica cedente do crédito (se ORIG_CRED = 02)."),
    )

    COD_CRED = fields.Integer(
        string="Código do Tipo do Crédito",
        required=True,
        help="Código do Tipo do Crédito, conforme Tabela 4.3.6.",
    )

    VL_CRED_APU = fields.Monetary(
        string="Valor total do crédito apurado",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total do crédito apurado na Escrituração Fiscal Digital "
            "(Registro M100) ou em demonstrativo DACON (Fichas 06A e 06B) de "
            "período anterior."
        ),
    )

    VL_CRED_EXT_APU = fields.Monetary(
        string="Valor de Crédito Extemporâneo Apurado",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor de Crédito Extemporâneo Apurado (Registro 1101), referente "
            "a Período Anterior, Informado no Campo 02 – PER_APU_CRED"
        ),
    )

    VL_TOT_CRED_APU = fields.Monetary(
        string="Valor Total do Crédito Apurado",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor Total do Crédito Apurado (06 + 07)",
    )

    VL_CRED_DESC_PA_ANT = fields.Monetary(
        string="Valor do Crédito utilizado mediante Desconto",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do Crédito utilizado mediante Desconto, em Período(s) "
            "Anterior(es)."
        ),
    )

    VL_CRED_PER_PA_ANT = fields.Monetary(
        string="Valor do Crédito utilizado mediante Pedido",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do Crédito utilizado mediante Pedido de Ressarcimento, em "
            "Período(s) Anterior(es)."
        ),
    )

    VL_CRED_DCOMP_PA_ANT = fields.Monetary(
        string="Valor do Crédito utilizado mediante Declaração",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do Crédito utilizado mediante Declaração de Compensação "
            "Intermediária (Crédito de Exportação), em Período(s) "
            "Anterior(es)."
        ),
    )

    SD_CRED_DISP_EFD = fields.Float(
        string="Saldo do Crédito Disponível",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Saldo do Crédito Disponível para Utilização neste Período de "
            "Escrituração (08 – 09 – 10 - 11)."
        ),
    )

    VL_CRED_DESC_EFD = fields.Monetary(
        string="Valor do Crédito descontado neste período",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor do Crédito descontado neste período de escrituração.",
    )

    VL_CRED_PER_EFD = fields.Monetary(
        string="Valor do Crédito objeto de Pedido de Ressarcimento",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do Crédito objeto de Pedido de Ressarcimento (PER) neste "
            "período de escrituração."
        ),
    )

    VL_CRED_DCOMP_EFD = fields.Monetary(
        string="VL_CRED_DCOMP_EFD",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do Crédito utilizado mediante Declaração de Compensação "
            "Intermediária neste período de escrituração."
        ),
    )

    VL_CRED_TRANS = fields.Monetary(
        string="Valor do crédito transferido em evento de cisão",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do crédito transferido em evento de cisão, fusão ou " "incorporação."
        ),
    )

    VL_CRED_OUT = fields.Monetary(
        string="Valor do crédito utilizado por outras formas",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    SLD_CRED_FIM = fields.Float(
        string="Saldo de créditos a utilizar em período",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Saldo de créditos a utilizar em período de apuração futuro (12 – "
            "13 – 14 – 15 – 16 - 17)."
        ),
    )

    reg_1101_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.1101",
        "reg_1101_ids_Registro1100_id",
        string="1101 Apuração de Crédito Extemporâneo",
        sped_card="1:N",
        help=(
            "1101 Apuração de Crédito Extemporâneo - Documentos e Operações de"
            " Períodos Anteriores – PIS/PASEP (Para períodos de apuração até "
            "Julho de 2013)"
        ),
    )


class Registro1101(models.Model):
    """Apuração de Crédito Extemporâneo - Documentos e Operações de Períodos
    Anteriores – PIS/PASEP (Para períodos de apuração até Julho de 2013)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.1101"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_PART = fields.Char(
        string="Código do participante",
        sped_length=60,
        help="Código do participante (Campo 02 do Registro 0150)",
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1."),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    SUB_SER = fields.Char(string="Subsérie do documento fiscal", sped_length=3)

    NUM_DOC = fields.Integer(string="Número do documento fiscal", sped_length=9)

    DT_OPER = fields.Date(string="Data da Operação (ddmmaaaa)", required=True)

    CHV_NFE = fields.Integer(string="Chave da Nota Fiscal Eletrônica")

    VL_OPER = fields.Monetary(
        string="Valor da Operação",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CFOP = fields.Integer(string="Código fiscal de operação e prestação")

    NAT_BC_CRED = fields.Char(
        string="Código da Base de Cálculo do Crédito",
        required=True,
        help=(
            "Código da Base de Cálculo do Crédito, conforme a Tabela indicada "
            "no item 4.3.7."
        ),
    )

    IND_ORIG_CRED = fields.Char(
        string="Indicador da origem do crédito",
        required=True,
        help=(
            "Indicador da origem do crédito: 0 – Operação no Mercado Interno 1"
            " – Operação de Importação"
        ),
    )

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help=(
            "Código da Situação Tributária referente ao PIS/PASEP, conforme a "
            "Tabela indicada no item 4.3.3."
        ),
    )

    VL_BC_PIS = fields.Float(
        string="Base de Cálculo do Crédito de PIS/PASEP",
        required=True,
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help=(
            "Base de Cálculo do Crédito de PIS/PASEP (em valor ou em " "quantidade)."
        ),
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota do PIS/PASEP",
        required=True,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do PIS/PASEP (em percentual ou em reais).",
    )

    VL_PIS = fields.Monetary(
        string="Valor do Crédito de PIS/PASEP",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada.",
    )

    COD_CCUS = fields.Char(string="Código do Centro de Custos", sped_length=255)

    DESC_COMPL = fields.Char(string="Descrição complementar do Documento/Operação")

    PER_ESCRIT = fields.Integer(
        string="Mês/Ano da Escrituração em que foi registrado",
        help=(
            "Mês/Ano da Escrituração em que foi registrado o "
            "documento/operação (Crédito pelo método da Apropriação Direta)."
        ),
    )

    CNPJ = fields.Char(
        string="CNPJ do estabelecimento gerador",
        required=True,
        help=(
            "CNPJ do estabelecimento gerador do crédito extemporâneo (Campo 04"
            " do Registro 0140)"
        ),
    )

    reg_1101_ids_Registro1100_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.1100",
        string="Controle de Créditos Fiscais – PIS/PASEP",
        required=True,
        ondelete="cascade",
    )

    reg_1102_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.1102",
        "reg_1102_ids_Registro1101_id",
        string="1102 Detalhamento do Crédito Extemporâneo",
        sped_card="1:1",
        help=(
            "1102 Detalhamento do Crédito Extemporâneo, Vinculado a mais de um"
            " Tipo de Receita –"
        ),
    )


class Registro1102(models.Model):
    """Detalhamento do Crédito Extemporâneo, Vinculado a mais de um Tipo de
    Receita –"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.1102"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    VL_CRED_PIS_TRIB_MI = fields.Monetary(
        string="Parcela do Crédito de PIS/PASEP",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela do Crédito de PIS/PASEP, vinculada a Receita Tributada no"
            " Mercado Interno"
        ),
    )

    VL_CRED_PIS_NT_MI = fields.Monetary(
        string="VL_CRED_PIS_NT_MI",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela do Crédito de PIS/PASEP, vinculada a Receita Não "
            "Tributada no Mercado Interno"
        ),
    )

    VL_CRED_PIS_EXP = fields.Monetary(
        string="Parcela do Crédito de PIS/PASEP (VL_CRED_PIS_EXP)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Parcela do Crédito de PIS/PASEP, vinculada a Receita de " "Exportação"),
    )

    reg_1102_ids_Registro1101_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.1101",
        string="Apuração de Crédito Extemporâneo",
        required=True,
        ondelete="cascade",
        help=(
            "Apuração de Crédito Extemporâneo - Documentos e Operações de "
            "Períodos Anteriores – PIS/PASEP (Para períodos de apuração até "
            "Julho de 2013)"
        ),
    )


class Registro1200(models.Model):
    """Contribuição Social Extemporânea – PIS/PASEP (Para períodos de apuração
    até Julho de 2013)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.1200"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    PER_APUR_ANT = fields.Integer(
        string="Período de Apuração",
        required=True,
        help=("Período de Apuração da Contribuição Social Extemporânea (MMAAAA)."),
    )

    NAT_CONT_REC = fields.Char(
        string="Natureza da Contribuição a Recolher",
        required=True,
        sped_length=2,
        help="Natureza da Contribuição a Recolher, conforme Tabela 4.3.5.",
    )

    VL_CONT_APUR = fields.Monetary(
        string="Valor da Contribuição Apurada",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CRED_PIS_DESC = fields.Monetary(
        string="Valor do Crédito de PIS/PASEP a Descontar",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do Crédito de PIS/PASEP a Descontar, da Contribuição Social"
            " Extemporânea."
        ),
    )

    VL_CONT_DEV = fields.Monetary(
        string="Valor da Contribuição Social Extemporânea Devida",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_OUT_DED = fields.Monetary(
        string="Valor de Outras Deduções",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CONT_EXT = fields.Monetary(
        string="Valor da Contribuição Social Extemporânea a pagar",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_MUL = fields.Monetary(
        string="Valor da Multa", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_JUR = fields.Monetary(
        string="Valor dos Juros", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    DT_RECOL = fields.Date(string="Data do Recolhimento")

    reg_1210_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.1210",
        "reg_1210_ids_Registro1200_id",
        string="1210 Detalhamento",
        sped_card="1:N",
        help=(
            "1210 Detalhamento da Contribuição Social Extemporânea – PIS/PASEP"
            " (Para períodos de apuração até Julho de 2013)"
        ),
    )

    reg_1220_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.1220",
        "reg_1220_ids_Registro1200_id",
        string="1220 Demonstração do Crédito a Descontar",
        sped_card="1:N",
        help=(
            "1220 Demonstração do Crédito a Descontar da Contribuição "
            "Extemporânea – PIS/PASEP (Para períodos de apuração até Julho de "
            "2013)"
        ),
    )


class Registro1210(models.Model):
    """Detalhamento da Contribuição Social Extemporânea – PIS/PASEP (Para
    períodos de apuração até Julho de 2013)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.1210"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    CNPJ = fields.Char(
        string="Número de inscrição do estabelecimento no CNPJ",
        required=True,
        help=(
            "Número de inscrição do estabelecimento no CNPJ (Campo 04 do "
            "Registro 0140)."
        ),
    )

    CST_PIS = fields.Integer(
        string="Código da Situação Tributária referente",
        required=True,
        help=(
            "Código da Situação Tributária referente ao PIS/PASEP, conforme a "
            "Tabela indicada no item 4.3.3."
        ),
    )

    COD_PART = fields.Char(
        string="Código do participante",
        sped_length=60,
        help="Código do participante (Campo 02 do Registro 0150)",
    )

    DT_OPER = fields.Date(string="Data da Operação (ddmmaaaa)", required=True)

    VL_OPER = fields.Monetary(
        string="Valor da Operação",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_PIS = fields.Float(
        string="Base de cálculo do PIS/PASEP",
        required=True,
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help="Base de cálculo do PIS/PASEP (em valor ou em quantidade)",
    )

    ALIQ_PIS = fields.Float(
        string="Alíquota da PIS",
        required=True,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota da PIS (em percentual ou em reais)",
    )

    VL_PIS = fields.Monetary(
        string="Valor do PIS/PASEP",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    DESC_COMPL = fields.Char(string="Descrição complementar do Documento/Operação")

    reg_1210_ids_Registro1200_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.1200",
        string="Contribuição Social Extemporânea – PIS/PASEP",
        required=True,
        ondelete="cascade",
        help=(
            "Contribuição Social Extemporânea – PIS/PASEP (Para períodos de "
            "apuração até Julho de 2013)"
        ),
    )


class Registro1220(models.Model):
    """Demonstração do Crédito a Descontar da Contribuição Extemporânea –
    PIS/PASEP (Para períodos de apuração até Julho de 2013)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.1220"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    PER_APU_CRED = fields.Integer(
        string="Período de Apuração do Crédito",
        required=True,
        sped_length=6,
        help="Período de Apuração do Crédito (MM/AAAA)",
    )

    ORIG_CRED = fields.Integer(
        string="Indicador da origem do crédito",
        required=True,
        help=(
            "Indicador da origem do crédito: 01 – Crédito decorrente de "
            "operações próprias; 02 – Crédito transferido por pessoa jurídica "
            "sucedida."
        ),
    )

    COD_CRED = fields.Integer(
        string="Código do Tipo do Crédito",
        required=True,
        help="Código do Tipo do Crédito, conforme Tabela 4.3.6.",
    )

    VL_CRED = fields.Monetary(
        string="Valor do Crédito a Descontar",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_1220_ids_Registro1200_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.1200",
        string="Contribuição Social Extemporânea – PIS/PASEP",
        required=True,
        ondelete="cascade",
        help=(
            "Contribuição Social Extemporânea – PIS/PASEP (Para períodos de "
            "apuração até Julho de 2013)"
        ),
    )


class Registro1300(models.Model):
    "Controle dos Valores Retidos na Fonte – PIS/PASEP"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.1300"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    IND_NAT_RET = fields.Integer(
        string="Indicador de Natureza da Retenção na Fonte",
        required=True,
        help=(
            "Indicador de Natureza da Retenção na Fonte até 2013: 01 - "
            "Retenção por Órgãos, Autarquias e Fundações Federais 02 - "
            "Retenção por outras Entidades da Administração Pública Federal 03"
            " - Retenção por Pessoas Jurídicas de Direito Privado 04 - "
            "Recolhimento por Sociedade Cooperativa 05 - Retenção por "
            "Fabricante de Máquinas e Veículos 99 - Outras Retenções"
        ),
    )

    PR_REC_RET = fields.Integer(
        string="Período do Recebimento e da Retenção",
        required=True,
        sped_length=6,
        help="Período do Recebimento e da Retenção (MM/AAAA)",
    )

    VL_RET_APU = fields.Monetary(
        string="Valor Total da Retenção",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_RET_DED = fields.Monetary(
        string="Valor da Retenção deduzida da Contribuição devida",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Retenção deduzida da Contribuição devida no período da "
            "escrituração e em períodos anteriores."
        ),
    )

    VL_RET_PER = fields.Monetary(
        string="Valor da Retenção utilizada mediante Pedido",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor da Retenção utilizada mediante Pedido de Restituição.",
    )

    VL_RET_DCOMP = fields.Monetary(
        string="Valor da Retenção utilizada mediante Declaração",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor da Retenção utilizada mediante Declaração de Compensação."),
    )

    SLD_RET = fields.Float(
        string="Saldo de Retenção a utilizar em períodos",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Saldo de Retenção a utilizar em períodos de apuração futuros (04 "
            "– 05 - 06 - 07)."
        ),
    )


class Registro1500(models.Model):
    "Controle de Créditos Fiscais – COFINS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.1500"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    PER_APU_CRED = fields.Integer(
        string="Período de Apuração do Crédito",
        required=True,
        sped_length=6,
        help="Período de Apuração do Crédito (MM/AAAA)",
    )

    ORIG_CRED = fields.Integer(
        string="Indicador da origem do crédito",
        required=True,
        help=(
            "Indicador da origem do crédito: 01 – Crédito decorrente de "
            "operações próprias; 02 – Crédito transferido por pessoa jurídica "
            "sucedida."
        ),
    )

    CNPJ_SUC = fields.Char(
        string="CNPJ da pessoa jurídica cedente do crédito",
        help=("CNPJ da pessoa jurídica cedente do crédito (se ORIG_CRED = 02)."),
    )

    COD_CRED = fields.Integer(
        string="Código do Tipo do Crédito",
        required=True,
        help="Código do Tipo do Crédito, conforme Tabela 4.3.6.",
    )

    VL_CRED_APU = fields.Monetary(
        string="Valor Total do crédito apurado",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor Total do crédito apurado na Escrituração Fiscal Digital "
            "(Registro M500) ou em demonstrativo DACON (Fichas 16A e 16B) de "
            "período anterior."
        ),
    )

    VL_CRED_EXT_APU = fields.Monetary(
        string="Valor de Crédito Extemporâneo Apurado",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor de Crédito Extemporâneo Apurado (Registro 1501), referente "
            "a Período Anterior, Informado no Campo 02 – PER_APU_CRED"
        ),
    )

    VL_TOT_CRED_APU = fields.Monetary(
        string="Valor Total do Crédito Apurado",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor Total do Crédito Apurado (06 + 07)",
    )

    VL_CRED_DESC_PA_ANT = fields.Monetary(
        string="Valor do Crédito utilizado mediante Desconto",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do Crédito utilizado mediante Desconto, em Período(s) "
            "Anterior(es)"
        ),
    )

    VL_CRED_PER_PA_ANT = fields.Monetary(
        string="Valor do Crédito utilizado mediante Pedido",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do Crédito utilizado mediante Pedido de Ressarcimento, em "
            "Período(s) Anterior(es)."
        ),
    )

    VL_CRED_DCOMP_PA_ANT = fields.Monetary(
        string="Valor do Crédito utilizado mediante Declaração",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do Crédito utilizado mediante Declaração de Compensação "
            "Intermediária (Crédito de Exportação), em Período(s) Anterior(es)"
        ),
    )

    SD_CRED_DISP_EFD = fields.Float(
        string="Saldo do Crédito Disponível",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Saldo do Crédito Disponível para Utilização neste Período de "
            "Escrituração (08-09-10-11)"
        ),
    )

    VL_CRED_DESC_EFD = fields.Monetary(
        string="Valor do Crédito descontado neste período",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor do Crédito descontado neste período de escrituração",
    )

    VL_CRED_PER_EFD = fields.Monetary(
        string="Valor do Crédito objeto de Pedido de Ressarcimento",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do Crédito objeto de Pedido de Ressarcimento (PER) neste "
            "período de escrituração"
        ),
    )

    VL_CRED_DCOMP_EFD = fields.Monetary(
        string="VL_CRED_DCOMP_EFD",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do Crédito utilizado mediante Declaração de Compensação "
            "Intermediária neste período de escrituração"
        ),
    )

    VL_CRED_TRANS = fields.Monetary(
        string="Valor do crédito transferido em evento de cisão",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do crédito transferido em evento de cisão, fusão ou " "incorporação"
        ),
    )

    VL_CRED_OUT = fields.Monetary(
        string="Valor do crédito utilizado por outras formas",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    SLD_CRED_FIM = fields.Float(
        string="Saldo de créditos a utilizar em período",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Saldo de créditos a utilizar em período de apuração futuro "
            "(12-13-14-15-16-17)."
        ),
    )

    reg_1501_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.1501",
        "reg_1501_ids_Registro1500_id",
        string="1501 Apuração de Crédito Extemporâneo",
        sped_card="1:N",
        help=(
            "1501 Apuração de Crédito Extemporâneo - Documentos e Operações de"
            " Períodos Anteriores – COFINS (Para períodos de apuração até "
            "Julho de 2013)"
        ),
    )


class Registro1501(models.Model):
    """Apuração de Crédito Extemporâneo - Documentos e Operações de Períodos
    Anteriores – COFINS (Para períodos de apuração até Julho de 2013)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.1501"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    COD_PART = fields.Char(
        string="Código do participante",
        sped_length=60,
        help="Código do participante (Campo 02 do Registro 0150)",
    )

    COD_ITEM = fields.Char(
        string="Código do item",
        sped_length=60,
        help="Código do item (campo 02 do Registro 0200)",
    )

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal",
        help=("Código do modelo do documento fiscal, conforme a Tabela 4.1.1."),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    SUB_SER = fields.Char(string="Subsérie do documento fiscal", sped_length=3)

    NUM_DOC = fields.Integer(string="Número do documento fiscal", sped_length=9)

    DT_OPER = fields.Date(string="Data da Operação (ddmmaaaa)", required=True)

    CHV_NFE = fields.Integer(string="Chave da Nota Fiscal Eletrônica")

    VL_OPER = fields.Monetary(
        string="Valor da Operação",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    CFOP = fields.Integer(string="Código fiscal de operação e prestação")

    NAT_BC_CRED = fields.Char(
        string="Código da Base de Cálculo do Crédito",
        required=True,
        help=(
            "Código da Base de Cálculo do Crédito, conforme a Tabela indicada "
            "no item 4.3.7."
        ),
    )

    IND_ORIG_CRED = fields.Char(
        string="Indicador da origem do crédito",
        required=True,
        help=(
            "Indicador da origem do crédito: 0 – Operação no Mercado Interno 1"
            " – Operação de Importação"
        ),
    )

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente ao COFINS",
        required=True,
        help=(
            "Código da Situação Tributária referente ao COFINS, conforme a "
            "Tabela indicada no item 4.3.4."
        ),
    )

    VL_BC_COFINS = fields.Float(
        string="Base de Cálculo do Crédito de COFINS",
        required=True,
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help=("Base de Cálculo do Crédito de COFINS (em valor ou em quantidade)"),
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota do COFINS",
        required=True,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota do COFINS (em percentual ou em reais)",
    )

    VL_COFINS = fields.Monetary(
        string="Valor do Crédito de COFINS",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    COD_CCUS = fields.Char(string="Código do Centro de Custos", sped_length=255)

    DESC_COMPL = fields.Char(string="Descrição complementar do Documento/Operação")

    PER_ESCRIT = fields.Integer(
        string="Mês/Ano da Escrituração em que foi registrado",
        help=(
            "Mês/Ano da Escrituração em que foi registrado o "
            "documento/operação (Crédito pelo método da Apropriação Direta)."
        ),
    )

    CNPJ = fields.Char(
        string="CNPJ do estabelecimento gerador",
        required=True,
        help=(
            "CNPJ do estabelecimento gerador do crédito extemporâneo (Campo 04"
            " do Registro 0140)"
        ),
    )

    reg_1501_ids_Registro1500_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.1500",
        string="Controle de Créditos Fiscais – COFINS",
        required=True,
        ondelete="cascade",
    )

    reg_1502_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.1502",
        "reg_1502_ids_Registro1501_id",
        string="1502 Detalhamento do Crédito Extemporâneo",
        sped_card="1:1",
        help=(
            "1502 Detalhamento do Crédito Extemporâneo, Vinculado a mais de um"
            " Tipo de Receita – COFINS (Para períodos de apuração até Julho de"
            " 2013)"
        ),
    )


class Registro1502(models.Model):
    """Detalhamento do Crédito Extemporâneo, Vinculado a mais de um Tipo de
    Receita – COFINS (Para períodos de apuração até Julho de 2013)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.1502"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 4

    VL_CRED_COFINS_TRIB_MI = fields.Monetary(
        string="Parcela do Crédito de COFINS",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela do Crédito de COFINS, vinculada a Receita Tributada no "
            "Mercado Interno"
        ),
    )

    VL_CRED_COFINS_NT_MI = fields.Monetary(
        string="VL_CRED_COFINS_NT_MI",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Parcela do Crédito de COFINS, vinculada a Receita Não Tributada "
            "no Mercado Interno"
        ),
    )

    VL_CRED_COFINS_EXP = fields.Monetary(
        string="Parcela do Crédito de COFINS (VL_CRED_COFINS_EXP)",
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Parcela do Crédito de COFINS, vinculada a Receita de Exportação"),
    )

    reg_1502_ids_Registro1501_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.1501",
        string="Apuração de Crédito Extemporâneo",
        required=True,
        ondelete="cascade",
        help=(
            "Apuração de Crédito Extemporâneo - Documentos e Operações de "
            "Períodos Anteriores – COFINS (Para períodos de apuração até Julho"
            " de 2013)"
        ),
    )


class Registro1600(models.Model):
    """Contribuição Social Extemporânea – COFINS (Para períodos de apuração até
    Julho de 2013)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.1600"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    PER_APUR_ANT = fields.Integer(
        string="Período de Apuração",
        required=True,
        help=("Período de Apuração da Contribuição Social Extemporânea (MMAAAA)"),
    )

    NAT_CONT_REC = fields.Char(
        string="Natureza da Contribuição a Recolher",
        required=True,
        sped_length=2,
        help="Natureza da Contribuição a Recolher, conforme Tabela 4.3.5.",
    )

    VL_CONT_APUR = fields.Monetary(
        string="Valor da Contribuição Apurada",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CRED_COFINS_DESC = fields.Monetary(
        string="Valor do Crédito de COFINS a Descontar",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor do Crédito de COFINS a Descontar, da Contribuição Social "
            "Extemporânea."
        ),
    )

    VL_CONT_DEV = fields.Monetary(
        string="Valor da Contribuição Social Extemporânea Devida",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_OUT_DED = fields.Monetary(
        string="Valor de Outras Deduções",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_CONT_EXT = fields.Monetary(
        string="Valor da Contribuição Social Extemporânea a pagar",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_MUL = fields.Monetary(
        string="Valor da Multa", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    VL_JUR = fields.Monetary(
        string="Valor dos Juros", xsd_type="TDec_1602", currency_field="brl_currency_id"
    )

    DT_RECOL = fields.Date(string="Data do Recolhimento")

    reg_1610_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.1610",
        "reg_1610_ids_Registro1600_id",
        string="1610 Detalhamento",
        sped_card="1:N",
        help=(
            "1610 Detalhamento da Contribuição Social Extemporânea – COFINS "
            "(Para períodos de apuração até Julho de 2013)"
        ),
    )

    reg_1620_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.1620",
        "reg_1620_ids_Registro1600_id",
        string="1620 Demonstração do Crédito a Descontar",
        sped_card="1:N",
        help=(
            "1620 Demonstração do Crédito a Descontar da Contribuição "
            "Extemporânea – COFINS (Para períodos de apuração até Julho de "
            "2013)"
        ),
    )


class Registro1610(models.Model):
    """Detalhamento da Contribuição Social Extemporânea – COFINS (Para períodos
    de apuração até Julho de 2013)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.1610"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    CNPJ = fields.Char(
        string="Número de inscrição do estabelecimento no CNPJ",
        required=True,
        help=(
            "Número de inscrição do estabelecimento no CNPJ (Campo 04 do "
            "Registro 0140)."
        ),
    )

    CST_COFINS = fields.Integer(
        string="Código da Situação Tributária referente a COFINS",
        required=True,
        help=(
            "Código da Situação Tributária referente a COFINS, conforme a "
            "Tabela indicada no item 4.3.4."
        ),
    )

    COD_PART = fields.Char(
        string="Código do participante",
        sped_length=60,
        help="Código do participante (Campo 02 do Registro 0150)",
    )

    DT_OPER = fields.Date(string="Data da Operação (ddmmaaaa)", required=True)

    VL_OPER = fields.Monetary(
        string="Valor da Operação",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_BC_COFINS = fields.Float(
        string="Base de cálculo da COFINS",
        required=True,
        xsd_type="TDec_1603",
        digits=(
            16,
            3,
        ),
        help="Base de cálculo da COFINS (em valor ou em quantidade)",
    )

    ALIQ_COFINS = fields.Float(
        string="Alíquota da COFINS",
        required=True,
        xsd_type="TDec_1604",
        digits=(
            16,
            4,
        ),
        help="Alíquota da COFINS (em percentual ou em reais)",
    )

    VL_COFINS = fields.Monetary(
        string="Valor da COFINS",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    COD_CTA = fields.Char(
        string="Código",
        sped_length=255,
        help="Código da conta analítica contábil debitada/creditada",
    )

    DESC_COMPL = fields.Char(string="Descrição complementar do Documento/Operação")

    reg_1610_ids_Registro1600_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.1600",
        string="Contribuição Social Extemporânea – COFINS",
        required=True,
        ondelete="cascade",
        help=(
            "Contribuição Social Extemporânea – COFINS (Para períodos de "
            "apuração até Julho de 2013)"
        ),
    )


class Registro1620(models.Model):
    """Demonstração do Crédito a Descontar da Contribuição Extemporânea –
    COFINS (Para períodos de apuração até Julho de 2013)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.1620"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    PER_APU_CRED = fields.Integer(
        string="Período de Apuração do Crédito",
        required=True,
        sped_length=6,
        help="Período de Apuração do Crédito (MM/AAAA)",
    )

    ORIG_CRED = fields.Integer(
        string="Indicador da origem do crédito",
        required=True,
        help=(
            "Indicador da origem do crédito: 01 – Crédito decorrente de "
            "operações próprias; 02 – Crédito transferido por pessoa jurídica "
            "sucedida."
        ),
    )

    COD_CRED = fields.Integer(
        string="Código do Tipo do Crédito",
        required=True,
        help="Código do Tipo do Crédito, conforme Tabela 4.3.6.",
    )

    VL_CRED = fields.Monetary(
        string="Valor do Crédito a Descontar",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    reg_1620_ids_Registro1600_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.1600",
        string="Contribuição Social Extemporânea – COFINS",
        required=True,
        ondelete="cascade",
        help=(
            "Contribuição Social Extemporânea – COFINS (Para períodos de "
            "apuração até Julho de 2013)"
        ),
    )


class Registro1700(models.Model):
    "Controle dos Valores Retidos na Fonte – COFINS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.1700"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    IND_NAT_RET = fields.Integer(
        string="Indicador de Natureza da Retenção na Fonte",
        required=True,
        help=(
            "Indicador de Natureza da Retenção na Fonte até 2013: 01 - "
            "Retenção por Órgãos, Autarquias e Fundações Federais 02 - "
            "Retenção por outras Entidades da Administração Pública Federal 03"
            " - Retenção por Pessoas Jurídicas de Direito Privado 04 - "
            "Recolhimento por Sociedade Cooperativa 05 - Retenção por "
            "Fabricante de Máquinas e Veículos 99 - Outras Retenções"
        ),
    )

    PR_REC_RET = fields.Integer(
        string="Período do Recebimento e da Retenção",
        required=True,
        help="Período do Recebimento e da Retenção (MM/AAAA)",
    )

    VL_RET_APU = fields.Monetary(
        string="Valor Total da Retenção",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    VL_RET_DED = fields.Monetary(
        string="Valor da Retenção deduzida da Contribuição devida",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor da Retenção deduzida da Contribuição devida no período da "
            "escrituração e em períodos anteriores"
        ),
    )

    VL_RET_PER = fields.Monetary(
        string="Valor da Retenção utilizada mediante Pedido",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help="Valor da Retenção utilizada mediante Pedido de Restituição.",
    )

    VL_RET_DCOMP = fields.Monetary(
        string="Valor da Retenção utilizada mediante Declaração",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=("Valor da Retenção utilizada mediante Declaração de Compensação."),
    )

    SLD_RET = fields.Float(
        string="Saldo de Retenção a utilizar em períodos",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Saldo de Retenção a utilizar em períodos de apuração futuros (04 "
            "- 05 - 06 - 07)."
        ),
    )


class Registro1800(models.Model):
    "Incorporação Imobiliária – RET"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.1800"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    INC_IMOB = fields.Char(
        string="Empreendimento objeto de Incorporação Imobiliária",
        required=True,
        sped_length=90,
        help=(
            "Empreendimento objeto de Incorporação Imobiliária, optante pelo " "RET."
        ),
    )

    REC_RECEB_RET = fields.Float(
        string="Receitas recebidas pela incorporadora na venda",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Receitas recebidas pela incorporadora na venda das unidades "
            "imobiliárias que compõem a incorporação."
        ),
    )

    REC_FIN_RET = fields.Float(
        string="Receitas Financeiras",
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
        help=(
            "Receitas Financeiras e Variações Monetárias decorrentes das "
            "vendas submetidas ao RET."
        ),
    )

    BC_RET = fields.Float(
        string="Base de Cálculo do Recolhimento Unificado",
        required=True,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    ALIQ_RET = fields.Float(
        string="Alíquota do Recolhimento Unificado",
        required=True,
        sped_length=6,
        xsd_type="TDec_1602",
        digits=(
            16,
            2,
        ),
    )

    VL_REC_UNI = fields.Monetary(
        string="Valor do Recolhimento Unificado",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
    )

    DT_REC_UNI = fields.Date(string="Data do recolhimento unificado")

    COD_REC = fields.Char(string="Código da Receita", sped_length=4)

    reg_1809_ids = fields.One2many(
        "l10n_br_sped.efd_pis_cofins.6.1809",
        "reg_1809_ids_Registro1800_id",
        string="1809 Processo Referenciado",
        sped_card="1:N",
    )


class Registro1809(models.Model):
    "Processo Referenciado"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.1809"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 3

    NUM_PROC = fields.Char(
        string="Identificação do processo ou ato concessório",
        required=True,
        sped_length=20,
    )

    IND_PROC = fields.Char(
        string="Indicador da origem do processo: 1",
        required=True,
        help=(
            "Indicador da origem do processo: 1 - Justiça Federal; 3 – "
            "Secretaria da Receita Federal do Brasil 9 – Outros."
        ),
    )

    reg_1809_ids_Registro1800_id = fields.Many2one(
        comodel_name="l10n_br_sped.efd_pis_cofins.6.1800",
        string="Incorporação Imobiliária – RET",
        required=True,
        ondelete="cascade",
    )


class Registro1900(models.Model):
    """Consolidação dos Documentos Emitidos por Pessoa Jurídica Submetida ao
    Regime de Tributação com Base no Lucro Presumido – Regime de Caixa ou
    de Competência"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.1900"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    CNPJ = fields.Char(
        string="CNPJ do estabelecimento da pessoa jurídica",
        required=True,
        help=(
            "CNPJ do estabelecimento da pessoa jurídica, emitente dos "
            "documentos geradores de receita"
        ),
    )

    COD_MOD = fields.Char(
        string="Código do modelo do documento fiscal conforme",
        required=True,
        help=(
            "Código do modelo do documento fiscal conforme a Tabela 4.1.1, ou:"
            " 98 – Nota Fiscal de Prestação de Serviços (ISSQN) 99 – Outros "
            "Documentos"
        ),
    )

    SER = fields.Char(string="Série do documento fiscal", sped_length=4)

    SUB_SER = fields.Integer(string="Subserie do documento fiscal", sped_length=20)

    COD_SIT = fields.Integer(
        string="Código da situação do documento fiscal",
        help=(
            "Código da situação do documento fiscal: 00 – Documento regular 02"
            " – Documento cancelado"
        ),
    )

    VL_TOT_REC = fields.Monetary(
        string="Valor total da receita",
        required=True,
        xsd_type="TDec_1602",
        currency_field="brl_currency_id",
        help=(
            "Valor total da receita, conforme os documentos emitidos no "
            "período, representativos da venda de bens e serviços"
        ),
    )

    QUANT_DOC = fields.Integer(
        string="Quantidade total de documentos emitidos no período"
    )

    CST_PIS = fields.Integer(string="Código da Situação Tributária do PIS/Pasep")

    CST_COFINS = fields.Integer(string="Código da Situação Tributária da Cofins")

    CFOP = fields.Integer(string="Código fiscal de operação e prestação")

    INF_COMPL = fields.Char(string="Informações complementares")

    COD_CTA = fields.Char(
        string="Código da conta analítica contábil representativa",
        sped_length=255,
        help="Código da conta analítica contábil representativa da receita",
    )


class Registro9900(models.Model):
    "Registros do Arquivo"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.efd_pis_cofins.6.9900"
    _inherit = "l10n_br_sped.mixin"
    _sped_level = 2

    REG_BLC = fields.Char(
        string="Registro que será totalizado no próximo campo",
        required=True,
        sped_length=4,
    )

    QTD_REG_BLC = fields.Integer(
        string="Total de registros do tipo informado",
        required=True,
        help="Total de registros do tipo informado no campo anterior.",
    )
