-
  I prepare tunneling extra args in the context
-
  !python {model: sale.order}: |
    context.update({'fiscal_category_id': ref('l10n_br_account_product.fc_78df616ab31e95ee46c6a519a2ce9e12'), 'company_id': ref('base.main_company'), 'parent_fiscal_category_id': ref('l10n_br_account_product.fc_78df616ab31e95ee46c6a519a2ce9e12'), 'partner_invoice_id': ref('l10n_br_base.res_partner_akretion')})
-
  In order to test fiscal parameters of Sale Order inside the same state, I create sale order
-
  !record {model: sale.order, id: sale_order_test1, view: l10n_br_sale.l10n_br_sale_order_form}:
    partner_id: l10n_br_base.res_partner_akretion
    fiscal_category_id: l10n_br_account_product.fc_78df616ab31e95ee46c6a519a2ce9e12
    order_line:
      - product_id: product.product_product_10
        product_uom_qty: 8
-
  I verify that the onchange was correctly triggered
-
  !assert {model: sale.order, id: l10n_br_sale_stock.sale_order_test1, string: The onchange function of product was not correctly triggered}:
    - fiscal_category_id.id == ref('l10n_br_account_product.fc_78df616ab31e95ee46c6a519a2ce9e12')
    - fiscal_position.id == ref('l10n_br_account_product.fp_78df616ab31e95ee46c6a519a2ce9e12_internal_demo')
    - order_line[0].product_id.id == ref('product.product_product_10')
    - order_line[0].fiscal_category_id.id == ref('l10n_br_account_product.fc_78df616ab31e95ee46c6a519a2ce9e12')
    - order_line[0].fiscal_position.id == ref('l10n_br_account_product.fp_78df616ab31e95ee46c6a519a2ce9e12_internal_demo')
    - len(order_line[0].tax_id) == 3
    - order_line[0].product_uom_qty == 8
    - order_line[0].product_uom.id == ref('product.product_uom_unit')
-
  I prepare tunneling extra args in the context
-
  !python {model: sale.order}: |
    context.update({'fiscal_category_id': ref('l10n_br_account_product.fc_78df616ab31e95ee46c6a519a2ce9e12'), 'company_id': ref('base.main_company'), 'parent_fiscal_category_id': ref('l10n_br_account_product.fc_78df616ab31e95ee46c6a519a2ce9e12'), 'partner_invoice_id': ref('l10n_br_base.res_partner_address_ak2')})
-
  I create another sale order
-
  !record {model: sale.order, id: sale_order_test2, view: l10n_br_sale.l10n_br_sale_order_form}:
    partner_id: l10n_br_base.res_partner_address_ak2
    fiscal_category_id: l10n_br_account_product.fc_78df616ab31e95ee46c6a519a2ce9e12
    fiscal_position: l10n_br_account_product.fp_78df616ab31e95ee46c6a519a2ce9e12_external_icms12_demo
    order_policy: picking
    order_line:
      - product_id: product.product_product_19
        product_uom: product.product_uom_unit
        product_uom_qty: 16
-
  I verify that the onchange was correctly triggered
-
  !assert {model: sale.order, id: l10n_br_sale_stock.sale_order_test2, string: The onchange function of product was not correctly triggered}:
    - fiscal_category_id.id == ref('l10n_br_account_product.fc_78df616ab31e95ee46c6a519a2ce9e12')
    - fiscal_position.id == ref('l10n_br_account_product.fp_78df616ab31e95ee46c6a519a2ce9e12_external_icms12_demo')
    - order_line[0].product_id.id == ref('product.product_product_19')
    - order_line[0].fiscal_category_id.id == ref('l10n_br_account_product.fc_78df616ab31e95ee46c6a519a2ce9e12')
    - order_line[0].fiscal_position.id == ref('l10n_br_account_product.fp_78df616ab31e95ee46c6a519a2ce9e12_external_icms12_demo')
    - len(order_line[0].tax_id) == 3
    - order_line[0].product_uom.id == ref('product.product_uom_unit')
    - order_line[0].product_uom_qty == 16
-
  I confirm order_test2
-
  !workflow {model: sale.order, action: order_confirm, ref: sale_order_test2}
-
  I check the details of delivery order after confirmed quotation.
-
  !python {model: sale.order}: |
    sale_order = self.browse(cr, uid, ref("sale_order_test2"))
    assert sale_order.picking_ids, "Delivery order is not created."
    for picking in sale_order.picking_ids:
      assert picking.state == "auto" or "confirmed", "Delivery order should be in 'Waitting Availability' state."
      assert picking.picking_type_id.code == 'outgoing',"Shipment should be Outgoing."
      assert picking.fiscal_category_id.id == ref('l10n_br_account_product.fc_78df616ab31e95ee46c6a519a2ce9e12')
      assert picking.fiscal_position.id == ref('l10n_br_account_product.fp_78df616ab31e95ee46c6a519a2ce9e12_external_icms12_demo')
-
  I create Invoice from Delivery Order.
-
  !python {model: stock.invoice.onshipping}: |
    sale = self.pool.get('sale.order')
    sale_order = sale.browse(cr, uid, ref("sale_order_test2"))
    ship_ids = [picking.id for picking in sale_order.picking_ids if picking.invoice_state == '2binvoiced']
    if ship_ids:
      wiz_id = self.create(cr, uid, {'journal_id': ref('account.sales_journal')},
        {'active_ids': ship_ids, 'active_model': 'stock.picking'})
      self.create_invoice(cr, uid, [wiz_id], {"active_ids": ship_ids, "active_id": ship_ids[0]})
-
  I check the invoice details after dispatched delivery.
-
  !python {model: sale.order}: |
    order = self.browse(cr, uid, ref("sale_order_test2"))
    assert order.invoice_ids, "Invoice is not created."
    journal_ids = self.pool.get('account.journal').search(cr, uid, [('type', '=', 'sale'), ('company_id', '=', order.company_id.id)])
    for invoice in order.invoice_ids:
        assert invoice.type == 'out_invoice',"Invoice should be Customer Invoice."
        assert invoice.document_serie_id.id == ref('l10n_br_account_product.l10n_br_document_serie_1_product')
        assert invoice.fiscal_document_id.id == ref('l10n_br_account_product.fiscal_document_55')
        assert invoice.fiscal_category_id.id == ref('l10n_br_account_product.fc_78df616ab31e95ee46c6a519a2ce9e12')
        assert invoice.fiscal_position.id == ref('l10n_br_account_product.fp_78df616ab31e95ee46c6a519a2ce9e12_external_icms12_demo')
        assert invoice.invoice_line[0].fiscal_category_id.id == ref('l10n_br_account_product.fc_78df616ab31e95ee46c6a519a2ce9e12')
        assert invoice.invoice_line[0].fiscal_position.id == ref('l10n_br_account_product.fp_78df616ab31e95ee46c6a519a2ce9e12_external_icms12_demo')
