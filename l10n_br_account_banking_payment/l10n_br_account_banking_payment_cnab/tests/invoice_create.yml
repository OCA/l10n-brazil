-
  Create a sale customer invoice from SP to SP fiscal contributor
-
  !record {model: account.invoice, id: account_invoice_customer_sp_sp_banking, view: l10n_br_account_product.l10n_br_account_product_invoice_form}:
    partner_id: l10n_br_base.res_partner_cliente1_sp
    fiscal_category_id: l10n_br_account_product.fc_78df616ab31e95ee46c6a519a2ce9e12
    reference_type: none
    payment_mode_id: l10n_br_account_banking_payment_cnab.payment_mode_cobranca_bradesco240
    name: 'NFe Invoice Test'
    date_due: 2017-03-05
    invoice_line:
      - product_id: product.product_product_18
        fiscal_category_id: l10n_br_account_product.fc_78df616ab31e95ee46c6a519a2ce9e12
        quantity: 1.0
        price_unit: 1000.00
-
  I check if found fisal position and CFOP, document type and document serie
-
  !assert {model: account.invoice, id: account_invoice_customer_sp_sp_banking}:
    - fiscal_position != False
    - fiscal_document_id.id == company_id.product_invoice_id.id
    - document_serie_id.fiscal_document_id.id == fiscal_document_id.id
    - invoice_line[0].fiscal_position.id == ref('l10n_br_account_product.fp_78df616ab31e95ee46c6a519a2ce9e12_internal_demo')
    - invoice_line[0].cfop_id.code == '5101'

-
  I check that Initially customer invoice is in the "Draft" state
-
  !assert {model: account.invoice, id: account_invoice_customer_sp_sp_banking}:
    - state == 'draft'
-
  I create invoice by clicking on Create button
-
  !workflow {model: account.invoice, action: invoice_validate, ref: account_invoice_customer_sp_sp_banking}
-
  I check that the invoice state is "sefaz_export"
-
  !assert {model: account.invoice, id: account_invoice_customer_sp_sp_banking}:
    - state == 'sefaz_export'
-
  I set the state of invoice to "open" state
-
  !workflow {model: account.invoice, action: invoice_open, ref: account_invoice_customer_sp_sp_banking}
-
  I check that the invoice state is "open"
-
  !assert {model: account.invoice, id: account_invoice_customer_sp_sp_banking}:
    - state == 'open'
-
  I check if the invoice has a related move that is receivable
-
  !assert {model: account.invoice, id: account_invoice_customer_sp_sp_banking}:
    - move_id.line_id[0].date_maturity != False
    - move_id.line_id[0].account_id.type == 'receivable'
-
  I update the main company bank bradesco account digit
-
  !record {model: res.partner.bank, id: l10n_br_account_payment_mode.main_company_bank_bradesco}:
    bra_acc_dig: '0'
-
  I set the bank journal to revenue expenses
-
  !record {model: account.journal, id: account.bank_journal}:
    revenue_expense: True
-
  I create the payment mode for pagamento
-
  !record {model: payment.mode, id: payment_mode_pagamento}:
    name: u'Pagamento'
    bank_id: l10n_br_account_payment_mode.main_company_bank_bradesco
    active: True
    payment_order_type: 'payment'
    sale_ok: True
    journal: account.bank_journal
    company_id: base.main_company
    type: account_banking_payment_export.manual_bank_tranfer
    purchase_ok: False,
    type_sale_payment: '99'
-
  I create the cnab internal sequence
-
  !record {model: ir.sequence, id: cnab_internal_sequence}:
    name: u'Sequência interna de cobrança'
    number_next: 1
    number_next_actual: 1
-
  I create the cnab sufix internal sequence
-
  !record {model: ir.sequence, id: cnab_sufix_internal_sequence}:
    name: u'Sequência interna do sufixo da cobrança'
    number_next: 1
    number_next_actual: 1
-
  I create the cnab sequence
-
  !record {model: l10n_br_cnab.sequence, id: cnab_sequence}:
    code: 'Cob'
    name: u'Sequência da Cobrança'
    internal_sequence_id: cnab_internal_sequence
    parent_payment_mode: payment_mode_pagamento
-
  I create the cnab sufix sequence
-
  !record {model: l10n_br_cnab_file_sufix.sequence, id: cnab_sufix_sequence}:
    code: 'CobSuf'
    name: u'Sequência do sufixo da Cobrança'
    internal_sequence_id: cnab_sufix_internal_sequence
    parent_payment_mode_suf: payment_mode_pagamento
-
  I create the cobrança (payment.order)
-
  !record {model: payment.order, id: cobranca}:
    user_id: 1
    mode: l10n_br_account_banking_payment_cnab.payment_mode_cobranca_bradesco240
    date_prefered: 'due'
    serie_id: cnab_sequence
    serie_sufixo_arquivo: cnab_sufix_sequence
-
  I confirm the cobrança (payment order)
-
  !workflow {model: payment.order, action: open, ref: cobranca}
-
  I check that cobranca(payment order) is now "Confirmed".
-
  !assert {model: payment.order, id: cobranca, severity: error, string: Payment Order should be 'Confirmed'.}:
    - state == 'open'
-
  !record {model: payment.order.create, id: wizard_cobranca}:
    duedate: 2017-03-05
-
  I search for the invoice entries to make the payment.
-
  !python {model: payment.order.create}: |
    self.search_entries(cr, uid, [ref("wizard_cobranca")], {
      "active_model": "payment.order", "active_ids": [ref("cobranca")],
      "active_id": ref("cobranca"), })
-
  I create payment lines entries.
-
  !python {model: payment.order.create}: |
    invoice = self.pool.get('account.invoice').browse(cr, uid, ref("account_invoice_customer_sp_sp_banking"))
    move_line = invoice.move_id.line_id[0]
    self.write(cr, uid, [ref("wizard_cobranca")], {'entries': [(6,0,[move_line.id])]})
    self.create_payment(cr, uid, [ref("wizard_cobranca")], {
      "active_model": "payment.order", "active_ids": [ref("cobranca")],
      "active_id": ref("cobranca")})
-
  I check that payment line is created with proper data.
-
  !python {model: payment.order}: |
    invoice = self.pool.get('account.invoice').browse(cr, uid, ref("account_invoice_customer_sp_sp_banking"))
    payment = self.browse(cr, uid, ref("cobranca"))
    payment_line = payment.line_ids[0]
    # rename the payment line because we can't test if the generated file get dinamic information (payment line get the by ir.sequence)
    payment_line.name = '001'
    payment_line.move_line_id.move_id.name = 1

    assert payment_line.move_line_id, "move line is not created in payment line."
    assert invoice.move_id.name == payment_line.ml_inv_ref.number, "invoice reference number is not same created."
    assert invoice.partner_id == payment_line.partner_id, "Partner is not correct."
    assert invoice.date_due == payment_line.ml_maturity_date, "Due date is not correct."
    assert invoice.amount_total == payment_line.amount, "Payment amount is not correct."
    assert payment_line.move_line_id.amount_to_pay > 0, "Move line paid"
    assert len(self.pool("account.move.line").search(cr, uid,
      [('amount_to_pay', '>', 0), ('id', '=', payment_line.move_line_id.id)])) == 0, \
      "No payment order found for this move line"
-
  After making all payments, I finish the payment order.
-
  !python {model: payment.order, id: cobranca}: |
    def change(string, start, end, what):
      length = end - start
      if len(what)<length: what = what + " "*(length-len(what))
      return string[0:start]+what[0:length]+string[end:]
    import base64
    import time
    assert self.mode.type.ir_model_id.model == 'payment.cnab', "Modelo de wizard errado, deveria ser payment.cnab porem o selecionado foi: %s" %self.mode.type.ir_model_id.model
    wizard = self.env['payment.cnab'].create({})
    wizard.with_context(active_ids=[self.env.ref("l10n_br_account_banking_payment_cnab.cobranca").id]).export()
    generated_file = base64.b64decode(str(wizard.cnab_file))

    # fixing dates to have the same date as the test_file
    generated_file = change(generated_file, 143, 151, '13032017')
    generated_file = change(generated_file, 241+192, 241+199, '13032017')
    generated_file = change(generated_file, 483+110, 483+117, '13032017')

    generated_file = change(generated_file, 151, 157, '120000')

    file_path = openerp.modules.get_module_resource('l10n_br_account_banking_payment_cnab', 'tests', 'test_remessa.REM')
    with open(file_path, 'rb') as test_file:
      readed_test_file = test_file.read()
      assert generated_file == readed_test_file, "O arquivo de remessa gerado \n\n%s \n\ne diferente do arquivo de testes \n\n%s" % (generated_file, readed_test_file)
-
  I check that payment order is now "Done".
-
  !assert {model: payment.order, id: cobranca, severity: error, string: Payment Order should be in 'Done' state}:
    - state == 'done'
-
  I check that payment order is done with proper data.
-
  !python {model: payment.order}: |
    payment = self.browse(cr, uid, ref("cobranca"))
    assert payment.date_done, "Date is not created."
#-
#  I check tax values ICMS
#-
#  !assert {model: account.invoice, id: account_invoice_customer_sp_sp_banking}:
#    - invoice_line[0].icms_cst_id.code == '00'
#    - invoice_line[0].icms_base == 2400.00
#    - invoice_line[0].icms_base_other == 0.00
#    - invoice_line[0].icms_value == 432.00
#    - invoice_line[0].icms_percent == 18.00
#    - invoice_line[0].icms_percent_reduction == 0.00
#-
#  I check tax values ICMS ST
#-
#  !assert {model: account.invoice, id: account_invoice_customer_sp_sp_banking}:
#    - invoice_line[0].icms_st_base == 0.00
#    - invoice_line[0].icms_st_base_other == 0.00
#    - invoice_line[0].icms_st_value == 0.00
#    - invoice_line[0].icms_st_percent == 0.00
#    - invoice_line[0].icms_st_percent_reduction == 0.00
#-
#  I check tax values IPI
#-
#  !assert {model: account.invoice, id: account_invoice_customer_sp_sp_banking}:
#    - invoice_line[0].ipi_cst_id.code == '50'
#    - invoice_line[0].ipi_base == 2400.00
#    - invoice_line[0].ipi_base_other == 0.00
#    - invoice_line[0].ipi_value == 240.00
#    - invoice_line[0].ipi_percent == 10.00
#-
#  I check tax values PIS
#-
#  !assert {model: account.invoice, id: account_invoice_customer_sp_sp_banking}:
#    - invoice_line[0].pis_cst_id.code == '01'
#    - invoice_line[0].pis_base == 2400.00
#    - invoice_line[0].pis_value == 15.60
#    - invoice_line[0].pis_percent == 0.65
#-
#  I check tax values COFINS
#-
#  !assert {model: account.invoice, id: account_invoice_customer_sp_sp_banking}:
#    - invoice_line[0].cofins_cst_id.code == '01'
#    - invoice_line[0].cofins_base == 2400.00
#    - invoice_line[0].cofins_value == 72.00
#    - invoice_line[0].cofins_percent == 3.00
