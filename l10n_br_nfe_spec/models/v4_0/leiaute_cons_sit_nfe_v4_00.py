# Copyright 2022 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models

from .leiaute_nfe_v4_00 import TprotNfe
from .tipos_basico_v4_00 import (
    TAMB,
    TCORGAOIBGE,
    TCODUFIBGE,
)

__NAMESPACE__ = "http://www.portalfiscal.inf.br/nfe"

TCONSSITNFE_XSERV = [
    ("CONSULTAR", "CONSULTAR"),
]

"Tipo Versão do Leiaute da Cosulta situação NF-e - 4.00"
TVERCONSSITNFE = [
    ("4.00", "4.00"),
]


class TconsSitNfe(models.AbstractModel):
    "Tipo Pedido de Consulta da Situação Atual da Nota Fiscal Eletrônica"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "nfe.40.tconssitnfe"
    _inherit = "spec.mixin.nfe"
    _binding_type = "TconsSitNfe"

    nfe40_tpAmb = fields.Selection(
        TAMB,
        xsd_type="TAmb",
        xsd_required=True,
        string="Identificação do Ambiente",
        help="Identificação do Ambiente:\n1 - Produção\n2 - Homologação",
    )

    nfe40_xServ = fields.Selection(
        TCONSSITNFE_XSERV, xsd_required=True, string="Serviço Solicitado"
    )

    nfe40_chNFe = fields.Char(
        xsd_type="TChNFe",
        xsd_required=True,
        string="Chaves de acesso da NF-e",
        help=(
            "Chaves de acesso da NF-e, compostas por: UF do emitente, AAMM da "
            "emissão da NFe, CNPJ do emitente, modelo, série e número da NF-e "
            "e código numérico + DV."
        ),
    )

    nfe40_versao = fields.Selection(
        TVERCONSSITNFE, xsd_type="TVerConsSitNFe", xsd_required=True, string="versao"
    )


class Tevento(models.AbstractModel):
    "Tipo Evento"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "nfe.40.tevento"
    _inherit = "spec.mixin.nfe"
    _binding_type = "Tevento"

    nfe40_infEvento = fields.Many2one(
        xsd_required=True, string="infEvento", comodel_name="nfe.40.infevento"
    )

    nfe40_versao = fields.Char(
        xsd_type="TVerEvento", xsd_required=True, string="versao"
    )


class InfEvento(models.AbstractModel):
    _description = "infEvento"
    _name = "nfe.40.infevento"
    _inherit = "spec.mixin.nfe"
    _binding_type = "Tevento.InfEvento"

    nfe40_cOrgao = fields.Selection(
        TCORGAOIBGE,
        xsd_type="TCOrgaoIBGE",
        xsd_required=True,
        string="Código do órgão de recepção do Evento",
        help=(
            "Código do órgão de recepção do Evento. Utilizar a Tabela do IBGE "
            "extendida, utilizar 90 para identificar o Ambiente Nacional"
        ),
    )

    nfe40_tpAmb = fields.Selection(
        TAMB,
        xsd_type="TAmb",
        xsd_required=True,
        string="Identificação do Ambiente",
        help="Identificação do Ambiente:\n1 - Produção\n2 - Homologação",
    )

    nfe40_CNPJ = fields.Char(xsd_type="TCnpjOpc", string="CNPJ")

    nfe40_CPF = fields.Char(xsd_type="TCpf", string="CPF")

    nfe40_chNFe = fields.Char(
        xsd_type="TChNFe",
        xsd_required=True,
        string="Chave de Acesso da NF",
        help="Chave de Acesso da NF-e vinculada ao evento",
    )

    nfe40_dhEvento = fields.Char(
        xsd_type="TDateTimeUTC",
        xsd_required=True,
        string="Data e Hora do Evento",
        help=(
            "Data e Hora do Evento, formato UTC (AAAA-MM-DDThh:mm:ssTZD, onde "
            "TZD = +hh:mm ou -hh:mm)"
        ),
    )

    nfe40_tpEvento = fields.Char(xsd_required=True, string="Tipo do Evento")

    nfe40_nSeqEvento = fields.Char(
        xsd_required=True,
        string="Seqüencial do evento para o mesmo tipo de evento",
        help=(
            "Seqüencial do evento para o mesmo tipo de evento.  Para maioria "
            "dos eventos será 1, nos casos em que possa existir mais de um "
            "evento, como é o caso da carta de correção, o autor do evento "
            "deve numerar de forma seqüencial."
        ),
    )

    nfe40_verEvento = fields.Char(xsd_required=True, string="Versão do Tipo do Evento")

    nfe40_detEvento = fields.Many2one(
        xsd_required=True,
        string="Detalhe Específico do Evento",
        comodel_name="nfe.40.detevento",
    )

    nfe40_Id = fields.Char(
        xsd_required=True,
        string="Identificador da TAG a ser assinada",
        help=(
            "Identificador da TAG a ser assinada, a regra de formação do Id "
            "é:\n“ID” + tpEvento +  chave da NF-e + nSeqEvento"
        ),
    )


class DetEvento(models.AbstractModel):
    _description = "detEvento"
    _name = "nfe.40.detevento"
    _inherit = "spec.mixin.nfe"
    _binding_type = "Tevento.InfEvento.DetEvento"


class TretCancNfe(models.AbstractModel):
    "Tipo retorno Pedido de Cancelamento da Nota Fiscal Eletrônica"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "nfe.40.tretcancnfe"
    _inherit = "spec.mixin.nfe"
    _binding_type = "TretCancNfe"

    nfe40_infCanc = fields.Many2one(
        xsd_required=True,
        string="infCanc",
        help=(
            "Dados do Resultado do Pedido de Cancelamento da Nota Fiscal " "Eletrônica"
        ),
        comodel_name="nfe.40.infcanc",
    )

    nfe40_versao = fields.Char(
        xsd_type="TVerCancNFe", xsd_required=True, string="versao"
    )


class InfCanc(models.AbstractModel):
    _description = "infCanc"
    _name = "nfe.40.infcanc"
    _inherit = "spec.mixin.nfe"
    _binding_type = "TretCancNfe.InfCanc"

    nfe40_tpAmb = fields.Selection(
        TAMB,
        xsd_type="TAmb",
        xsd_required=True,
        string="Identificação do Ambiente",
        help="Identificação do Ambiente:\n1 - Produção\n2 - Homologação",
    )

    nfe40_verAplic = fields.Char(
        xsd_type="TVerAplic",
        xsd_required=True,
        string="verAplic",
        help="Versão do Aplicativo que processou o pedido de cancelamento",
    )

    nfe40_cStat = fields.Char(
        xsd_type="TStat",
        xsd_required=True,
        string="Código do status da mensagem enviada",
        help="Código do status da mensagem enviada.",
    )

    nfe40_xMotivo = fields.Char(
        xsd_type="TMotivo",
        xsd_required=True,
        string="Descrição literal do status do serviço solicitado",
        help="Descrição literal do status do serviço solicitado.",
    )

    nfe40_cUF = fields.Selection(
        TCODUFIBGE,
        xsd_type="TCodUfIBGE",
        xsd_required=True,
        string="código da UF de atendimento",
    )

    nfe40_chNFe = fields.Char(
        xsd_type="TChNFe",
        string="Chaves de acesso da NF-e",
        help=(
            "Chaves de acesso da NF-e, compostas por: UF do emitente, AAMM da "
            "emissão da NFe, CNPJ do emitente, modelo, série e número da NF-e "
            "e código numérico + DV."
        ),
    )

    nfe40_dhRecbto = fields.Datetime(
        xsd_type="xs:dateTime",
        string="Data e hora de recebimento",
        help=(
            "Data e hora de recebimento, no formato AAAA-MM-DDTHH:MM:SS. Deve "
            "ser preenchida com data e hora da gravação no Banco em caso de "
            "Confirmação."
        ),
    )

    nfe40_nProt = fields.Char(
        xsd_type="TProt",
        string="Número do Protocolo de Status da NF",
        help=(
            "Número do Protocolo de Status da NF-e. 1 posição (1 – Secretaria "
            "de Fazenda Estadual 2 – Receita Federal); 2 - código da UF - 2 "
            "posições ano; 10 seqüencial no ano."
        ),
    )

    nfe40_Id = fields.Char(xsd_type="xs:ID", string="Id")


class TretEvento(models.AbstractModel):
    "Tipo retorno do Evento"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "nfe.40.tretevento"
    _inherit = "spec.mixin.nfe"
    _binding_type = "TretEvento"

    nfe40_infEvento = fields.Many2one(
        xsd_required=True, string="infEvento", comodel_name="nfe.40.infevento"
    )

    nfe40_versao = fields.Char(
        xsd_type="TRetVerEvento", xsd_required=True, string="versao"
    )


class InfEvento(models.AbstractModel):
    _description = "infEvento"
    _name = "nfe.40.infevento"
    _inherit = "spec.mixin.nfe"
    _binding_type = "TretEvento.InfEvento"

    nfe40_tpAmb = fields.Selection(
        TAMB,
        xsd_type="TAmb",
        xsd_required=True,
        string="Identificação do Ambiente",
        help="Identificação do Ambiente:\n1 - Produção\n2 - Homologação",
    )

    nfe40_verAplic = fields.Char(
        xsd_type="TVerAplic",
        xsd_required=True,
        string="Versão do Aplicativo que recebeu o Evento",
    )

    nfe40_cOrgao = fields.Selection(
        TCORGAOIBGE,
        xsd_type="TCOrgaoIBGE",
        xsd_required=True,
        string="Código do órgão de recepção do Evento",
        help=(
            "Código do órgão de recepção do Evento. Utilizar a Tabela do IBGE "
            "extendida, utilizar 90 para identificar o Ambiente Nacional"
        ),
    )

    nfe40_cStat = fields.Char(
        xsd_type="TStat",
        xsd_required=True,
        string="Código do status da registro do Evento",
    )

    nfe40_xMotivo = fields.Char(
        xsd_type="TMotivo",
        xsd_required=True,
        string="Descrição literal do status do registro do Evento",
    )

    nfe40_chNFe = fields.Char(
        xsd_type="TChNFe", string="Chave de Acesso NF-e vinculada"
    )

    nfe40_tpEvento = fields.Char(string="Tipo do Evento vinculado")

    nfe40_xEvento = fields.Char(string="Descrição do Evento")

    nfe40_nSeqEvento = fields.Char(string="Seqüencial do evento")

    nfe40_CNPJDest = fields.Char(xsd_type="TCnpjOpc", string="CNPJ Destinatário")

    nfe40_CPFDest = fields.Char(xsd_type="TCpf", string="CPF Destiantário")

    nfe40_emailDest = fields.Char(string="email do destinatário")

    nfe40_dhRegEvento = fields.Char(
        xsd_type="TDateTimeUTC",
        xsd_required=True,
        string="Data e Hora de registro do evento formato UTC AAAA",
        help=(
            "Data e Hora de registro do evento formato UTC AAAA-MM-" "DDTHH:MM:SSTZD"
        ),
    )

    nfe40_nProt = fields.Char(
        xsd_type="TProt", string="Número do protocolo de registro do evento"
    )

    nfe40_Id = fields.Char(string="Id")


class TprocEvento(models.AbstractModel):
    "Tipo procEvento"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "nfe.40.tprocevento"
    _inherit = "spec.mixin.nfe"
    _binding_type = "TprocEvento"

    nfe40_procEventoNFe_TRetConsSitNFe_id = fields.Many2one(
        comodel_name="nfe.40.tretconssitnfe", xsd_implicit=True, ondelete="cascade"
    )
    nfe40_evento = fields.Many2one(
        xsd_type="TEvento",
        xsd_required=True,
        string="evento",
        comodel_name="nfe.40.tevento",
    )

    nfe40_retEvento = fields.Many2one(
        xsd_type="TRetEvento",
        xsd_required=True,
        string="retEvento",
        comodel_name="nfe.40.tretevento",
    )

    nfe40_versao = fields.Char(
        xsd_type="TVerEvento", xsd_required=True, string="versao"
    )


class TretConsSitNfe(models.AbstractModel):
    """Tipo Retorno de Pedido de Consulta da Situação Atual da Nota Fiscal
    Eletrônica"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "nfe.40.tretconssitnfe"
    _inherit = "spec.mixin.nfe"
    _binding_type = "TretConsSitNfe"

    nfe40_tpAmb = fields.Selection(
        TAMB,
        xsd_type="TAmb",
        xsd_required=True,
        string="Identificação do Ambiente",
        help="Identificação do Ambiente:\n1 - Produção\n2 - Homologação",
    )

    nfe40_verAplic = fields.Char(
        xsd_type="TVerAplic",
        xsd_required=True,
        string="Versão do Aplicativo que processou a NF",
        help="Versão do Aplicativo que processou a NF-e",
    )

    nfe40_cStat = fields.Char(
        xsd_type="TStat",
        xsd_required=True,
        string="Código do status da mensagem enviada",
        help="Código do status da mensagem enviada.",
    )

    nfe40_xMotivo = fields.Char(
        xsd_type="TMotivo",
        xsd_required=True,
        string="Descrição literal do status do serviço solicitado",
        help="Descrição literal do status do serviço solicitado.",
    )

    nfe40_cUF = fields.Selection(
        TCODUFIBGE,
        xsd_type="TCodUfIBGE",
        xsd_required=True,
        string="código da UF de atendimento",
    )

    nfe40_dhRecbto = fields.Char(
        xsd_type="TDateTimeUTC", xsd_required=True, string="AAAA-MM-DDTHH:MM:SSTZD"
    )

    nfe40_chNFe = fields.Char(
        xsd_type="TChNFe",
        xsd_required=True,
        string="Chaves de acesso da NF-e consultada",
    )

    nfe40_protNFe = fields.Many2one(
        xsd_type="TProtNFe",
        string="Protocolo de autorização de uso da NF",
        help="Protocolo de autorização de uso da NF-e",
        comodel_name="nfe.40.tprotnfe",
    )

    nfe40_retCancNFe = fields.Many2one(
        xsd_type="TRetCancNFe",
        string="Protocolo de homologação de cancelamento de uso da NF",
        help="Protocolo de homologação de cancelamento de uso da NF-e",
        comodel_name="nfe.40.tretcancnfe",
    )

    nfe40_procEventoNFe = fields.One2many(
        "nfe.40.tprocevento",
        "nfe40_procEventoNFe_TRetConsSitNFe_id",
        xsd_type="TProcEvento",
        string="Protocolo de registro de evento da NF",
        help="Protocolo de registro de evento da NF-e",
    )

    nfe40_versao = fields.Selection(
        TVERCONSSITNFE, xsd_type="TVerConsSitNFe", xsd_required=True, string="versao"
    )
