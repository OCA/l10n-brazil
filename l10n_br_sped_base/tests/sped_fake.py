# Copyright 2024 - TODAY, Akretion - Raphael Valyi <raphael.valyi@akretion.com>
# License AGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/sped-extractor and xsdata-odoo
# and simplified manually for tests
# flake8: noqa: B950

import textwrap

from erpbrasil.base import misc
from lxml.builder import E

from odoo import api, fields, models

from odoo.addons.l10n_br_sped_base.models.sped_mixin import (
    EDITABLE_ON_DRAFT,
    LAYOUT_VERSIONS,
)


class Registro0000(models.Model):
    "ABERTURA DO ARQUIVO DIGITAL E IDENTIFICAÇÃO DO EMPRESÁRIO OU DA SOCIEDADE EMPRESÁRIA"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.fake.0000"
    _inherit = ["l10n_br_sped.fake.9.0000"]
    _odoo_model = "res.company"

    IND_SIT_ESP = fields.Selection(
        selection=[
            ("0", "0 - Abertura"),
            ("1", "1 - Cisão"),
            ("2", "2 - Fusão"),
            ("3", "3 - Incorporação"),
            ("4", "4 - Extinção"),
            ("5", "5 - Transformação"),
            ("6", "6 - Transferência de Sede"),
        ],
        string="Indicador de situação especial",
    )

    IND_SIT_INI_PER = fields.Selection(
        default="0",
        selection=[
            ("0", "0 - Normal"),
            ("1", "1 - Abertura"),
            ("2", "2 - Cisão/Fusão"),
            ("3", "3 - Obrigatoriedade no curso do ano"),
        ],
        string="Indicador de situação do inicio do período",
    )

    IND_FIN_ESC = fields.Selection(
        default="0",
        selection=[
            ("0", "0 - Original"),
            ("1", "1 - Substituta da escrituração com NIRE"),
            ("2", "2 - Substituta da escrituração sem NIRE"),
            ("3", "3 - Substituta da escrituração com troca de NIRE"),
        ],
        string="Indicador de finalidade da escrituração",
    )

    # not a register 0000 field, but used for i010 register
    ind_esc = fields.Selection(
        selection=[
            ("G", "G - Diário completo"),
            ("R", "R - Escrituração Resumida"),
            ("A", "A - Auxiliar"),
            ("B", "B - Diários e Balanços"),
            ("Z", "Z - Razão Auxiliar"),
        ],
        default="G",
        string="Forma de escritura contábil",
    )

    @api.model
    def _append_top_view_elements(self, group, inline=False):
        super()._append_top_view_elements(group)
        group.append(E.field(name="ind_esc", required="1", attrs=EDITABLE_ON_DRAFT))

    @api.model
    def _odoo_domain(self, parent_record, declaration):
        return [("id", "=", declaration.company_id.id)]

    @api.model
    def _map_from_odoo(self, record, parent_record, declaration, index=0):
        return {
            "LECD": "LECD",
            # "DT_INI": (will use the declaration field directly),
            # "DT_FIN": (will use the declaration field directly),
            "NOME": record.legal_name,
            "CNPJ": misc.punctuation_rm(record.cnpj_cpf),
            "UF": record.state_id.code,
            "IE": misc.punctuation_rm(record.inscr_est),
            "COD_MUN": record.city_id.ibge_code,
            "IM": misc.punctuation_rm(record.inscr_mun or ""),
            # "IND_SIT_ESP": (will use the declaration field directly),
            # "IND_SIT_INI_PER": (will use the declaration field directly),
            "IND_NIRE": 0,  # TODO
            # "IND_FIN_ESC"
            "COD_HASH_SUB": 0,  # TODO
            "IND_GRANDE_PORTE": 0,  # TODO
            "TIP_ECD": 0,  # TODO
            "COD_SCP": 0,  # TODO
            "IDENT_MF": 0,  # TODO
            "IND_ESC_CONS": 0,  # TODO
            "IND_CENTRALIZADA": 0,  # TODO
            "IND_MUDANC_PC": 0,  # TODO
            "COD_PLAN_REF": 0,  # TODO
        }


class Registro0007(models.Model):
    "OUTRAS INSCRIÇÕES CADASTRAIS DA PESSOA JURÍDICA"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.fake.0007"
    _inherit = "l10n_br_sped.fake.9.0007"


class RegistroI010(models.Model):
    "IDENTIFICAÇÃO DA ESCRITURAÇÃO CONTÁBIL"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.fake.i010"
    _inherit = "l10n_br_sped.fake.9.i010"

    IND_ESC = fields.Selection(related="declaration_id.ind_esc", readonly=False)

    @api.model
    def _map_from_odoo(self, record, parent_record, declaration, index=0):
        return {
            "COD_VER_LC": LAYOUT_VERSIONS["ecd"],
        }


class RegistroI012(models.Model):
    "LIVROS AUXILIARES AO DIÁRIO"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.fake.i012"
    _inherit = "l10n_br_sped.fake.9.i012"


class RegistroI015(models.Model):
    """IDENTIFICAÇÃO DAS CONTAS DA ESCRITURAÇÃO RESUMIDA A QUE SE REFERE A
    ESCRITURAÇÃO AUXILIAR"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.fake.i015"
    _inherit = "l10n_br_sped.fake.9.i015"


class RegistroI030(models.Model):
    "TERMO DE ABERTURA"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.fake.i030"
    _inherit = "l10n_br_sped.fake.9.i030"


class RegistroI050(models.Model):
    "PLANO DE CONTAS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.fake.i050"
    _inherit = "l10n_br_sped.fake.9.i050"


class RegistroI510(models.Model):
    """DEFINIÇÃO DOS CAMPOS DO LIVRO RAZÃO AUXILIAR COM LEIAUTE
    PARAMETRIZÁVEL"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.fake.i510"
    _inherit = "l10n_br_sped.fake.9.i510"


class RegistroI550(models.Model):
    "DETALHES DO LIVRO RAZÃO AUXILIAR COM LEIAUTE PARAMETRIZÁVEL"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.fake.i550"
    _inherit = "l10n_br_sped.fake.9.i550"

    RZ_CONT = fields.Char()  # according to pdf specification

    @api.model
    def _read_register_line(self, line, version):
        vals = {"RZ_CONT": "|".join(line.split("|")[2:][:-1])}
        return vals

    def _generate_register_text(self, sped, version, line_count, count_by_register):
        code = self._name[-4:].upper()
        if len(self):
            count_by_register[code] += len(self)
        for rec in self:
            sped.write("\n|%s|" % (code,))
            sped.write(rec.RZ_CONT)
            sped.write("|")
            line_count[0] += 1
            rec.reg_I555_ids._generate_register_text(
                sped, version, line_count, count_by_register
            )
        return sped


class RegistroI555(models.Model):
    "TOTAIS NO LIVRO RAZÃO AUXILIAR COM LEIAUTE PARAMETRIZÁVEL"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.fake.i555"
    _inherit = "l10n_br_sped.fake.9.i555"

    RZ_CONT_TOT = fields.Char()  # according to pdf specification

    @api.model
    def _read_register_line(self, line, version):
        vals = {"RZ_CONT_TOT": "|".join(line.split("|")[2:][:-1])}
        return vals

    def _generate_register_text(self, sped, version, line_count, count_by_register):
        code = self._name[-4:].upper()
        if len(self):
            count_by_register[code] += len(self)
        for rec in self:
            sped.write("\n|%s|" % (code,))
            sped.write(rec.RZ_CONT_TOT or "")
            sped.write("|")
            line_count[0] += 1


class RegistroJ900(models.Model):
    "TERMO DE ENCERRAMENTO"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.fake.j900"
    _inherit = "l10n_br_sped.fake.9.j900"


class RegistroJ930(models.Model):
    "SIGNATÁRIOS DA ESCRITURAÇÃO"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.fake.j930"
    _inherit = "l10n_br_sped.fake.9.j930"
