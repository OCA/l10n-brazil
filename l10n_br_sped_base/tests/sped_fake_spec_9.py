# Copyright 2024 - TODAY, Akretion - Raphael Valyi <raphael.valyi@akretion.com>
# License AGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/sped-extractor and xsdata-odoo
# and simplified manually for tests
# flake8: noqa: B950

import textwrap

from odoo import fields, models


class Registro0000(models.AbstractModel):
    """ABERTURA DO ARQUIVO DIGITAL E IDENTIFICAÇÃO DO EMPRESÁRIO OU DA
    SOCIEDADE EMPRESÁRIA"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.fake.9.0000"
    _inherit = "l10n_br_sped.declaration"
    _sped_level = 0

    LECD = fields.Char(
        string="Texto fixo contendo “LECD”", required=True, sped_length="4"
    )

    DT_INI = fields.Date(
        string="Data inicial das informações contidas no arquivo",
        required=True,
        sped_length="8",
    )

    DT_FIN = fields.Date(
        string="Data final das informações contidas no arquivo",
        required=True,
        sped_length="8",
    )

    NOME = fields.Char(string="Nome empresarial da pessoa jurídica", required=True)

    CNPJ = fields.Char(
        string="Número de inscrição da pessoa jurídica no CNPJ",
        required=True,
        xsd_type="numeric_code",
        sped_length="14",
        help=(
            "Número de inscrição da pessoa jurídica no CNPJ. Observação: Esse "
            "CNPJ é sempre da Sócia Ostensiva, no caso do arquivo da SCP."
        ),
    )

    UF = fields.Char(
        string="Sigla da unidade da federação da pessoa jurídica",
        required=True,
        sped_length="2",
    )

    IE = fields.Char(string="Inscrição Estadual da pessoa jurídica")

    COD_MUN = fields.Char(
        string="Código do município do domicílio fiscal",
        xsd_type="numeric_code",
        sped_length="7",
        help=(
            "Código do município do domicílio fiscal da pessoa jurídica, "
            "conforme tabela do IBGE – Instituto Brasileiro de Geografia e "
            "Estatística."
        ),
    )

    IM = fields.Char(string="Inscrição Municipal da pessoa jurídica")

    IND_SIT_ESP = fields.Char(
        string="Indicador de situação especial",
        xsd_type="numeric_code",
        sped_length="1",
        help=(
            "Indicador de situação especial (conforme tabela publicada pelo " "Sped)."
        ),
    )

    IND_SIT_INI_PER = fields.Char(
        string="Indicador de situação no início do período",
        required=True,
        xsd_type="numeric_code",
        sped_length="1",
        help=(
            "Indicador de situação no início do período (conforme tabela "
            "publicada pelo Sped)."
        ),
    )

    IND_NIRE = fields.Char(
        string="Indicador de existência de NIRE",
        required=True,
        xsd_type="numeric_code",
        sped_length="1",
        help=(
            "Indicador de existência de NIRE: 0 – Empresa não possui registro "
            "na Junta Comercial (não possui NIRE) 1 – Empresa possui registro "
            "na Junta Comercial (possui NIRE)"
        ),
    )

    IND_FIN_ESC = fields.Char(
        string="Indicador de finalidade da escrituração",
        required=True,
        xsd_type="numeric_code",
        sped_length="1",
        help=(
            "Indicador de finalidade da escrituração: 0 - Original 1 – " "Substituta"
        ),
    )

    COD_HASH_SUB = fields.Char(
        string="Hash da escrituração substituída", sped_length="4"
    )

    IND_GRANDE_PORTE = fields.Char(
        string="Indicador de entidade sujeita",
        required=True,
        xsd_type="numeric_code",
        sped_length="1",
        help=(
            "Indicador de entidade sujeita a auditoria independente: 0 – "
            "Empresa não é entidade sujeita a auditoria independente. 1 – "
            "Empresa é entidade sujeita a auditoria independente – Ativo Total"
            " superior a R$ 240.000.000,00 ou Receita Bruta Anual superior "
            "R$300.000.000,00."
        ),
    )

    TIP_ECD = fields.Integer(
        string="Indicador do tipo de ECD",
        required=True,
        sped_length="1",
        help=(
            "Indicador do tipo de ECD: 0 – ECD de empresa não participante de "
            "SCP como sócio ostensivo. 1 – ECD de empresa participante de SCP "
            "como sócio ostensivo. 2 – ECD da SCP."
        ),
    )

    COD_SCP = fields.Char(
        string="CNPJ da SCP",
        xsd_type="numeric_code",
        sped_length="14",
        help=(
            "CNPJ da SCP (Art. 4º, XVII, da IN RFB nº 1.863, de 27 de dezembro"
            " de 2018). Observação: Só deve ser preenchido pela própria SCP "
            "com o CNPJ da SCP (Não é preenchido pelo sócio ostensivo)."
        ),
    )

    IDENT_MF = fields.Char(
        string="Identificação de moeda funcional",
        required=True,
        sped_length="1",
        help=(
            "Identificação de moeda funcional: Indica que a escrituração "
            "abrange valores com base na moeda funcional (art. 287 da "
            "Instrução Normativa RFB nº 1.700, de 14 de março de 2017). "
            "Observação: Deverá ser utilizado o registro I020 para informação "
            "de campos adicionais, conforme instruções do item 1.24."
        ),
    )

    IND_ESC_CONS = fields.Char(
        string="Escriturações Contábeis Consolidadas",
        required=True,
        sped_length="1",
        help=(
            "Escriturações Contábeis Consolidadas: (Deve ser preenchido pela "
            "empresa controladora obrigada a informar demonstrações contábeis "
            "consolidadas, nos termos da Lei nº 6.404/76 e/ou do "
            "Pronunciamento Técnico CPC 36 – Demonstrações Consolidadas) S – "
            "Sim N – Não"
        ),
    )

    IND_CENTRALIZADA = fields.Char(
        string="Indicador da modalidade",
        required=True,
        xsd_type="numeric_code",
        sped_length="1",
        help=(
            "Indicador da modalidade de escrituração centralizada ou "
            "descentralizada: 0 – Escrituração Centralizada 1 – Escrituração "
            "Descentralizada"
        ),
    )

    IND_MUDANC_PC = fields.Char(
        string="Indicador de mudança de plano de contas",
        required=True,
        xsd_type="numeric_code",
        sped_length="1",
        help=(
            "Indicador de mudança de plano de contas: 0 – Não houve mudança no"
            " plano de contas. 1 – Houve mudança no plano de contas."
        ),
    )

    COD_PLAN_REF = fields.Char(
        string="O Código do Plano de Contas Referencial",
        sped_length="2",
        help=(
            "O Código do Plano de Contas Referencial que será utilizado para o"
            " mapeamento de todas as contas analíticas: 1 – PJ em Geral – "
            "Lucro Real 2 – PJ em Geral – Lucro Presumido 3 – Financeiras – "
            "Lucro Real 4 – Seguradoras – Lucro Real 5 – Imunes e Isentas em "
            "Geral 6 – Imunes e Isentas – Financeiras 7 – Imunes e Isentas – "
            "Seguradoras 8 – Entidades Fechadas de Previdência Complementar 9 "
            "– Partidos Políticos 10 – Financeiras – Lucro Presumido "
            "bservação: Caso a pessoa jurídica não realize o mapeamento para "
            "os planos referenciais na ECD, este campo deve ficar em branco."
        ),
    )


class Registro0007(models.AbstractModel):
    "OUTRAS INSCRIÇÕES CADASTRAIS DA PESSOA JURÍDICA"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.fake.9.0007"
    _inherit = "l10n_br_sped.mixin.fake"
    _sped_level = 2

    COD_ENT_REF = fields.Char(
        string="Código da instituição responsável",
        required=True,
        help=(
            "Código da instituição responsável pela administração do cadastro "
            "(conforme tabela publicada pelo Sped)."
        ),
    )

    COD_INSCR = fields.Char(
        string="Código cadastral da pessoa jurídica",
        help=(
            "Código cadastral da pessoa jurídica na instituição identificada "
            "no campo 02."
        ),
    )


class RegistroI010(models.AbstractModel):
    "IDENTIFICAÇÃO DA ESCRITURAÇÃO CONTÁBIL"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.fake.9.i010"
    _inherit = "l10n_br_sped.mixin.fake"
    _sped_level = 2

    IND_ESC = fields.Char(
        string="G R A B Z Indicador da forma",
        required=True,
        sped_length="1",
        help=(
            "G R A B Z Indicador da forma de escrituração contábil: - Livro "
            "Diário (Completo sem escrituração auxiliar). - Livro Diário com "
            "Escrituração Resumida (com escrituração auxiliar). - Livro Diário"
            " Auxiliar ao Diário com Escrituração Resumida. - Livro Balancetes"
            " Diários e Balanços. – Razão Auxiliar (Livro Contábil Auxiliar "
            "conforme leiaute definido nos registros I500 a I555)."
        ),
    )

    COD_VER_LC = fields.Char(
        string="Código da Versão do Leiaute Contábil", required=True
    )

    reg_I012_ids = fields.One2many(
        "l10n_br_sped.fake.i012",
        "reg_I012_ids_RegistroI010_id",
        string="I012 LIVROS AUXILIARES AO DIÁRIO",
        sped_card="0:N",
        sped_required=True,
    )

    reg_I030_ids = fields.One2many(
        "l10n_br_sped.fake.i030",
        "reg_I030_ids_RegistroI010_id",
        string="I030 TERMO DE ABERTURA",
        sped_card="1",
        sped_required=True,
    )

    reg_I050_ids = fields.One2many(
        "l10n_br_sped.fake.i050",
        "reg_I050_ids_RegistroI010_id",
        string="I050 PLANO DE CONTAS",
        sped_card="1:N",
        sped_required=True,
    )

    reg_I510_ids = fields.One2many(
        "l10n_br_sped.fake.i510",
        "reg_I510_ids_RegistroI010_id",
        string="I510",
        sped_card="0:N",
        sped_required=True,
        help=(
            "I510 DEFINIÇÃO DOS CAMPOS DO LIVRO RAZÃO AUXILIAR COM LEIAUTE "
            "PARAMETRIZÁVEL"
        ),
    )

    reg_I550_ids = fields.One2many(
        "l10n_br_sped.fake.i550",
        "reg_I550_ids_RegistroI010_id",
        string="I550",
        sped_card="0:N",
        sped_required=True,
        help=("I550 DETALHES DO LIVRO RAZÃO AUXILIAR COM LEIAUTE PARAMETRIZÁVEL"),
    )


class RegistroI012(models.AbstractModel):
    "LIVROS AUXILIARES AO DIÁRIO"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.fake.9.i012"
    _inherit = "l10n_br_sped.mixin.fake"
    _sped_level = 3

    NUM_ORD = fields.Integer(
        string="Número de ordem do instrumento associado", required=True
    )

    NAT_LIVR = fields.Char(
        string="Natureza do livro associado; finalidade",
        required=True,
        sped_length="8",
        help=(
            "Natureza do livro associado; finalidade a que se destina o " "instrumento."
        ),
    )

    TIPO = fields.Char(
        string="Tipo de escrituração do livro associado",
        required=True,
        xsd_type="numeric_code",
        sped_length="1",
        help=(
            "Tipo de escrituração do livro associado: 0 – digital (incluído no"
            " Sped). 1 – outros."
        ),
    )

    COD_HASH_AUX = fields.Char(
        string="Código Hash do arquivo correspondente",
        sped_length="4",
        help=(
            "Código Hash do arquivo correspondente ao livro auxiliar utilizado"
            " na assinatura digital."
        ),
    )

    reg_I012_ids_RegistroI010_id = fields.Many2one(
        comodel_name="l10n_br_sped.fake.i010",
        string="IDENTIFICAÇÃO DA ESCRITURAÇÃO CONTÁBIL",
        required=True,
        ondelete="cascade",
    )

    reg_I015_ids = fields.One2many(
        "l10n_br_sped.fake.i015",
        "reg_I015_ids_RegistroI012_id",
        string="I015",
        sped_card="1:N",
        sped_required=True,
        help=(
            "I015 IDENTIFICAÇÃO DAS CONTAS DA ESCRITURAÇÃO RESUMIDA A QUE SE "
            "REFERE A ESCRITURAÇÃO AUXILIAR"
        ),
    )


class RegistroI015(models.AbstractModel):
    """IDENTIFICAÇÃO DAS CONTAS DA ESCRITURAÇÃO RESUMIDA A QUE SE REFERE A
    ESCRITURAÇÃO AUXILIAR"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.fake.9.i015"
    _inherit = "l10n_br_sped.mixin.fake"
    _sped_level = 4

    COD_CTA_RES = fields.Char(
        string="Código da(s) conta(s) analítica(s) do Livro Diário",
        required=True,
        help=(
            "Código da(s) conta(s) analítica(s) do Livro Diário com "
            "Escrituração Resumida (R) que recebe os lançamentos globais (deve"
            " corresponder a uma conta sintética no livro auxiliar)."
        ),
    )

    reg_I015_ids_RegistroI012_id = fields.Many2one(
        comodel_name="l10n_br_sped.fake.i012",
        string="LIVROS AUXILIARES AO DIÁRIO",
        required=True,
        ondelete="cascade",
    )


class RegistroI030(models.AbstractModel):
    "TERMO DE ABERTURA"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.fake.9.i030"
    _inherit = "l10n_br_sped.mixin.fake"
    _sped_level = 3

    DNRC_ABERT = fields.Char(
        string="Texto fixo contendo “TERMO DE ABERTURA”",
        required=True,
        sped_length="17",
    )

    NUM_ORD = fields.Integer(
        string="Número de ordem do instrumento de escrituração", required=True
    )

    NAT_LIVR = fields.Char(
        string="Natureza do livro; finalidade a que se destina",
        required=True,
        sped_length="8",
        help=("Natureza do livro; finalidade a que se destina o instrumento."),
    )

    QTD_LIN = fields.Integer(
        string="Quantidade total de linhas do arquivo digital", required=True
    )

    NOME = fields.Char(string="Nome empresarial", required=True)

    NIRE = fields.Char(
        string="Número de Identificação do Registro de Empresas",
        xsd_type="numeric_code",
        sped_length="11",
        help=("Número de Identificação do Registro de Empresas da Junta " "Comercial."),
    )

    CNPJ = fields.Char(
        string="Número de inscrição no CNPJ",
        required=True,
        xsd_type="numeric_code",
        sped_length="14",
    )

    DT_ARQ = fields.Date(
        string="Data do arquivamento dos atos constitutivos", sped_length="8"
    )

    DT_ARQ_CONV = fields.Date(
        string="Data de arquivamento do ato de conversão",
        sped_length="8",
        help=(
            "Data de arquivamento do ato de conversão de sociedade simples em "
            "sociedade empresária."
        ),
    )

    DESC_MUN = fields.Char(string="Município")

    DT_EX_SOCIAL = fields.Date(
        string="Data de encerramento do exercício social",
        required=True,
        sped_length="8",
    )

    reg_I030_ids_RegistroI010_id = fields.Many2one(
        comodel_name="l10n_br_sped.fake.i010",
        string="IDENTIFICAÇÃO DA ESCRITURAÇÃO CONTÁBIL",
        required=True,
        ondelete="cascade",
    )


class RegistroI050(models.AbstractModel):
    "PLANO DE CONTAS"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.fake.9.i050"
    _inherit = "l10n_br_sped.mixin.fake"
    _sped_level = 3

    DT_ALT = fields.Date(
        string="Data da inclusão/alteração", required=True, sped_length="8"
    )

    COD_NAT = fields.Char(
        string="Código da natureza da conta/grupo de contas",
        required=True,
        sped_length="2",
        help=(
            "Código da natureza da conta/grupo de contas, conforme tabela "
            "publicada pelo Sped."
        ),
    )

    IND_CTA = fields.Char(
        string="Indicador do tipo de conta: S",
        required=True,
        sped_length="1",
        help=(
            "Indicador do tipo de conta: S - Sintética (grupo de contas) A - "
            "Analítica (conta)"
        ),
    )

    NIVEL = fields.Integer(
        string="Nível da conta analítica/grupo de contas", required=True
    )

    COD_CTA = fields.Char(
        string="Código da conta analítica/grupo de contas", required=True
    )

    COD_CTA_SUP = fields.Char(
        string="Código da conta sintética /grupo de contas",
        help=(
            "Código da conta sintética /grupo de contas de nível imediatamente"
            " superior."
        ),
    )

    CTA = fields.Char(string="Nome da conta analítica/grupo de contas", required=True)

    reg_I050_ids_RegistroI010_id = fields.Many2one(
        comodel_name="l10n_br_sped.fake.i010",
        string="IDENTIFICAÇÃO DA ESCRITURAÇÃO CONTÁBIL",
        required=True,
        ondelete="cascade",
    )


class RegistroI510(models.AbstractModel):
    """DEFINIÇÃO DOS CAMPOS DO LIVRO RAZÃO AUXILIAR COM LEIAUTE
    PARAMETRIZÁVEL"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.fake.9.i510"
    _inherit = "l10n_br_sped.mixin.fake"
    _sped_level = 3

    NM_CAMPO = fields.Char(
        string="Nome do campo",
        required=True,
        sped_length="16",
        help="Nome do campo, sem espaços em branco ou caractere especial.",
    )

    DESC_CAMPO = fields.Char(
        string="Descrição do campo",
        required=True,
        sped_length="5",
        help=("Descrição do campo (utilizada na visualização do Livro Auxiliar)"),
    )

    TIPO_CAMPO = fields.Char(
        string="Tipo do campo",
        required=True,
        sped_length="1",
        help="Tipo do campo: “N” – Numérico; “C” – Caractere.",
    )

    TAM_CAMPO = fields.Char(
        string="Tamanho do campo",
        required=True,
        xsd_type="numeric_code",
        sped_length="3",
    )

    DEC_CAMPO = fields.Char(
        string="Quantidade de casas decimais para campos tipo “N”",
        xsd_type="numeric_code",
        sped_length="2",
    )

    COL_CAMPO = fields.Char(
        string="Largura da coluna no relatório",
        required=True,
        xsd_type="numeric_code",
        sped_length="3",
        help=("Largura da coluna no relatório (em quantidade de caracteres)."),
    )

    reg_I510_ids_RegistroI010_id = fields.Many2one(
        comodel_name="l10n_br_sped.fake.i010",
        string="IDENTIFICAÇÃO DA ESCRITURAÇÃO CONTÁBIL",
        required=True,
        ondelete="cascade",
    )


class RegistroI550(models.AbstractModel):
    "DETALHES DO LIVRO RAZÃO AUXILIAR COM LEIAUTE PARAMETRIZÁVEL"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.fake.9.i550"
    _inherit = "l10n_br_sped.mixin.fake"
    _sped_level = 3

    reg_I550_ids_RegistroI010_id = fields.Many2one(
        comodel_name="l10n_br_sped.fake.i010",
        string="IDENTIFICAÇÃO DA ESCRITURAÇÃO CONTÁBIL",
        required=True,
        ondelete="cascade",
    )

    reg_I555_ids = fields.One2many(
        "l10n_br_sped.fake.i555",
        "reg_I555_ids_RegistroI550_id",
        string="I555",
        sped_card="0:N",
        sped_required=True,
        help=("I555 TOTAIS NO LIVRO RAZÃO AUXILIAR COM LEIAUTE PARAMETRIZÁVEL"),
    )


class RegistroI555(models.AbstractModel):
    "TOTAIS NO LIVRO RAZÃO AUXILIAR COM LEIAUTE PARAMETRIZÁVEL"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.fake.9.i555"
    _inherit = "l10n_br_sped.mixin.fake"
    _sped_level = 4

    reg_I555_ids_RegistroI550_id = fields.Many2one(
        comodel_name="l10n_br_sped.fake.i550",
        string="reg_I555_ids_RegistroI550_id",
        required=True,
        ondelete="cascade",
        help="DETALHES DO LIVRO RAZÃO AUXILIAR COM LEIAUTE PARAMETRIZÁVEL",
    )


class RegistroJ900(models.AbstractModel):
    "TERMO DE ENCERRAMENTO"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.fake.9.j900"
    _inherit = "l10n_br_sped.mixin.fake"
    _sped_level = 2

    DNRC_ENCER = fields.Char(
        string="Texto fixo contendo “TERMO DE ENCERRAMENTO”",
        required=True,
        sped_length="21",
    )

    NUM_ORD = fields.Integer(
        string="Número de ordem do instrumento de escrituração", required=True
    )

    NAT_LIVRO = fields.Char(
        string="Natureza do livro; finalidade a que se destinou",
        required=True,
        sped_length="8",
        help=("Natureza do livro; finalidade a que se destinou o instrumento."),
    )

    NOME = fields.Char(string="Nome empresarial", required=True, sped_length="(*)")

    QTD_LIN = fields.Integer(
        string="Quantidade total de linhas do arquivo digital", required=True
    )

    DT_INI_ESCR = fields.Date(
        string="Data de início da escrituração", required=True, sped_length="8"
    )

    DT_FIN_ESCR = fields.Date(
        string="Data de término da escrituração", required=True, sped_length="8"
    )

    reg_J930_ids = fields.One2many(
        "l10n_br_sped.fake.j930",
        "reg_J930_ids_RegistroJ900_id",
        string="J930 SIGNATÁRIOS DA ESCRITURAÇÃO",
        sped_card="1:N",
        sped_required=True,
    )


class RegistroJ930(models.AbstractModel):
    "SIGNATÁRIOS DA ESCRITURAÇÃO"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "l10n_br_sped.fake.9.j930"
    _inherit = "l10n_br_sped.mixin.fake"
    _sped_level = 3

    IDENT_NOM = fields.Char(string="Nome do signatário", required=True)

    IDENT_CPF_CNPJ = fields.Char(
        string="CPF ou CNPJ",
        required=True,
        xsd_type="numeric_code",
        sped_length="CPF (11) CNPJ(14)",
    )

    IDENT_QUALIF = fields.Char(
        string="Qualificação do assinante",
        required=True,
        help="Qualificação do assinante, conforme tabela.",
    )

    COD_ASSIN = fields.Char(
        string="Código de qualificação do assinante",
        required=True,
        sped_length="3",
        help="Código de qualificação do assinante, conforme tabela.",
    )

    IND_CRC = fields.Char(
        string="Número de inscrição do contabilista",
        help=(
            "Número de inscrição do contabilista no Conselho Regional de "
            "Contabilidade."
        ),
    )

    EMAIL = fields.Char(string="Email do signatário", sped_length="6")

    FONE = fields.Char(string="Telefone do signatário", sped_length="14")

    UF_CRC = fields.Char(
        string="Indicação da unidade da federação que expediu",
        sped_length="2",
        help="Indicação da unidade da federação que expediu o CRC.",
    )

    NUM_SEQ_CRC = fields.Char(
        string="Número da Certidão de Regularidade Profissional",
        help=(
            "Número da Certidão de Regularidade Profissional do Contador no "
            "seguinte formato: UF/ano/número"
        ),
    )

    DT_CRC = fields.Date(
        string="Data de validade da Certidão",
        sped_length="8",
        help=(
            "Data de validade da Certidão de Regularidade Profissional do " "Contador"
        ),
    )

    IND_RESP_LEGAL = fields.Char(
        string="Identificação do signatário que será validado",
        required=True,
        sped_length="1",
        help=(
            "Identificação do signatário que será validado como responsável "
            "pela assinatura da ECD, conforme atos societários: S – Sim N – "
            "Não"
        ),
    )

    reg_J930_ids_RegistroJ900_id = fields.Many2one(
        comodel_name="l10n_br_sped.fake.j900",
        string="TERMO DE ENCERRAMENTO",
        required=True,
        ondelete="cascade",
    )
